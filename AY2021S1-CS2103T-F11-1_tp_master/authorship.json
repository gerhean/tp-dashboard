[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rnmy"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-1/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "[![Codacy Badge](https://app.codacy.com/project/badge/Grade/1e0606fe52f544aba04b1c6bb92b2f5f)](https://www.codacy.com/gh/AY2021S1-CS2103T-F11-1/tp/dashboard?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY2021S1-CS2103T-F11-1/tp\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": "# TAsker"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "## About"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "TAsker is a desktop application that seeks to help NUS CS TAs better manage their classes. Optimized for use via a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Command Line Interface (CLI), users may track studentâ€™s submissions, consultation timings and grades, through the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Graphical User Interface (GUI) in a structured manner."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rnmy"
        },
        "content": "If you are interested in using TAsker, head over to the Quick Start section of the **[User Guide](https://github.com/AY2021S1-CS2103T-F11-1/tp/blob/master/docs/UserGuide.md)** to find out more."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rnmy"
        },
        "content": "## User Interface"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rnmy"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rnmy"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "rnmy": 14,
      "-": 4,
      "chrisgzf": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    id \"com.star-zero.gradle.githook\" version \"1.2.1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    compile \u0027org.apache.commons:commons-csv:1.8\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    archiveName \u003d \u0027tasker.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "githook {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    failOnMissingHooksDir \u003d true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    createHooksDirIfNotExist \u003d true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    hooks {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \"pre-push\" {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            task \u003d \"test clean checkstyleMain checkStyleTest\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 2,
      "-": 73,
      "chrisgzf": 14
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "This is a team project written using purely Java, created for CS2103T."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Professor Damith C"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cimg src\u003d\"images/damithc.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[[github](https://github.com/damithc)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Role: Project Advisor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Christopher Goh"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cimg src\u003d\"images/chrisgzf.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[[github](http://github.com/chrisgzf)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "[[portfolio](team/chrisgzf.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Role: Team Lead"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Responsibilities: UI/UX"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Noel Kwan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cimg src\u003d\"images/kwannoel.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "[[github](http://github.com/kwannoel)] "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "[[portfolio](team/kwannoel.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Responsibilities: Data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Sun Yitao"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cimg src\u003d\"images/sun-yitao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[[github](http://github.com/sun-yitao)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "[[portfolio](team/sun-yitao.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Rachel Ng"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cimg src\u003d\"images/rnmy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[[github](http://github.com/rnmy)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "[[portfolio](team/rnmy.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Responsibilities: Testing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Rishi Ravikumar"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cimg src\u003d\"images/rishi5154.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[[github](http://github.com/rishi5154)]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "[[portfolio](team/rishi5154.md)]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Role: Developer"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Responsibilities: UI/UX"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 18,
      "sun-yitao": 6,
      "-": 34,
      "chrisgzf": 11
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, _if the current file is outdated_.\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - `./gradlew test`â€‰â€”â€‰Runs all tests"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - `./gradlew clean test`â€‰â€”â€‰Cleans the project and runs tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-1/tp) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "chrisgzf": 20
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c!-- prettier-ignore --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The **_Architecture Diagram_** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#### UI Styling"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The `UI` component uses JavaFX UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The `MainWindow` FXML file also references a CSS stylesheet [`TaskerTheme.css`](https://github.com/AY2021S1-CS2103T-F11-1/tp/blob/master/src/main/resources/view/TaskerTheme.css), which gives the JavaFX UI component modularity with certain UI variables (e.g. primary colors, etc.)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "At the CSS file\u0027s header, we have:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "```css"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "* {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-tasker-base-color: #ffffff;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-tasker-base-color-darker: #ffffff;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-tasker-font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    \"Segoe UI Symbol\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-primary-color: #00089c;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-primary-lighter: #99cfff;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-primary-bg: #bde0ff;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The `font-family` has been set to the default sans-serif fonts of respective operating systems, so that the displayed font will be consistent with the user\u0027s browsing experiences on other applications, providing a sense of familiarity when interacting with the UI."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "CSS variables like the base color or font-family are set in the root CSS class (`*`), and these variables can be referenced by other CSS selectors."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "```css"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  /* other CSS styles */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The CSS stylesheet also offers developers advanced control over the appearance of intermediate states (hovered, selected, etc.) with CSS pseudo-classes."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "```css"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-border-color: -fx-primary-lighter;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  /* other CSS properties */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#commandTextField:hover {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-border-color: -fx-primary-color;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#commandTextField:focused {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-border-color: -fx-primary-color;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "This gives us finer control over the UI appearance, to create a more interactive UI that better responds to the user\u0027s interactions."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- stores a `UserPref` object that represents the userâ€™s preferences."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- stores the address book data."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- does not depend on any of the other three components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `Tasker`, which `Person` references. This allows `Tasker` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-F11-1/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### View all student data"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Querying the data of all current students in TAsker is really simple. Once the `list` command is inputted, the name,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "phone number, telegram tag, matric number, email, tutorial classes and attendance record of all students are displayed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "on TAsker\u0027s GUI."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#### Sequence of action"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "1. `LogicManager` processes the user input \"list\"."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "2. AddressBookParser is called with it\u0027s `parseCommand(userInput)` method to parse input, which returns a new"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   `ListCommand` object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "3. Next, `Logicmanager` calls our new `ListCommand` object\u0027s`execute` method with the `model` field of `LogicManager` as input."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "4. Within the `ListCommand#execute` method, the `model` field calls its own `updateFilteredPersonList` method to update"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   the list to show all persons."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "5. Lastly, a new `CommandResult` with the relevant success message is finally returned to `LogicManager`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "All of these details and interactions are captured in the sequence diagram below."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "![ListStudentSequenceDiagram](images/ListStudentSequenceDiagram.png)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Find a student\u0027s data"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Querying the data of a specific student in TAsker is just as simple as finding all. Once the `find \u003cNAME\u003e` command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rnmy"
        },
        "content": "is inputted, the name, phone number, telegram tag, matric number, email, tutorial classes and attendance record of the"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rnmy"
        },
        "content": "specific student is displayed on TAsker\u0027s GUI."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#### Sequence of action"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "1. `LogicManager` processes the user input \"find Roy\", for example."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "2. AddressBookParser is called with it\u0027s `parseCommand(userInput)` method to parse input, which in turns creates a"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rnmy"
        },
        "content": "   new `FindCommandParser` object."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "3. The `FindCommandParser` object calls its own `parse` method with the `\" Roy\"` as input."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "4. Now, the `\" Roy\"` argument is broken down into its individual strings, with whitespace removed and into an array,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   which is processed and used as predicate for filtering out the desired student."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "5. `Logicmanager` calls our `FindCommand` object\u0027s `execute` method with the `model` field of `LogicManager` as input."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "6. Within the `FindCommand#execute` method, the `model` field calls its own `updateFilteredPersonList` method to update"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   the list to retrieve the relevant person."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "7. Lastly, a new `CommandResult` with the relevant message is finally returned to `LogicManager`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "All of these details and interactions are captured in the sequence diagram below."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "![ListStudentSequenceDiagram](images/FindStudentSequenceDiagram.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rnmy"
        },
        "content": "### Update Student data"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rnmy"
        },
        "content": "`TAsker` also supports the updating of student data. With the aforementioned extension of fields, the update feature now"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rnmy"
        },
        "content": "encompasses both the `MatricNumber` and `Telegram` fields as well."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rnmy"
        },
        "content": "When the `edit \u003cINDEX_TO_UPDATE\u003e \u003cFIELDS_TO_UPDATE\u003e` command is inputted, the fields provided in `\u003cFIELDS_TO_UPDATE\u003e`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rnmy"
        },
        "content": "will be updated for the student with the specific `\u003cINDEX_TO_UPDATE\u003e` on the GUI."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Fields in `\u003cFIELDS_TO_UPDATE\u003e` should adhere to the following syntax:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rnmy"
        },
        "content": "|     Field     |       Syntax        |"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| :-----------: | :-----------------: |"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rnmy"
        },
        "content": "|     Name      |     n/\u003c NAME \u003e      |"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| Phone Number  |     p/\u003c PHONE \u003e     |"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rnmy"
        },
        "content": "|     Email     |     e/\u003c EMAIL \u003e     |"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| Telegram User |   t/\u003c TELEGRAM \u003e    |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| Matric Number | m/\u003c MATRIC_NUMBER \u003e |"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rnmy"
        },
        "content": "|      Tag      |     tg/\u003c TAG \u003e      |"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rnmy"
        },
        "content": "More than one tag can be provided and inputting tg/ without specifying any tags after it removes all existing tags."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rnmy"
        },
        "content": "#### Sequence of action"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rnmy"
        },
        "content": "1. `LogicManager` processes the user input, for instance `\"edit 1 p/91234567 m/A1234567Z\"`, with"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rnmy"
        },
        "content": "   the `LogicManager#execute(commandText)` method."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rnmy"
        },
        "content": "2. `AddressBookParser` is then called with it\u0027s `parseCommand(userInput)` method to parse input, which in turns creates"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rnmy"
        },
        "content": "   a new `EditCommandParser` object."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rnmy"
        },
        "content": "3. The `EditCommandParser` object calls its own `parse` method with `\" 1 p/91234567 m/A1234567Z\"` as input."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rnmy"
        },
        "content": "4. Now, the `\" 1 p/91234567 m/A1234567Z\"` argument is broken down into an `Index` and tokens in an `ArgumentMultiMap`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rnmy"
        },
        "content": "   based on the field prefixes. Subsequently, an `EditPersonDescriptor` object is created and used to store the fields that"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rnmy"
        },
        "content": "   are present in the `ArgumentMultiMap`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rnmy"
        },
        "content": "5. For valid inputs, an `EditCommand` object is then created with the `Index` and `EditPersonDescriptor` as inputs."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rnmy"
        },
        "content": "6. Our new `EditCommand` object calls its own `execute` method with the `model` field of `LogicManager` as input."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rnmy"
        },
        "content": "7. Lastly, a new `CommandResult` with the relevant message is finally returned to `LogicManager`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rnmy"
        },
        "content": "All of these details and interactions are captured in the sequence diagram below."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rnmy"
        },
        "content": "![UpdateStudentSequenceDiagram](images/UpdateStudentSequenceDiagram.png)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "### Create Student data"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "`TAsker` now supports creating student data as well. We extended `TAsker` with 2 relevant fields,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "`MatricNumber` and `Telegram` which track their matriculation numbers and Telegram handles respectively."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "##### Using regexes to validate our fields"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "To ensure the correct fields are included,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "we have introduced regexes for Matriculation numbers and telegram handles"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "which perform the validation for us."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- Matriculation number validation regex"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ^A\\\\d{7}[A-Z]$"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  `^` means to match from the start of the line."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  `A` means the first letter should be \u0027A\u0027."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  `\\\\d{7}` means there should be 7 digits from 0 to 9."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  Note that Java uses `\\\\d` rather than `\\d` to escape the `\\` character from the string."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  `[A-Z]` means that the last character should be one of A to Z."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- Telegram handle validation regex"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ^[a-zA-Z0-9_-]{5,32}$"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  `^` means to match from the start of the line."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  `[a-zA-Z0-9_-]` means we accept alphanumeric characters, including capital letters. We also accept `-` and `-`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  `[...]{5, 32}` means we expect the string to contain between 5 to 32 (inclusive) of the above characters."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Implementing this is rather straightforward since we can reference other fields (`address`, `name`, ...) we use."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "##### Builder pattern"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Another notable aspect is the [`Builder` pattern](https://en.wikipedia.org/wiki/Builder_patternhttps://en.wikipedia.org/wiki/Builder_pattern) we use for tests."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Thanks to this abstraction, refactoring tests for `Person` was relatively straightforward."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "To illustrate this, suppose we have a test using `Person` class."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```java"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "class Test {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  test() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     // Person with valid name"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     assertEq(parsePerson(\"James,james@abc.xyz\"), new Person(\"James\", \"james@abc.xyz\"));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     // Person with valid email"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     assertEq(parsePerson(\"Zack,zack@abc.xyz\"), new Person(\"Zack\", \"zack@abc.xyz\"));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Now we add the two fields, `MatricNumber` and `Telegram` to `Person` and we have to update our tests:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```java"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "class Test {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  test() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     // Person with valid name"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     assertEq("
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         parsePerson(\"James,james@abc.xyz\"),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         new Person(\"James\", \"james@abc.xyz\", \"A0001111B\", \"james_lee\") // Update 1"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     );"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     // Person with valid email"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     assertEq("
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         parsePerson(\"Zack,zack@abc.xyz\"),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         new Person(\"Zack\", \"zack@abc.xyz\", \"A0002222B\", \"zack_koh\") // Update 2"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     );"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Note that we had to update at 2 areas with mock `MatricNumber` and `Telegram` handle."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "We are only concerned about valid name and email, so we shouldn\u0027t have to update these!"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "`PersonBuilder` introduces default values for fields we don\u0027t want to test."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "With `PersonBuilder`:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```java"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "class Test {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  test() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     // Person with valid name"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     assertEq("
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         parsePerson(\"James,james@abc.xyz\"),"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         new PersonBuilder.addName(\"James\").addEmail(\"james@abc.xyz\").build()"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     );"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     // Person with valid email"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     assertEq("
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         parsePerson(\"Zack,zack@abc.xyz\"),"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "         new PersonBuilder.addName(\"Zack\").addEmail(\"zack@abc.xyz\").build()"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     );"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "After we add `MatricNumber` and `Telegram` fields in `Person` we can update `PersonBuilder` with these:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```java"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "class PersonBuilder {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    PersonBuilder() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // ..."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        matricNumber \u003d DEFAULT_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        telegram \u003d DEFAULT_TELEGRAM;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Person addMatricNumber(String matricNumber) { /* ... */ }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Person addTelegram(String telegram) { /* ... */ }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "```"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "All our existing tests using `PersonBuilder` will still work, and all we had to do was update definitions in `PersonBuilder`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "### Show attendance"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "#### Sequence of action"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Shows if a student is present on a specific day."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "1. Parse the `showatt` command"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "2. Get the person list (`lastShownList`) with `model.getFilteredPersonList()`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "3. Get the person at the index with `lastShownList.get(targetIndex.getZeroBased())`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "3. Check if the student has attended at a specific date by calling:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "   boolean hasAttended \u003d attendances"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "       .stream()"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "       .anyMatch(attendance1 -\u003e attendance1.equals(attendance));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "4. If no such person exists, return a message indicating the person is absent"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "5. Otherwise return a message indicating the person is present on that day."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "![ShowAttendanceSequenceDiagram](images/ShowAttendanceSequenceDiagram.png)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Unmark a student\u0027s attendance"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "This command removes the specified date from a student\u0027s attendance list. TAsker\u0027s attendance tab on the GUI will simply"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "remove the specified date from the displayed list. This removal is only visible if the student has been marked to attend"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "on the given date previously. Else no new changes are observed."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#### Sequence of action"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "1. `LogicManager` processes the user input \"unattend 3 d/10/10/2020\", for example."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "2. AddressBookParser is called with it\u0027s `parseCommand(userInput)` method to parse input, which in turns creates a"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   new `UnattendCommandParser` object."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "3. The `UnattendCommandParser` object calls its own `parse` method with the `\" 3 d/10/10/2020\"` as input."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "4. Now, the `\" 3 d/10/10/2020\"` argument is broken down into its individual components,"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   which is processed and used as predicate for filtering out the desired student, as well as the date to unattend."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "5. A `UnattendCommand` object is created as well.   "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "6. Within the `UnattendCommand#execute` method, the `model` field calls its own `getFilteredPersonList` method to retrieve"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   the student to unattend."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "7. Next, `ListCommand` object calls its own `updateAttendanceForPerson` method to create the replacing, unattended Person object for the target Person object."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "8. After that, the `setPerson` \u0026 `updateFilteredPersonList` methods of model are invoked to update the current Person collection."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "8. Lastly, a new `CommandResult` with the relevant message is finally returned to `LogicManager`."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "All of these details and interactions are captured in the sequence diagram below."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "![UnattendStudentSequenceDiagram](images/UnattendStudentSequenceDiagram.png)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "### Export attendance"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "The `ExportAttendanceCommand` writes a new csv to `data/attendance_{CURRENT_DATE}_{CURRENT_TIME}.csv`. The csv columns headers are the names of the students and the rows are the dates. Each cell is marked with `ATTENDED` or `ABSENT` depending on whether the attendance for that student on that particular date has been marked."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "The details of the implementation are as follows. First, we iterate through each student, calling `person.getAttendances` and adding the resulting attendances to a TreeSet called `allAttendances` that will contain all the dates in sorted order so we can form the rows of the csv. We also create a new HashSet of `Attendance` for each student, stored in an ArrayList so that the queries for the following part can be made faster. Next, we go through each date in `allAttendances`, and iterate through the ArrayList of HashSet of `Attendance`. If a date exists in that HashSet, the cell corresponding to the student and date will be marked as `ATTENDED`, and `ABSENT` otherwise."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Archive command"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Enables users to quickly create a backup copy of their data in TAsker, saved in `tasker_\u003cdate\u003e_\u003chhmm\u003e.json` format, for users to expedite the freshness of their data."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "#### Sequence of action"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "1. `LogicManager` processes the user input \"archive\", for example."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "2. AddressBookParser is called with it\u0027s `parseCommand(userInput)` method to parse input, which in turns creates a"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   new `ArchiveCommand` object."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "3. `LogicManager` then calls the `execute` method of `ArchiveCommand`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "4. Within the `ArchiveCommand#execute` method, a new `AddressBookStorage` object is created as  \u0026 the `model` field uses its"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   getter method to retrieve the `ReadOnlyAddressBook` object from the latter."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "   the student to unattend."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "5. Next, the `AddressBookStorage` calls its `save` method to save the recently retrieved `ReadOnlyAddressBook`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "6. Lastly, a new `CommandResult` with the relevant message is finally returned to `LogicManager`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "All of these details and interactions are captured in the sequence diagram below."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "![ArchiveSequenceDiagram](images/ArchiveSequenceDiagram.png)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `Tasker` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial Tasker state, then there are no previous Tasker states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone Tasker states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Pros: Easy to implement."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "### Command History"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The command history helps users to keep track of previously-entered commands. This allows the users to easily edit and re-run previously run commands. Users can browse between previously run commands by pressing on the \u003ckbd\u003eâ†‘\u003c/kbd\u003e and \u003ckbd\u003eâ†“\u003c/kbd\u003e keys in the command box."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The feature is implemented via `CommandHistory`, which internally, maintains a list of previously run commands stored as a list of `String`, as well as a integer pointer that keeps track of which command the user is focused on."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ":information_source: **Note:** `CommandHistory` only saves the commands that are run during the current user-session, to memory. That is, the command history will not persist after the application is exited."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "`CommandHistory` is implemented following the Singleton design pattern, because the application should only have one command history, and hence should only allow for the instantiation of one command history."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "On application launch, `CommandHistory` is initialised with an empty list, for its internal command storage mechanism. The pointer will also be set to the size of the list, so that the pointer will always point at the last-run command."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Whenever a command is run, regardless of whether it is a valid or invalid command, the command will be added to `CommandHistory`, and the pointer will be set to the size of the list again."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ":information_source: **Note:** This makes the pointer be a out-of-bounds index of the internal list of commands. However, this is planned and intentional, as the accessor methods for the list will never access out-of-bounds indices."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "When the command box is focused and whenever the user presses the \u003ckbd\u003eâ†‘\u003c/kbd\u003e key, `CommandHistory` will try to fetch the previous command. When fetching the previous command, it first checks if the history is empty. If the history is empty, the text in the command box will not be modified. However, if the history is not empty, the previous command will be returned and be set as the command box command, and the pointer will be set to point at the previous command of the previous command."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ":information_source: **Note:** Fetching the previous command also \"rolls-over\" the pointer to the most-recently run command if the least-recently run command is already pointed it. This also ensures that we will never access invalid list indices."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Likewise for when the command box is focused and whenever the user presses the \u003ckbd\u003eâ†“\u003c/kbd\u003e key, `CommandHistory` will try to fetch the next command. When fetching the next command, it first checks if the history is empty. If the history is empty, the text in the command box will not be modified. However, if the history is not empty, the next command will be returned and be set as the command box command, and the pointer will be set to point at the next command of the next command."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ":information_source: **Note:** Same as before, fetching the next command also \"rolls-over\" the pointer to the least-recently run command if the most-recently run command is already pointed it. This also ensures that we will never access invalid list indices."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Additionally, whenever a previous/next command is successfully fetched and set as the command box text, the command box cursor will also be set to be at the end of the command, to provide greater ease in editing the remembered commands."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Note that the behavior of `CommandHistory` is also changes depending on whether the last-run command is parsed successfully. The default behavior of the command box is to retain the errored command if it cannot be parsed correctly instead of wiping the errored command. In this case, it would provide an inferior user experience if the user presses \u003ckbd\u003eâ†‘\u003c/kbd\u003e, and realises that the same command (the errored command) is fetched from the command history, as the user will see no visual change. To avoid this, if there is a command parsing failure, we shift the pointer to point at the previous-run command instead of the most-recent run command."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "The activity diagram below provides a summary of the command history mechanism:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "![CommandHistoryActivityDiagram](images/CommandHistoryActivityDiagram.png)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "##### Aspect: Browsing behaviour of command history when at the ends"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Two possible behaviours were considered when designing the interaction of the command history, when the pointer has reached the ends of the history (i.e. when the pointer is at the least-recent and most-recent commands)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "* **Alternative 1 (current choice):** At the ends, \"roll-over\" at advance the pointer to the other end"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    * Easy to implement"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    * Less bug-prone (since you will never access out-of-bounds indices)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    * Might feel a little unintuitive for the user if they press \u003ckbd\u003eâ†“\u003c/kbd\u003e and end up at the least-recent command"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    * Does not follow the behaviour of common CLI tools like the Unix shell"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "* **Alternative 2:** Limit the command history from advancing, at the ends"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  * Pros:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    * Might provide a more natural user experience"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  * Cons:"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    * More bug-prone"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    * More difficult to implement"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Alternative 1 was chosen as it suited our development timeline better, and was less prone to bugs. This will be a tech-debt that we will take on and track. There are plans to refactor this code to Alternative 2 sometime in the future, as it will provide a more consistent and intuitive experience for our user."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Target user profile (user persona)**:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cimg width\u003d\"400\" src\u003d\"https://qph.fs.quoracdn.net/main-qimg-99674b15041e648e58263efc5ec0dcdb\" /\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Name: Jane"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Age: 19"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Undergraduate NUS CS Student, and a part-time teaching assistant"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- is a teaching assistant for CS modules"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- is busy because she is a overachieving student with lots of modules"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- needs to take attendance"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- needs to keep track of studentâ€™s assignments and their submission status"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- prefer desktop apps over other types"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- can type fast"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- codes a lot, so she prefers keyboard-based interfaces"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Value proposition**: TAs can track students\u0027 details and submissions in a efficient and structured manner"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a â€¦â€‹  | I want to â€¦â€‹                                                            | So that I canâ€¦â€‹                                                            |"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| -------- | -------- | ----------------------------------------------------------------------- | -------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `* * *`  | user     | CRUD student details into my data                                       | add/remove my students data when they join/drop the module                 |"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `* * *`  | user     | CRUD my studentsâ€™ attendance                                            |                                                                            |"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `* * *`  | user     | CRUD my studentsâ€™ assignments \u0026 status                                  | keep track of my studentsâ€™ assignmentâ€™s submission status                  |"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `* *`    | user     | CRUD my studentâ€™s consultation requests                                 | keep track of my studentsâ€™ consultation requests                           |"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `* *`    | user     | view all my upcoming consultations for the week, in chronological order | keep track of when my consultations are supposed to happen                 |"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `* *`    | user     | mark when I end each of my consultations                                | keep track of the time elapsed of each consultation session                |"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `*`      | user     | generate a summary of my weekly consultation hours                      | keep track of the total amount of consultation time, for claiming purposes |"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| `*`      | new user | see usage instructions                                                  | refer to instructions when I forget how to use the App                     |"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "(For all use cases below, the **System** is `TAsker` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: List all students**"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "2.  TAsker shows a list of students"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: Add a student**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "2.  TAsker shows a list of students"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "3.  User requests to add a specific student to the list"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "4.  TAsker adds the student to the list"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 2a. The student\u0027s details are insufficient/cannot be parsed."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 2a1. TAsker shows an error message."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: Delete a student**"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "2.  TAsker shows a list of students"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "3.  User requests to delete a specific student in the list"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "4.  TAsker deletes the student"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 2a. The list is empty."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 3a. The given index is invalid."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 3a1. TAsker shows an error message."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: Update a student\u0027s details**"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "2.  TAsker shows a list of students"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "3.  User requests to update a specific student\u0027s details in the list"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "4.  TAsker updates the student\u0027s details"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 2a. The given index is invalid."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 2a1. TAsker shows an error message."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 3a. The student\u0027s details are insufficient/cannot be parsed."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 3a1. TAsker shows an error message."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: See all assignment statuses**"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  TAsker shows a list of students, with their assignment statuses"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 2a. No assignments are added."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 2a1. TAsker will just show the student\u0027s information"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: Add an assignment**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to add a assignment to the list"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  TAsker adds the assignment to the list"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: Delete an assignment**"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  TAsker shows a list of students, with their assignment statuses"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to delete an assignment from the list"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  TAsker deletes the assignment from the list"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 2a. The given assignment is invalid."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 2a1. TAsker shows an error message."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Use case: Update a student\u0027s assignment submission status**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  User requests to list students"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "2.  TAsker shows a list of students, along with their assignment statuses"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "3.  User requests to update a specific student\u0027s assignment submission status"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "4.  TAsker updates the specific student\u0027s assignment submission status"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 2a. The given index is invalid."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 2a1. TAsker shows an error message."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 3a. The given assignment is invalid."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 3a1. TAsker shows an error message."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- 4a. The given assignment status is invalid."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - 4a1. TAsker shows an error message."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  Should be able to work offline, without any internet connection requirement."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    installed."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  Should be able to hold up to 1000 persons without a noticeable sluggishness"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    in performance for typical usage."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  Should not be too bright or even have a dark mode, at night timings."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1.  A user with above average typing speed for regular English text (i.e. not code,"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    not system admin commands) should be able to accomplish most of the tasks faster"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    using commands than using the mouse."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Mainstream OS**: Windows, Linux, Unix, macOS"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **TA**: Teaching Assistant"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **CS**: Computer Science"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **CRUD**: Create, Read, Update, Delete"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases â€¦â€‹ }_"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 85,
      "sun-yitao": 6,
      "kwannoel": 138,
      "-": 287,
      "rnmy": 39,
      "chrisgzf": 352
    }
  },
  {
    "path": "docs/Documentation.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Documentation guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "**Setting up and maintaining the project website:**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- We use [**Jekyll**](https://jekyllrb.com/) to manage documentation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- The `docs/` folder is used for documentation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- To learn how set it up and maintain the project website, follow the guide [_[se-edu/guides] **Using Jekyll for project documentation**_](https://se-education.org/guides/tutorials/jekyll.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "**Style guidance:**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Diagrams:**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "**Converting a document to the PDF format:**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "chrisgzf": 7
    }
  },
  {
    "path": "docs/Logging.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Logging guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- We are using `java.util.logging` package for logging."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Log messages are output through the console and to a `.log` file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- The output logging level can be controlled using the `logLevel` setting in the configuration file (See the [Configuration guide](Configuration.md) section)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **When choosing a level for a log message**, follow the conventions given in [_[se-edu/guides] Java: Logging conventions_](https://se-education.org/guides/conventions/java/logging.html)."
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "chrisgzf": 6
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [TAskerâ€™s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "   - [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "   - [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "   - [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "chrisgzf": 9
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1. _Unit tests_ targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1. _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "chrisgzf": 10
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "TAsker is a **desktop app for Teaching Assistants (TAs) to manage student administration, optimized for use via a Command Line Interface (CLI)**. It still has the benefits of a Graphical User Interface (GUI). If you can type fast, TAsker can get your administrative tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c!-- prettier-ignore --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "1. Download the latest `TAsker.jar` from [here](https://github.com/AY2021S1-CS2103T-F11-1/tp/releases)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your TAsker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "   - **`list`** : Lists all student."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "   - **`add`**`n/John Doe p/98765432 e/johnd@example.com t/johndoe m/A0123456B tg/friends` : Adds a student named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "   - **`delete`**`3` : Deletes the 3rd student shown in the current list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "   - **`clear`** : Deletes all students."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "   - **`exit`** : Exits the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "---"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  e.g `n/NAME [tg/TAG]` can be used as `n/John Doe tg/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Items with `â€¦`â€‹ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  e.g. `[tg/TAG]â€¦â€‹` can be used as ` ` (i.e. 0 times), `tg/friend`, `tg/friend tg/family` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- Any invalid parameter tags will be parsed as literals.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  e.g. If we pass the `n/a/James` in as a parameter,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  since `a/` is an invalid parameter tag,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  it will attempt to interpret `a/James` as a `NAME`,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  rather than treating `a/` as a parameter tag and `James` as its field."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- Extra inputs to commands will be ignored. \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  e.g."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - `list 1`, `1` will be ignored,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - `exit abc`, `abc` will be ignored."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "![result for \u0027help\u0027](images/HelpCommand.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "### Adding a student: `add`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Adds a student to the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL t/TELEGRAM m/MATRIC_NUMBER [tg/TAG]â€¦â€‹`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "A student can have any number of tags (including 0). The rest of the parameters can **only** be inputted once."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `add n/John Doe p/98765432 e/johnd@example.com t/johndoe m/A0123456B`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `add n/Betsy Crowe tg/friend e/betsycrowe@example.com t/betsy_crowe m/A0201234C p/1234567 tg/groupmate`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "![result for \u0027add n/John Doe p/98765432 e/johnd@example.com t/johndoe m/A0123456B\u0027](images/AddCommand.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "### Listing all students : `list`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Shows a list of all students that the TA is in-charge of."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "You may click on the Students tab to view the full list of students."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "![result for \u0027list\u0027](images/ListCommand.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "### Editing a student : `edit`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Edits an existing student\u0027s information."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [t/TELEGRAM] [m/MATRIC_NUMBER] [tg/TAG]â€¦â€‹`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Edits the student at the specified `INDEX`. The index refers to the index number shown in the displayed student list. The index **must be a positive integer** 1, 2, 3, â€¦â€‹"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- If the index is a positive integer, the format for each optional field will be checked in the above order before the index\u0027s validity is verified."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- If all inputs are valid, the existing values will be updated to the input values."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- You can remove all the studentâ€™s tags by typing `tg/` without"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "  specifying any tags after it."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st student to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- `edit 2 n/Betsy Crower tg/` Edits the name of the 2nd students to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  *Before editing*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ![Before running \u0027edit 2 n/Betsy Crower tg/\u0027](images/edit2before.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  *After editing*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ![result for \u0027edit 2 n/Betsy Crower tg/\u0027](images/edit2after.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "### Locating students by name: `find`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Finds students whose names contain any of the given keywords."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Only the name is searched."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Students matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- `find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "### Deleting a student : `delete`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Deletes the specified student from the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- The index **must be a positive integer** 1, 2, 3, â€¦â€‹"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- `list` followed by `delete 2` deletes the 2nd student in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- `find Betsy` followed by `delete 1` deletes the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rnmy"
        },
        "content": "### Clearing all students : `clear`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Clears all entries from the list of students."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "### Show Attendance: `showatt`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Shows the attendance for tutorial on a specified date."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Format: `showatt INDEX d/DATE`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `showatt 1 d/12/12/2020` checks if the first student"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  in the list attended class on 12th December, 2020."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  For example if \"John\" was our first student,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  we would get the following response if he was present:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rnmy"
        },
        "content": "  John was present on 2020-12-12"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  If he was absent we would get this instead:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rnmy"
        },
        "content": "  John was absent on 2020-12-12"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Marking Attendance : `attend`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Marks the student as present for tutorial on a specified date."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Format: `attend INDEX d/DATE`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "![Attend](images/AddAttendance.png)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "For: `attend 1 d/12/12/2000` "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `attend 1 d/12/12/2000` Marks the student at index 1 as present on 12 December 2000."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `attend 2 d/12/01/2002` Marks the student at index 2 as present on 12 January 2002."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Unmarking Attendance : `unattend`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Marks the student as absent (default) for tutorial on a specified date."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Format: `unattend INDEX d/DATE`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "![Unattend](images/RemoveAttendance.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "For: `unattend 1 d/12/12/2000` (This **particular** illustration requires `attend 1 d/12/12/2000` to be ran first)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `unattend 1 d/12/12/2000` Marks the student at index 1 as absent on 12 December 2000."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `unattend 2 d/12/01/2002` Marks the student at index 2 as absent on 12 January 2002."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Adding a consultation: `add-consult`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Adds a consultation to the address book."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Format: `add-consult n/NAME d/DATE tm/TIME a/LOCATION ty/TYPE`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "There are only **2 types** of consultations, Personal or Group. They can inputted in any case too!"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- `add-consult n/John Doe d/10/10/2020 tm/18:00 a/SOC Basement ty/personal`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- `add-consult n/Ann Lim d/30/05/2020 tm/11:00 a/Tembusu College ty/group `"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "![result for add consult command](images/addConsultResult.png)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "### Deleting a consultation: `del-consult`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Deletes a consultation from the address book."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Use this to indicate a consultation has been completed or remove incorrect consultation slots."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Format: `del-consult INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- `del-consult 1`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "![result for delete consult command](images/delConsultResult.png)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Listing all consultations: `list-consult`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Shows a list of all consultations that has been arranged with your students."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "You may click on the Consultations tab to view the full list of consultations."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Format: `list-consult`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "![result for list consult command](images/listConsultResult.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "### Archiving data files : `archive`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Creates a copy of all current data, tagged with the current date and time."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Running this command will create a new json file containing all your saved data, in your `/data` folder."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Format: `archive`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- `archive` creates a json file called `tasker_2020-11-09_2113.json` as shown below."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rnmy"
        },
        "content": "  ![result for \u0027archive\u0027](images/archiveResult.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "### Exporting attendance : `exportatt`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Exports attendance to a csv file in `data/attendance_YYYY-MM-DD_HHmm.csv`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Running this command will create a new csv file in your `/data` folder. Each column corresponds to a student and each row corresponds to a date. Every cell is marked with either `ATTENDED` or `ABSENT` depending on whether the student has attended that day."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "Format: `exportatt`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- `exportatt` creates a csv file called `attendance_2020-11-09_2055.csv` as shown below."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rnmy"
        },
        "content": "  ![result for \u0027exportatt\u0027](images/exportattResult.png)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "---"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "**Q**: How do I start using TAsker?"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**A**: Refer to our [Quick Start Guide](https://ay2021s1-cs2103t-f11-1.github.io/tp/UserGuide.html#quick-start) here."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rnmy"
        },
        "content": "**Q**: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**A**: Install the app in the other computer and overwrite the `data` folder that TAsker creates with the `data` folder from your previous TAsker installation. The `data` folder should be in the folder where TAsker is installed to."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "**Q**: Can I import existing spreadsheets of my students?"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "**A**: This is not supported at the moment."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "**Q**: How many students can I store?"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "**A**: More than you will ever teach in a lifetime."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rnmy"
        },
        "content": "**Q**: How do I save my data?"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rnmy"
        },
        "content": "**A**: TAsker data is automatically saved in the hard disk after the execution of any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "**Q**: How do I submit a bug report?"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "**A**: [Open an issue on our github repository](https://github.com/AY2021S1-CS2103T-F11-1/tp/issues)."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "---"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "| Action                   | Format, Examples                                                                                                                                                                                                           |"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "| ------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Add Student**          | `add n/NAME p/PHONE_NUMBER e/EMAIL t/TELEGRAM m/MATRIC_NUMBER [tg/TAG]â€¦â€‹`\u003cbr\u003e e.g., `add n/James Ho p/98765432 e/jamesho@example.com t/james-ho m/A0202345B tg/F11`                                                         |"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Edit Student**         | `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [t/TELEGRAM] [m/MATRIC_NUMBER] [tg/TAG]â€¦â€‹`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`                                                                                    |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Find Student**         | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`                                                                                                                                                                 |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **List Students**        | `list`                                                                                                                                                                                                                     |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Delete Student**       | `delete INDEX`\u003cbr\u003e e.g., `delete 3`                                                                                                                                                                                        |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Clear All Students**   | `clear`                                                                                                                                                                                                                    |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Show Attendance**      | `showatt INDEX d/DATE`\u003cbr\u003e e.g., `showatt 1 d/12/12/2020`                                                                                                                                                                  |"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Marking Attendance**   | `attend INDEX d/DATE`\u003cbr\u003e e.g., `attend 1 d/12/12/2000`                                                                                                                                                                    |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Unmarking Attendance** | `unattend INDEX d/DATE`\u003cbr\u003e e.g., `unattend 1 d/12/12/2000`                                                                                                                                                                |"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Add Consultation**     | `add-consult n/NAME d/DATE tm/TIME a/LOCATION ty/TYPE`\u003cbr\u003e e.g., `add-consult n/John Doe d/10/10/2020 tm/18:00 a/SOC Basement ty/personal`                                                                                 |"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Delete Consultation**  | `del-consult INDEX`\u003cbr\u003e e.g., `del-consult 1`                                                                                                                                                                              |"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "| **List Consultation**    | `list-consult`                                                                                                                                                                                                             |"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Archive Data Files**   | `archive`                                                                                                                                                                                                                  |"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rnmy"
        },
        "content": "| **Export Attendance**    | `exportatt`                                                                                                                                                                                                                |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "| **Help**                 | `help`                                                                                                                                                                                                                     |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "| **Exit**                 | `exit`                                                                                                                                                                                                                     |"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 35,
      "sun-yitao": 92,
      "kwannoel": 65,
      "-": 110,
      "rnmy": 39,
      "chrisgzf": 16
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(tasker)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "chrisgzf": 1
    }
  },
  {
    "path": "docs/diagrams/ArchiveSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"command: ArchiveCommand\" as ArchiveCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"addressBookStorage: AddressBookStorage\" as AddressBookStorage STORAGE_COLOR_T2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[-\u003e LogicManager : execute(\"archive \")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"archive\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create ArchiveCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser -\u003e ArchiveCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate ArchiveCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ArchiveCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate ArchiveCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e ArchiveCommand : execute(model)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate ArchiveCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ArchiveCommand -\u003e AddressBookStorage : new JsonAddressBookStorage(filePath)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate AddressBookStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookStorage --\u003e ArchiveCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate AddressBookStorage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ArchiveCommand -\u003e Model : getAddressBook()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Model --\u003e ArchiveCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ArchiveCommand -\u003e AddressBookStorage : saveAddressBook(addressBookToArchive, filePath)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate AddressBookStorage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookStorage --\u003e ArchiveCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate AddressBookStorage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ArchiveCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "CommandResult --\u003e ArchiveCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ArchiveCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate ArchiveCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookStorage -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "destroy AddressBookStorage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ArchiveCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "destroy ArchiveCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 70
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Tasker *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Tasker *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "chrisgzf": 2
    }
  },
  {
    "path": "docs/diagrams/CommandHistoryActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "start"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ":User presses UP or DOWN arrow key in command box;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "if () then ([UP arrow key])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    if () then ([previous command exists])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        :Set pointer to point"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        at previous command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        :Set command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        box text to the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        previous command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "else ([DOWN arrow key])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    if () then ([next command exists])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        :Set pointer to point"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        at next command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        :Set command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        box text to the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        previous command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "stop"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 30
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "if () then ([command commits Tasker])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    :Save Tasker to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "chrisgzf": 2
    }
  },
  {
    "path": "docs/diagrams/FindStudentSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"command:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[-\u003e LogicManager : execute(\"find Roy\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"find Roy\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser \u003c-- FindCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser -\u003e FindCommandParser : parse(\" Roy\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommandParser -\u003e FindCommand : new NameContainsKeywordsPredicate(Arrays.asList([\"Roy\"]))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommandParser \u003c-- FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u0027for the parse method"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommandParser -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e FindCommand : execute(model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommand -\u003e Model : updateFilteredPersonList(predicate)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommand \u003c-- Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "FindCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "destroy FindCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 70
    }
  },
  {
    "path": "docs/diagrams/ListStudentSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"command: ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"l:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[-\u003e LogicManager : execute(\"list \")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"list\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser -\u003e ListCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ListCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e ListCommand : execute(model)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ListCommand -\u003e Model : updateFilteredPersonList(predicate)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ListCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "CommandResult --\u003e ListCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ListCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "ListCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "destroy ListCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 56
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Class Tasker"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Tasker .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "ModelManager o--\u003e \"1\" Tasker"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Tasker *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "chrisgzf": 4
    }
  },
  {
    "path": "docs/diagrams/ShowAttendanceSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "participant \"command: ShowAttendanceCommand\" as ShowAttendanceCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "participant \"l:ShowAttendanceCommand\" as ShowAttendanceCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "[-\u003e LogicManager : execute(\"showatt \")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"showatt\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "create ShowAttendanceCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "AddressBookParser -\u003e ShowAttendanceCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "activate ShowAttendanceCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "ShowAttendanceCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "deactivate ShowAttendanceCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "LogicManager -\u003e ShowAttendanceCommand : execute(model)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "activate ShowAttendanceCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "ShowAttendanceCommand -\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Model -\u003e Model : getFilteredPersonList(predicate)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Model --\u003e ShowAttendanceCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "ShowAttendanceCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "CommandResult --\u003e ShowAttendanceCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "ShowAttendanceCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "deactivate ShowAttendanceCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "ShowAttendanceCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "destroy ShowAttendanceCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 57
    }
  },
  {
    "path": "docs/diagrams/UnattendStudentSequenceDiagran.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":UnattendCommandParser\" as UnattendCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":UnattendCommand\" as UnattendCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[-\u003e LogicManager : execute(\"unattend 3 d/10/10/2020\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"unattend\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create UnattendCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser -\u003e UnattendCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate UnattendCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser \u003c-- UnattendCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate UnattendCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser --\u003e UnattendCommandParser : parse(\" 3 d/10/10/2020\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate UnattendCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create UnattendCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommandParser -\u003e UnattendCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate UnattendCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommandParser \u003c-- UnattendCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate UnattendCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "AddressBookParser \u003c-- UnattendCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate UnattendCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager \u003c-- AddressBookParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommandParser -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "destroy UnattendCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager -\u003e UnattendCommand : execute(model)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate UnattendCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand -\u003e Model : getFilteredPersonList()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand \u003c-- Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand -\u003e UnattendCommand : updateAttendanceForPerson(personToAttend, attendance)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate UnattendCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand \u003c-- UnattendCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate UnattendCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand -\u003e Model : setPerson(personToAttend, unattendedPerson)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand \u003c-- Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand -\u003e Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand \u003c-- Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand \u003c-- CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "LogicManager \u003c-- UnattendCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate UnattendCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "UnattendCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "destroy UnattendCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 85
    }
  },
  {
    "path": "docs/diagrams/UpdateStudentSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rnmy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rnmy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rnmy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "participant \":EditPersonDescriptor\" as EditPersonDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "participant \"command:EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rnmy"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rnmy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rnmy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rnmy"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rnmy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rnmy"
        },
        "content": "[-\u003e LogicManager : execute(commandText)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rnmy"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(userInput)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rnmy"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rnmy"
        },
        "content": "AddressBookParser -\u003e EditCommandParser : new EditCommandParser()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parse(arguments)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "create EditPersonDescriptor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommandParser -\u003e EditPersonDescriptor : new EditPersonDescriptor()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate EditPersonDescriptor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditPersonDescriptor --\u003e EditCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate EditPersonDescriptor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rnmy"
        },
        "content": "create EditCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommandParser -\u003e EditCommand : new EditCommand(index, editPersonDescriptor)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand --\u003e EditCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommandParser --\u003e EditCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rnmy"
        },
        "content": "AddressBookParser --\u003e LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rnmy"
        },
        "content": "LogicManager -\u003e EditCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand -\u003e EditCommand : execute(model)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand -\u003e Model : getFilteredPersonList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Model --\u003e EditCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand -\u003e Model : setPerson(personToEdit, editedPerson)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Model --\u003e EditCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand -\u003e Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Model --\u003e EditCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rnmy"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rnmy"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rnmy"
        },
        "content": "CommandResult --\u003e EditCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand --\u003e EditCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rnmy"
        },
        "content": "EditCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rnmy"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rnmy"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rnmy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "rnmy": 89
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "title: TAsker"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F11-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F11-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F11-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "**TAsker is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- If you are interested in using TAsker, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- If you are interested about developing TAsker, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "chrisgzf": 7
    }
  },
  {
    "path": "docs/team/chrisgzf.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "title: Christopher Goh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "## Project: TAsker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "TAsker is a desktop app for Teaching Assistants (TAs) to manage student administration, optimized for use via a Command Line Interface (CLI). The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **New Feature**: Implement the Attendance model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - What it does: allows the user to save student\u0027s class attendance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Justification: This feature is one of the core features of TAsker, attendance tracking. TAs would like to easily be able to keep track of which ones of their classes their students have missed or attended, so that they can easily keep track of their student\u0027s progress, as well as assign participation marks (if linked to attendance)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Highlights: This enhancement required an in-depth analysis of design alternatives to best store attendance data. After comparing between a few alternatives, we decided that attendance data should be tagged primarily to the students, and hence it guided us in the way we shape our data, in our persisted user data storage. The implementation too was challenging, as it required careful design and treatment to ensure that the Person model\u0027s stored Attendance data is the single source of truth, to prevent future potential bugs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Credits: The Jackson library was used to serialize the attendance data into our persisted JSON data storage file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **New Feature**: Implement the Command History"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - What it does: Keeps track of the commands that the user has run previously, so that they can easily browse through and re-run past commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Justification: TAsker is an app meant primarily for use for fast-typists, and performing repeated commands like marking attendance for most of your students in your class can be very tedious. This feature makes it easy for the user to re-run previously run commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Highlights: The `CommandHistory` class was implemented with a Singleton design pattern as it made sense to me that the application should only have 1 command history, and hence it should only be instantiated at most once, and also, it was my first time implementing the Singleton pattern, so I wanted to give it a try. However, after implementing it, I can attest to all the Singleton haters out there that this design pattern is indeed horrible and is more of a anti-pattern. This is due to how difficult it is to write good, isolated tests for a Singleton class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **New Feature**: Design and implement the new TAsker UI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - What it does: New UI following fresh design trends and fresh colour palettes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Justification: As computing TAs are usually very busy, tired, and packed with work, we wanted to come up with a UI that is inviting, happy, and keeps the TA awake. Fresh design trends such as rounded rectangles and pastel colour palettes are used to create a sense of happiness and ease in the user. The theme is also primarily a light-theme (instead of a dark-theme), so that the TA will feel less tired while working on administrative tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **New Feature**: Refactor UI CSS to use CSS variables"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - What it does: Better CSS code quality for the application"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Justification: CSS variables allow us to set consistent colour palettes, and tune them at will in the future. This also provides great extensibility for future themes, as \"themes\" can really just be setting a few CSS variables. Use of CSS also allows us to use CSS pseudo-classes, to allow us to have a more interactive UI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **New Feature**: Refactor UI CSS to use system fonts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - What it does: Use OS\u0027s preferred sans-serif fonts for the UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Justification: Provides greater sense of familiarity and consistency with the app when their familiar system fonts (e.g. San Francisco for macOS) is used"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dtotalCommits\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dchrisgzf\u0026tabRepo\u003dAY2021S1-CS2103T-F11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Project management**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Managed release `v1.3(trial)` on GitHub"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Enhancements to existing features**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Updated the GUI color scheme (Pull requests [\\#59](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/59))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Wrote additional tests for existing features to increase coverage from 69% to 74% (Pull requests [\\#188](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/188), [\\#182](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/182), [\\#185](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/185))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Documentation**:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - User Guide:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Updated app screenshots [\\#211](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/211)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Edited UG extensively to improve readability [\\#204](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/204)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Fixed Table of Contents generation [\\#85](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/85)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Developer Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Added implementation details of the UI and CSS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Added implementation details of the `CommandHistory` feature"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Fixed Table of Contents generation [\\#85](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/85)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    - Added non-functional requirements [\\#35](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/35)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Community**:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - PRs reviewed (with non-trivial review comments): [\\#172](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/172), [\\#161](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/161)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Contributed to forum discussions (examples: [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/52#issuecomment-678835959), [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/172#issuecomment-690681241)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Contributed to se-edu\u0027s SE Textbook: [\\#91](https://github.com/se-edu/se-book/pull/91)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Provided suggestions to enhance my classmates\u0027 workflow with their IDE: [\\#58](https://github.com/nus-cs2103-AY2021S1/forum/issues/58)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- **Tools**:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Improved code review workflow by enforcing local CI checks before `git push` with gradle Git Hooks: see [\\#88](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/88)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Integrated a code static analysis tool, Codacy, to provide us with more feedback on our code [\\#192](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/192)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Added a markdown code formatter, prettier, to improve our editing workflow [\\#40](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/40)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  - Enabled assertions [#\\67](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/67)"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 75
    }
  },
  {
    "path": "docs/team/kwannoel.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "title: Noel Kwan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "## Project: TAsker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "TAsker is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Implement the student model**: Update Person model to student"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - What it does: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Includes student specific fields such as their matriculation number, telegram."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Justification: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Existing models were missing critical fields which TAs needed for administration."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Including these fields in the model would mean we can extend existing commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    to add these in as parameters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Highlights:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Implementing regex was difficult as both matriculation number and telegram handle"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    had different constraints."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Refactoring tests was painful but made easier thanks to the `Builder` pattern we used for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    `Person` tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Show attendance command**: Added a command that allows the user view attendance of a student at a specific date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - What it does:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Allows users to view attendance of a student at a specified date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Justification:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Teaching assistants may need to know whether a student is present or absent"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    on during tutorial dates."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    This feature allows them to perform that check."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Delete consultation command**: Added a command that allows the user to delete a consultation slot."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - What it does:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    Allows users to delete consultations."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Justification:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    In the event users have keyed in an incorrect consultation slot"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    or want to remove a consultation slot, this feature allows them to do so."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-11-09\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkwannoel\u0026tabRepo\u003dAY2021S1-CS2103T-F11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Project management**:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Organize weekly project meetings"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Distribute weekly tasks for first sprint (v1.1 - v1.2)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Check on team members to see if they need help for tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Enhancements to existing features**:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Bugfixes:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - [\\#196]()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "      Prevent group consultations with differing locations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - [\\#186]()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "      Fix duplicate arguments to commands"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - [\\#160]()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "      Fix attendance date parsing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - [\\#157]()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "      Prevent duplicate matric and telegram handle"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - [\\#156]()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "      Declare behaviour of invalid parameter tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - [\\#154]()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "      Fix show attendance error message"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Documentation**:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - User Guide:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - Remove address field from examples [\\#101]()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - Fix linking for the help guide to our user guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - Developer Guide:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - Added implementation details of the `show attendance` feature."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    - Added implementation details of the updated `Person` model."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "- **Community**:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "  - PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kwannoel": 94
    }
  },
  {
    "path": "docs/team/rishi5154.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "title: Rishi Ravikumar\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "## Project: TAsker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "TAsker is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "Written below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dtotalCommits\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dRishi5154\u0026tabRepo\u003dAY2021S1-CS2103T-F11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- **Enhancements implemented**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " - **Implement the student model**: Update existing Person model to match actual needs of student"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    - What it does: "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      Includes student specific fields such as their matriculation number, telegram."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    - Justification: "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      The given Person model simply lacked the precise fields necessary for basic student administration."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    - Highlights:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      Update edit operation in order to edit the student objects, with all new fields added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  - **Unattend command**: Appended a command that enables for the unmarking of student\u0027s attendance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  - **Archive command**: A command that copies the current data of TAsker at `/data` directory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  - **Consultation management**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     - Set-up the whole backend functionality from scratch to display on UI, with **conceptualisation** \u0026 **implementation** of Consultation model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     - **Add Consult command**: A command that enables for the addition of a consultation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        - Regulation of consultation addition with checks like whether personal consults can be added with conflicting consultations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     - **List Consult command**: A command that allows user to list all consultations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  - **Unit tests**: Inserted JUnit tests for all active commands I added \u0026 updated existing tests accordingly. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- **Contributions to documentation**: Updated UG for `unattend`, `archive`, `add-consult` \u0026 `list-consult` operations with examples."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- **Contributions to DG**: Updated DG for `list`, `find`, `unattend`, `archive` operations, with UML sequence diagrams for each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- **Project management**:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    - Attend and participate proactively in weekly project meetings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    - Actively test out new features added by teammates and relaying the status of features actively"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "- **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    - **Review/mentoring contributions**: "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        - Reviewed and raised non-trivial thoughts for PRs at [#196](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/196), [#183](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/183), [#174](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/174),  [#172](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/172), [\\#156](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/156), [\\#94](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/94) \u0026 many more"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    - **Contributions beyond project**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        -  Found crucial bugs [bug1](https://github.com/AY2021S1-CS2103T-W16-3/tp/issues/240) \u0026 enhancement [bug2](https://github.com/AY2021S1-CS2103T-W16-3/tp/issues/241)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        in a well-constructed and effort-ladden [TP](https://github.com/AY2021S1-CS2103T-W16-3/tp)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        - Helped to test the working status of another group\u0027s project jar file [TP](https://github.com/AY2021S1-CS2103T-T17-3/tp)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        "
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 57
    }
  },
  {
    "path": "docs/team/rnmy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rnmy"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rnmy"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rnmy"
        },
        "content": "title: Rachel Ng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rnmy"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "## Project: TAsker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "TAsker is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rnmy"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003drnmy)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- **Enhancements implemented**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - **Edit command**: Adapted the edit command to the new Person model which includes student specific fields such as their matriculation number and telegram handles which are pivotal to student administration."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rnmy"
        },
        "content": "          "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - **Attendance UI**: Added a new Attendance tabular pane to show the current attendance status of students."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - **Improve error handling**: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        - Added checks for all required fields before input validation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        - Standardized the error message for inputs with valid command format but invalid index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - **Date validation**: Refined validation for attendance dates to detect dates such as 30/02/2020. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - **Unit tests**: Updated and wrote additional JUnit tests for existing features."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - User Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        - Added documentation for the features `edit` [\\#161](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/161)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        - Update screenshots for the features `archive` and `exportatt` [\\#207](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/207)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        - Update UG to include latest feature updates [\\#197](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/197)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - Developer Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        - Added implementation details of the `edit` feature with UML diagrams. [\\#78](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/78)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- **Community**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-W17-4/tp/issues/205), [2](https://github.com/AY2021S1-CS2103T-W17-4/tp/issues/206), [3](https://github.com/AY2021S1-CS2103T-W17-4/tp/issues/207))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rnmy"
        },
        "content": "  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rnmy"
        },
        "content": "- **Project management**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    - Attend and participate proactively in weekly project meetings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rnmy": 53
    }
  },
  {
    "path": "docs/team/sun-yitao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "title: Sun Yitao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "## Project: TAsker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " TAsker is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " Written below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsun-yitao\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- **Enhancements implemented**:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - **Attend command**: Add attend command that enables for the marking of student\u0027s attendance. Student\u0027s attendance make use of a sorted treeset so prevent duplicate attendances from being added and also to present the attendances in chronological order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - **Export attendance command**: A command that exports students\u0027 attendance to a csv in `/data`, using Apache Commons CSV library. It has been optimised to run in a better runtime by using HashSet instead of TreeSet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - **Update help window** Update the link in help window to point to the correct UG"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - **Improve add command error handling** Improve error message to user to detect the error in the command and show why the error occurred and how to fix it: missing prefix, duplicate prefix or extra preamble."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - **Unit tests**: Inserted JUnit tests for all active commands, updated existing tests accordingly and added new tests to increase test coverage of existing code."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- **Contributions to documentation**: Created the initial version of the UG"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- **Contributions to DG**: Updated DG for `exportatt` command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- **Project management**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - Attend and participate proactively in weekly project meetings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "- **Contributions to team-based tasks**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - **Review/mentoring contributions**: [\\#47](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/47), [\\#52](https://github.com/AY2021S1-CS2103T-F11-1/tp/pull/52)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "  - **Found crucial bugs**: [bug1](https://github.com/AY2021S1-CS2103T-F11-1/tp/issues/49) \u0026 [bug2](https://github.com/AY2021S1-CS2103T-F11-1/tp/issues/48)"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 35
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new commandâ€‰â€”â€‰`remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "This command allows users of the TAsker application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Weâ€™ll assume that you have already set up the development environment as outlined in the Developerâ€™s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "For now, letâ€™s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Letâ€™s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, letâ€™s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Now letâ€™s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Letâ€™s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now letâ€™s find out what we need to do in order to obtain the Index and String that we need. Letâ€™s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the userâ€™s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Donâ€™t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, letâ€™s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the personâ€™s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, letâ€™s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, donâ€™t worryâ€‰â€”â€‰we will get back to it later."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Thatâ€™s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "TAsker stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external libraryâ€‰â€”â€‰Jackson. Letâ€™s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ":exclamation: You must delete TAskerâ€™s storage file located at `/data/tasker.json` before running it! Not doing so will cause TAsker to default to an empty address book!"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regressionâ€‰â€”â€‰we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs donâ€™t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, letâ€™s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "This concludes the tutorial for adding a new `Command` to TAsker."
      }
    ],
    "authorContributionMap": {
      "-": 387,
      "chrisgzf": 4
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e â€” Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "When working on TAsker, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, weâ€™ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages. Letâ€™s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Letâ€™s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. Whatâ€™s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "chrisgzf": 7
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. â€¦â€‹\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e â€” Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEAâ€™s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "- Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "1. Read the [_Architecture_ section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_ used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what weâ€™re looking for. However, it is just an `Interface`. Letâ€™s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "![`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what weâ€™re looking for\\!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now letâ€™s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so letâ€™s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "   ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Letâ€™s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   ```java"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Letâ€™s take a closer look at each one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "   ```java"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "   ```java"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "   ..."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "   case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "       return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "   ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Letâ€™s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "1. Letâ€™s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "   The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now letâ€™s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   ```java"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "   `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Letâ€™s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "   ```java"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "   **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "   ```java"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "   public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "       requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "       resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "   `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "more about the inner workings of TAsker and how the various"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/ã‚¢ãƒªã‚¹ ãƒ¦ãƒ¼`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 243,
      "chrisgzf": 9
    }
  },
  {
    "path": "package.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"name\": \"tp\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"version\": \"1.0.0\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"main\": \"index.js\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"repository\": \"https://github.com/AY2021S1-CS2103T-F11-1/tp.git\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"author\": \"Christopher Goh \u003cchrisgzf@gmail.com\u003e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"license\": \"MIT\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"dependencies\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    \"prettier\": \"^2.1.2\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"scripts\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    \"fmt\": \"prettier --write .\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @return App parameters wrapper after parsing given parameters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TAsker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TAsker\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TAsker\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            initialData \u003d new Tasker();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TAsker\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            initialData \u003d new Tasker();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TAsker\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            initialData \u003d new Tasker();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TAsker\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        logger.info(\"Starting TAsker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 3,
      "-": 174,
      "chrisgzf": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String LOG_FILE \u003d \"tasker.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\\nYou may view results in the \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"Students tab.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String MESSAGE_PREFIX_MISSING \u003d \"Prefix missing: %1$s \\n%2$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String MESSAGE_PREAMBLE_NOT_EMPTY \u003d \"Preamble should be empty!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIXES \u003d \"Duplicate prefix detected: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 3,
      "-": 12,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * Returns true if {@code s} represents an integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * e.g. {@code Integer.MIN_VALUE}, ..., -3, -2, -1, 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * e.g. empty string, \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "rnmy": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Returns the Tasker."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of consultations */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    ObservableList\u003cConsultation\u003e getFilteredConsultationList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 4,
      "-": 49,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ObservableList\u003cConsultation\u003e getFilteredConsultationList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return model.getFilteredConsultList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to TAsker.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            + PREFIX_MATRIC_NUMBER + \"MATRIC_NUMBER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + PREFIX_TELEGRAM + \"TELEGRAM_HANDLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@u.nus.edu \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            + PREFIX_MATRIC_NUMBER + \"A0199266E \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            + PREFIX_TELEGRAM + \"johndoetele \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            + PREFIX_TAG + \"T10\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\\nYou may view results in the Students tab.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in TAsker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 1,
      "-": 58,
      "chrisgzf": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddConsultCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.consultation.exceptions.ConflictingGroupConsultationException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represents the command that is used to list all consultations, in classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class AddConsultCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-consult\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a consultation to TAsker.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_ADDRESS + \"LOCATION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_TYPE + \"TYPE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_DATE + \"10/10/2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_TIME + \"18:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_ADDRESS + \"SOC Basement \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_TYPE + \"personal \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New consultation added: %1$s\\nYou may view results in the \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"Consultations tab.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULTATION \u003d \"This consultation slot has already been taken up!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String MESSAGE_WRONG_LOCATION_GROUP_CONSULTATION \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            \"Group consultations sharing the same time slot should be at the same location!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Consultation toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates an AddConsultCommand to add the specified {@code Consultation}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param consultation Consultation(s) being called."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public AddConsultCommand(Consultation consultation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(consultation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        toAdd \u003d consultation;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (model.hasConsult(toAdd) || model.hasConflictingPersonalConsultation(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CONSULTATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            model.addConsultation(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        } catch (ConflictingGroupConsultationException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_LOCATION_GROUP_CONSULTATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                || (other instanceof AddConsultCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddConsultCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 66,
      "kwannoel": 8,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.LogicManager.FILE_OPS_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Archives all current data of the students in a separate file at /data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Archived all data!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // get current date \u0026 time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        LocalDate currentDate \u003d time.toLocalDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String currentTime \u003d time.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // archive file path"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Path filePath \u003d Paths.get(String.format(\"data/tasker_%s_%s.json\", currentDate, currentTime));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // initialise new TAsker storage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ReadOnlyAddressBook addressBookToArchive \u003d model.getAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert (addressBookToArchive !\u003d null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            addressBookStorage.saveAddressBook(addressBookToArchive, filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " * Adds attendance for a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "public class AttendCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            + \": Adds attendance for the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"Attendance date should be valid and in dd/MM/yyyy format.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DATE + \"27/03/1998\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String MESSAGE_ALREADY_ATTENDED \u003d \"%1$s already attended on %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_ATTEND_SUCCESS \u003d \"Added attendance for student: %1$s\\nYou may view results in \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"the Attendance tab.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * Creates an {@code Attend} with corresponding target index and {@code Attendance}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * @param targetIndex of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * @param attendance {@code Attendance}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public AttendCommand(Index targetIndex, Attendance attendance) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AttendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person personToAttend \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person attendedPerson \u003d updateAttendanceForPerson(personToAttend, attendance);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        model.setPerson(personToAttend, attendedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ATTEND_SUCCESS, personToAttend));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static Person updateAttendanceForPerson(Person personToAttend, Attendance attendance)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assert personToAttend !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        SortedSet\u003cAttendance\u003e updatedAttendances \u003d new TreeSet\u003c\u003e(personToAttend.getAttendances());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        if (updatedAttendances.contains(attendance)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_ATTENDED, personToAttend.getName(), attendance));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        updatedAttendances.add(attendance);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return new Person(personToAttend.getName(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                personToAttend.getPhone(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                personToAttend.getEmail(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                personToAttend.getTelegram(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                personToAttend.getMatricNumber(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                personToAttend.getTags(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                updatedAttendances);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                || (other instanceof AttendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((AttendCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static class AlreadyAttendedException extends Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 92,
      "rnmy": 1,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TAsker has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        model.setAddressBook(new Tasker());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "chrisgzf": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 4,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Student: %1$s\\nYou may view results in the \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"Students tab.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteConsultCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Deletes a consultation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class DeleteConsultCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"del-consult\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a consultation from TAsker.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Consultation deleted: %1$s\\nYou may view results in the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"Consultations tab.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Creates an DeleteConsultCommand to delete the specified {@code Consultation} by supplying its {@code Index}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @param targetIndex Index of consultation being deleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public DeleteConsultCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        List\u003cConsultation\u003e lastShownConsultations \u003d model.getFilteredConsultList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownConsultations.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Consultation consultationToDelete \u003d lastShownConsultations.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        model.deleteConsultation(consultationToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, consultationToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || (other instanceof DeleteConsultCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteConsultCommand) other).targetIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 55,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"[\" + PREFIX_TELEGRAM + \"TELEGRAM] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"[\" + PREFIX_MATRIC_NUMBER + \"MATRIC NUMBER] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\\nYou may view results in the \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"Students tab.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in TAsker.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Telegram updatedTelegram \u003d editPersonDescriptor.getTelegram().orElse(personToEdit.getTelegram());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        MatricNumber updatedMatricnumber \u003d editPersonDescriptor.getMatricNumber()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .orElse(personToEdit.getMatricNumber());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        SortedSet\u003cAttendance\u003e updatedAttendances \u003d editPersonDescriptor.getAttendances()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                .orElse(personToEdit.getAttendances());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return new Person(updatedName,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                updatedPhone,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                updatedEmail,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                updatedTelegram,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                updatedMatricnumber,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                updatedTags,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                updatedAttendances);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        private Telegram telegram;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        private SortedSet\u003cAttendance\u003e attendances;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            setTelegram(toCopy.telegram);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            setMatricNumber(toCopy.matricNumber);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            setAttendances(toCopy.attendances);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, telegram, matricNumber, tags, attendances);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public void setTelegram(Telegram telegram) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        public Optional\u003cTelegram\u003e getTelegram() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            return Optional.ofNullable(telegram);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public void setMatricNumber(MatricNumber matricNumber) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        public Optional\u003cMatricNumber\u003e getMatricNumber() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            return Optional.ofNullable(matricNumber);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "         * Sets {@code attendances} to this object\u0027s {@code attendances}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "         * A defensive copy of {@code attendances} is used internally."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        public void setAttendances(SortedSet\u003cAttendance\u003e attendances) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            this.attendances \u003d (attendances !\u003d null) ? new TreeSet\u003c\u003e(attendances) : null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "         * Returns an unmodifiable attendances sorted set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code attendances} is null."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        public Optional\u003cSortedSet\u003cAttendance\u003e\u003e getAttendances() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            return (attendances !\u003d null)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSortedSet(attendances))"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    \u0026\u0026 getTelegram().equals(e.getTelegram())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    \u0026\u0026 getMatricNumber().equals(e.getMatricNumber())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 17,
      "-": 210,
      "rnmy": 9,
      "chrisgzf": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.LogicManager.FILE_OPS_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import org.apache.commons.csv.CSVFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import org.apache.commons.csv.CSVPrinter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " * Archives all current data of the students in a separate file at /data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "public class ExportAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportatt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance exported to %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // get current date \u0026 time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        LocalDate currentDate \u003d time.toLocalDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        String currentTime \u003d time.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // csv file path"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        String filePath \u003d String.format(\"data/attendance_%s_%s.csv\", currentDate, currentTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            writeAttendancesToCsv(personList, filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, filePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private void writeAttendancesToCsv(ObservableList\u003cPerson\u003e personList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        SortedSet\u003cAttendance\u003e allAttendances \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        int numColumns \u003d personList.size() + 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        String[] csvHeaders \u003d new String[numColumns];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        csvHeaders[0] \u003d \"Date\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // Create HashSet for each Person\u0027s attendance for faster runtime compared to TreeSet"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        List\u003cHashSet\u003cAttendance\u003e\u003e attendanceHashSets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        for (int i \u003d 0; i \u003c personList.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            Person person \u003d personList.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            SortedSet\u003cAttendance\u003e attendanceTreeSet \u003d person.getAttendances();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            allAttendances.addAll(attendanceTreeSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            HashSet\u003cAttendance\u003e attendanceHashSet \u003d new HashSet\u003c\u003e(attendanceTreeSet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            attendanceHashSets.add(attendanceHashSet);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            csvHeaders[i + 1] \u003d person.getName().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // make sure parent dir exists (else created)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        FileWriter out \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        CSVPrinter csvPrinter \u003d new CSVPrinter(out, CSVFormat.DEFAULT.withHeader(csvHeaders));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        for (Attendance attendance : allAttendances) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            String[] row \u003d new String[numColumns];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            row[0] \u003d attendance.toString(); // Date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            for (int i \u003d 0; i \u003c personList.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                HashSet\u003cAttendance\u003e attendanceHashSet \u003d attendanceHashSets.get(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                if (attendanceHashSet.contains(attendance)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                    row[i + 1] \u003d \"ATTENDED\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                    row[i + 1] \u003d \"ABSENT\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            // cast to suppress unclear if varargs or non-varargs call warning"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            csvPrinter.printRecord((Object[]) row);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        csvPrinter.flush();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows TAsker usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students!\\nYou may view results in the Students tab.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListConsultCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONSULTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ListConsultCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-consult\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all consultations!\\nYou may view results in the \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"Consultations tab.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.updateFilteredConsultList(PREDICATE_SHOW_ALL_CONSULTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 19,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Shows attendance for a person identified using its index and specified attendance date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class ShowAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showatt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \": Shows attendance for the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Attendance date should be in dd/MM/yyyy format.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DATE + \"27/03/1998\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s was %s on %s\\nYou may view results in the Attendance tab.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Shows attendance of a Person with corresponding target index and {@code Attendance}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @param targetIndex of the person in the filtered person list to show."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @param attendance {@code Attendance}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public ShowAttendanceCommand(Index targetIndex, Attendance attendance) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Person person \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        SortedSet\u003cAttendance\u003e attendances \u003d person.getAttendances();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        boolean hasAttended \u003d attendances.stream().anyMatch(attendance1 -\u003e attendance1.equals(attendance));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        String attendanceStatus \u003d \"absent\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (hasAttended) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            attendanceStatus \u003d \"present\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                        MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                        person.getName(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                        attendanceStatus,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                        attendance.date.toString()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                )"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || (other instanceof ShowAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ShowAttendanceCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 81,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnattendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Unattends(Unmarks) a person\u0027s attendance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class UnattendCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unattend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + \": Removes attendance for the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"Attendance date should be valid and in dd/MM/yyyy format.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + PREFIX_DATE + \"DATE\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DATE + \"27/03/1998\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_ALREADY_UNATTENDED \u003d \"%1$s already unattended on %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String MESSAGE_UNATTEND_SUCCESS \u003d \"Removed attendance for person: %1$s\\nYou may view results \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        + \"in the Attendance tab.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates an {@code Unattend} with corresponding target index and {@code Attendance}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param targetIndex of the person in the filtered person list to edit attendance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param attendance {@code Attendance}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public UnattendCommand(Index targetIndex, Attendance attendance) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        List\u003cPerson\u003e persons \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d persons.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnattendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person personToAttend \u003d persons.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person unattendedPerson \u003d updateAttendanceForPerson(personToAttend, attendance);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.setPerson(personToAttend, unattendedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNATTEND_SUCCESS, personToAttend));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Helps to unmark the Person\u0027s attendance and returns a new Person object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param personToAttend Person whose attendance is unmarked."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param attendance Attendance object which carries the appropriate date to unattend."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Person object with the date unattended."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws CommandException If the attendance date has been already unattended."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static Person updateAttendanceForPerson(Person personToAttend, Attendance attendance)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert personToAttend !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        SortedSet\u003cAttendance\u003e updatedAttendances \u003d new TreeSet\u003c\u003e(personToAttend.getAttendances());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!updatedAttendances.contains(attendance)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_UNATTENDED, personToAttend.getName(), attendance));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        updatedAttendances.remove(attendance);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new Person(personToAttend.getName(), personToAttend.getPhone(), personToAttend.getEmail(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                personToAttend.getTelegram(), personToAttend.getMatricNumber(), personToAttend.getTags(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                updatedAttendances);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                || (other instanceof UnattendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnattendCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 95,
      "rnmy": 1,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIXES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PREAMBLE_NOT_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PREFIX_MISSING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TELEGRAM,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        PREFIX_MATRIC_NUMBER, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // all argument checks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        boolean areAllPrefixesPresent \u003d arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                PREFIX_EMAIL, PREFIX_TELEGRAM, PREFIX_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        boolean isPreambleEmpty \u003d argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        boolean areDuplicatePrefixesPresent \u003d checkDuplicatePrefixes(argMultimap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        if (!areAllPrefixesPresent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            Optional\u003cPrefix\u003e missingPrefix \u003d getMissingPrefix(argMultimap, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                    PREFIX_EMAIL, PREFIX_TELEGRAM, PREFIX_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            if (missingPrefix.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_PREFIX_MISSING, missingPrefix.get().toString(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                        AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        } else if (!isPreambleEmpty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throw new ParseException(MESSAGE_PREAMBLE_NOT_EMPTY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        } else if (areDuplicatePrefixesPresent) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            Optional\u003cPrefix\u003e duplicatePrefix \u003d getDuplicatePrefix(argMultimap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            if (duplicatePrefix.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_DUPLICATE_PREFIXES, duplicatePrefix.get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Telegram telegram \u003d ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        MatricNumber matricNumber \u003d ParserUtil.parseMatricNumber("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                argMultimap.getValue(PREFIX_MATRIC_NUMBER).get()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        SortedSet\u003cAttendance\u003e attendances \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Person person \u003d new Person(name, phone, email, telegram, matricNumber, tagList, attendances);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static Optional\u003cPrefix\u003e getMissingPrefix(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if there are duplicate prefixes(except for tag) in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static boolean checkDuplicatePrefixes(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Stream\u003cPrefix\u003e prefixes \u003d Stream.of(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TELEGRAM,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                PREFIX_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return prefixes.anyMatch(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003e 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static Optional\u003cPrefix\u003e getDuplicatePrefix(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Stream\u003cPrefix\u003e prefixes \u003d Stream.of(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TELEGRAM,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                PREFIX_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return prefixes.filter(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003e 1).findFirst();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 14,
      "sun-yitao": 34,
      "kwannoel": 7,
      "-": 54,
      "rnmy": 1,
      "chrisgzf": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddConsultParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.AddConsultCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Parses input arguments and creates a new AddConsultCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class AddConsultParser implements Parser\u003cAddConsultCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddConsultCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * and returns an AddConsultCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param args Arguments passed over the command line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return AddConsultCommand after parsing the arguments."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public AddConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_TIME, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        PREFIX_TYPE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE, PREFIX_TIME, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                PREFIX_TYPE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddConsultCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Day date \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Address location \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation consultation \u003d new Consultation(name, date, time, location, type);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new AddConsultCommand(consultation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param argumentMultimap argumentMultimap for comparison."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param prefixes all prefixes inputted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of all prefixes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.AddConsultCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.logic.commands.AttendCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.commands.DeleteConsultCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.logic.commands.ExportAttendanceCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.ListConsultCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.commands.ShowAttendanceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.UnattendCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case AddConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return new AddConsultParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        case DeleteConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            return new DeleteConsultCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case ListConsultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return new ListConsultCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        case AttendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            return new AttendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case UnattendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return new UnattendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        case ShowAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            return new ShowAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return new ArchiveCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        case ExportAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            return new ExportAttendanceCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 16,
      "sun-yitao": 8,
      "kwannoel": 8,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIXES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        checkDuplicatePrefixes(argumentMultimap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return argumentMultimap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Returns true if there are duplicate prefixes(except for tag) in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * We only check for duplicates in parameters that can only have a single value mapping"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private static void checkDuplicatePrefixes(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Stream\u003cPrefix\u003e prefixes \u003d Stream.of("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TELEGRAM,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                PREFIX_MATRIC_NUMBER, PREFIX_ADDRESS, PREFIX_DATE, PREFIX_TIME, PREFIX_TYPE"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        );"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Optional\u003cPrefix\u003e duplicatePrefix \u003d prefixes"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getAllValues(prefix).size() \u003e 1)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (duplicatePrefix.isPresent()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_DUPLICATE_PREFIXES, duplicatePrefix.get()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 38,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttendCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.logic.commands.AttendCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "public class AttendCommandParser implements Parser\u003cAttendCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AttendCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * and returns a AttendCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public AttendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Attendance attendance \u003d ParserUtil.parseAttendance(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        return new AttendCommand(index, attendance);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 37,
      "rnmy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final Prefix PREFIX_TELEGRAM \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final Prefix PREFIX_MATRIC_NUMBER \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tg/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"tm/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"ty/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "kwannoel": 3,
      "-": 14,
      "rnmy": 1,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                            DeleteCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "rnmy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteConsultCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.commands.DeleteConsultCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Parses input arguments and creates a new DeleteConsultCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class DeleteConsultCommandParser implements Parser\u003cDeleteConsultCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteConsultCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * and returns a DeleteConsultCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public DeleteConsultCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            return new DeleteConsultCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteConsultCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TELEGRAM,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        PREFIX_MATRIC_NUMBER, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        boolean arePrefixesPresent \u003d arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                PREFIX_EMAIL, PREFIX_TELEGRAM, PREFIX_MATRIC_NUMBER, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        if (preamble.isEmpty() || !arePrefixesPresent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                            EditCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TELEGRAM).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            editPersonDescriptor.setTelegram(ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MATRIC_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            editPersonDescriptor.setMatricNumber(ParserUtil.parseMatricNumber(argMultimap.getValue(PREFIX_MATRIC_NUMBER)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * Returns true if at least one of the prefixes contains non-empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        return !Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 76,
      "rnmy": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw parseException(trimmedName, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Parses a {@code String date} into a {@code Day}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static Day parseDay(String date) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String trimmedDay \u003d date.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!Day.isValidDay(trimmedDay)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return Day.fromDateString(trimmedDay);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return Time.fromTimeString(trimmedTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw parseException(phone, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw parseException(trimmedEmail, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Parses a {@code String telegram} into an {@code Telegram}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @throws ParseException if the given {@code telegram} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static Telegram parseTelegram(String telegram) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(telegram);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        String trimmedTelegram \u003d telegram.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (!Telegram.isValidTelegram(telegram)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw parseException(trimmedTelegram, Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return new Telegram(trimmedTelegram);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Parses a {@code String matricNumber} into an {@code MatricNumber}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @throws ParseException if the given {@code matricNumber} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static MatricNumber parseMatricNumber(String matricNumber) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        String trimmedMatricNumber \u003d matricNumber.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (!MatricNumber.isValidMatricNumber(trimmedMatricNumber)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw parseException(trimmedMatricNumber, MatricNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return new MatricNumber(trimmedMatricNumber);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw parseException(trimmedTag, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * Creates an {@code Attendance} by parsing the input date."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * @param input Input date string"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * @return {@code Attendance}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * @throws ParseException if date cannot be parsed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static Attendance parseAttendance(String input) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            return Attendance.fromDateString(input);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw parseException(input, Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Parses a {@code String type} into an {@code Type}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String trimmedType \u003d type.trim().toLowerCase();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private static String returnsWrongInput(String input, String message) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return \"Your input: \\\"\" + input + \"\\\" is incorrectly formatted.\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                + \"See below for further details:\\n\\n\" + message;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private static ParseException parseException(String input, String message) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return new ParseException(returnsWrongInput(input, message));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 48,
      "sun-yitao": 16,
      "kwannoel": 39,
      "-": 125,
      "rnmy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param prefix A short letter/phrase"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert prefix !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 5,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowAttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.commands.ShowAttendanceCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class ShowAttendanceCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowAttendanceCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * and returns a ShowAttendanceCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public ShowAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Optional\u003cString\u003e date \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        if (preamble.isEmpty() || date.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                            MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                            ShowAttendanceCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                    )"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Attendance attendance \u003d ParserUtil.parseAttendance(date.get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return new ShowAttendanceCommand(index, attendance);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 36,
      "rnmy": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnattendCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.UnattendCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Parses input arguments and creates a new UnattendCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class UnattendCommandParser implements Parser\u003cUnattendCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnattendCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * and returns a UnattendCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param args arguments inputted into the object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return new UnattendCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public UnattendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isEmpty() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnattendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Attendance attendance \u003d ParserUtil.parseAttendance(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new UnattendCommand(index, attendance);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 38,
      "rnmy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    Predicate\u003cConsultation\u003e PREDICATE_SHOW_ALL_CONSULTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Replaces address book data with the data in {@code tasker}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook tasker);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /** Returns the TAsker */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a consultation with the same identity as {@code consultation} exists in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    boolean hasConsult(Consultation consultation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a consultation with the same identity as {@code consultation} exists in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    boolean hasConflictingPersonalConsultation(Consultation consultation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Adds the given consultation."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code consultation} must not already exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    void addConsultation(Consultation consultation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Deletes the given consultation."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * The consultation must exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    void deleteConsultation(Consultation target);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Replaces the given consultation {@code target} with {@code editedConsultation}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * The consultation identity of {@code editedConsultation} must not be the same as"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * another existing consultation in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    void setConsultation(Consultation target, Consultation editedConsultation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /** Returns an unmodifiable view of the filtered consultation list */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    ObservableList\u003cConsultation\u003e getFilteredConsultList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Updates the filter of the filtered consultation list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    void updateFilteredConsultList(Predicate\u003cConsultation\u003e predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 43,
      "-": 84,
      "chrisgzf": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final Tasker tasker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final FilteredList\u003cConsultation\u003e filteredConsults;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Initializes a ModelManager with the given tasker and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook tasker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        requireAllNonNull(tasker, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + tasker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this.tasker \u003d new Tasker(tasker);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.tasker.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        filteredConsults \u003d new FilteredList\u003c\u003e(this.tasker.getConsultationList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this(new Tasker(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TAsker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook tasker) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this.tasker.resetData(tasker);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return tasker;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    //---------- Student-related operations -------------------------------------------------------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return tasker.hasPerson(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker.removePerson(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker.addPerson(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    //---------- Consultation-related operations -------------------------------------------------------------"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasConsult(Consultation consultation) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(consultation);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return tasker.hasConsultation(consultation);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasConflictingPersonalConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(consultation);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return tasker.hasConflictingPersonalConsultation(consultation);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void addConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        tasker.addConsultation(consultation);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        updateFilteredConsultList(PREDICATE_SHOW_ALL_CONSULTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void deleteConsultation(Consultation target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        tasker.removeConsultation(target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultation(Consultation target, Consultation editedConsultation) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireAllNonNull(target, editedConsultation);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        tasker.setConsult(target, editedConsultation);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Consult List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Consultation} backed by the internal list of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ObservableList\u003cConsultation\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return filteredConsults;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void updateFilteredConsultList(Predicate\u003cConsultation\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        filteredConsults.setPredicate(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return tasker.equals(other.tasker)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 filteredConsults.equals(other.filteredConsults);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 48,
      "-": 135,
      "chrisgzf": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns an unmodifiable view of the consultation list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * This list will not contain any duplicate consultations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    ObservableList\u003cConsultation\u003e getConsultationList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Tasker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.UniqueConsultationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "public class Tasker implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final UniqueConsultationList consults;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consults \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public Tasker() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Creates an TAsker using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public Tasker(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Replaces the contents of the consultation list with {@code consults}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code consults} must not contain duplicate consults."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsults(List\u003cConsultation\u003e consults) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.consults.setConsultations(consults);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Resets the existing data of this {@code Tasker} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        setConsults(newData.getConsultationList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Removes {@code key} from this {@code Tasker}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    //// consult-level operations"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a consultation with the same identity as {@code consultation} exists in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(consultation);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return consults.contains(consultation);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a personal consultation conflicts with other {@code consultation} at the same time and date."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasConflictingPersonalConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(consultation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return consults.hasConflictingPersonalConsult(consultation);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Adds a consultation to the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * The consultation must not already exist in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void addConsultation(Consultation c) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consults.add(c);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult(Consultation target, Consultation editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consults.setConsultation(target, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Removes {@code key} from this {@code Tasker}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void removeConsultation(Consultation key) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consults.remove(key);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ObservableList\u003cConsultation\u003e getConsultationList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return consults.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                || (other instanceof Tasker // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                \u0026\u0026 persons.equals(((Tasker) other).persons));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 59,
      "-": 111,
      "chrisgzf": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"tasker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert userPrefs !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 86,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/Attendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Represents a Person\u0027s attendance in classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "public class Attendance implements Comparable\u003cAttendance\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Accepted date format: dd/MM/yyyy (e.g. 27/03/1998).\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Day should be in the range 1-31\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Month should be 01-12\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"Year should be a 4 digit numeric value, with the exception of 0000\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Creates a new {@code Attendance} using a {@code LocalDate}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @param date {@code LocalDate} that corresponds to input date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public Attendance(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Creates a new {@code Attendance} using a date string that will be parsed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @param input date string in dd/MM/yyyy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @return {@code Attendance} that corresponds to the input date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public static Attendance fromDateString(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String trimmedInput \u003d input.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            date \u003d LocalDate.parse(trimmedInput, DATE_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            checkArgument(false, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            return null; // Never triggers as the above will throw an invalid argument exception"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return new Attendance(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Attendance that \u003d (Attendance) o;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return date.equals(that.date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return Objects.hash(date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public int compareTo(Attendance o) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assert(this.date !\u003d null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return this.date.compareTo(o.date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 1,
      "kwannoel": 25,
      "rnmy": 7,
      "chrisgzf": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Consultation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represents a Consultation in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Consultation {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Day date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Address location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor for a consultation object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param name name of person consulting."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param date date of consultation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param time time of consultation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param location location of consultation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param type type of consultation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Consultation(Name name, Day date, Time time, Address location, Type type) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireAllNonNull(name, date, time, location, type);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Day getDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Address getLocation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if both consultation of the same date, time have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * This defines a weaker notion of equality between two consultations."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param consultation Consultation object being checked."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of same consultation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean isSameConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (consultation \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return consultation !\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getDate().equals(getDate())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getTime().equals(getTime())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getName().equals(getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a personal consultation is added on the same time \u0026 day as another consultation."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param consultation Consultation to be added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of conflicting consultation."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean isPersonalConsultationOnSameTiming(Consultation consultation) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (consultation \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // transitive: adding personal consult to an existing group/personal consult OR"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // adding group consult to an existing personal consult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return consultation !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 (consultation.getType().type.equals(ConsultationType.PERSONAL)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                || getType().type.equals(ConsultationType.PERSONAL))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getDate().equals(getDate())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getTime().equals(getTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Returns true if a Group consultation is added on the same time \u0026 day as another consultation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @param consultation Consultation to be added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @return Presence of conflicting consultation."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public boolean isGroupConsultationOnSameTimingAndDifferentLocation(Consultation consultation) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (consultation \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // Group consultations can have same timing, but they must have the same location."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return consultation !\u003d null"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 (consultation.getType().type.equals(ConsultationType.GROUP)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || getType().type.equals(ConsultationType.GROUP))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 consultation.getDate().equals(getDate())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 consultation.getTime().equals(getTime())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 !consultation.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if both consultation have the same data fields."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param other object for comparison."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of whether the consultations have same fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!(other instanceof Consultation)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation consultation \u003d (Consultation) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return consultation.getName().equals(getName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getType().equals(getType())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getTime().equals(getTime())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getDate().equals(getDate())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return Objects.hash(name, date, location, time, type);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .append(getType());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 140,
      "kwannoel": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/ConsultationType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represents the type of consultations in classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public enum ConsultationType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    PERSONAL {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"Personal\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    GROUP {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return \"Group\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represents a Consultation\u0027s date in classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Day implements Comparable\u003cDay\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please check if the date provided is valid.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"Accepted date format: dd/MM/yyyy (e.g. 27/03/1998).\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"Day should be in the range 1-31\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"Month should be 01-12\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            + \"Year should be a 4 digit numeric value, with the exception of 0000\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Users should only use fromDateString to safely generate the day of consultation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param date Date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private Day(LocalDate date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates a new {@code Day} using a date string that will be parsed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param input date string in dd/MM/yyyy."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return {@code Day} that corresponds to the input date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final Day fromDateString(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String trimmedInput \u003d input.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            date \u003d LocalDate.parse(trimmedInput, DATE_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            checkArgument(false, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return null; // Never triggers as the above will throw an invalid argument exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new Day(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param test Input date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of valid day."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assert(test !\u003d null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String trimmedTest \u003d test.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(trimmedTest, DATE_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns string representation of the date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return date in string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Day that \u003d (Day) o;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return date.equals(that.date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return Objects.hash(date);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int compareTo(Day o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert(this.date !\u003d null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return this.date.compareTo(o.date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 83,
      "rnmy": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represents a Consultation\u0027s time in classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Guarantees: Immutable"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Time implements Comparable\u003cTime\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Accepted time format: hh:mm (e.g. 08:30)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public final LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Users should only use fromDateString to safely generate the time of consultation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param time Input time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Time(LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert time !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates a new {@code Time} using a time string that will be parsed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param input time string in hh:mm."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return {@code Time} that corresponds to the input time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final Time fromTimeString(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            time \u003d LocalTime.parse(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            checkArgument(false, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return null; // Never triggers as the above will throw an invalid argument exception"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new Time(time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a given time is a valid time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param test Input time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of valid time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(test);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns string representation of the time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return time in string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return time.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Time that \u003d (Time) o;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return time.equals(that.time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return Objects.hash(time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int compareTo(Time t) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert(this.time !\u003d null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return this.time.compareTo(t.time);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/Type.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.model.consultation.ConsultationType.GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.model.consultation.ConsultationType.PERSONAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represents the type of consultation in classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Accepted consultation type format: personal/group\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public final ConsultationType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructs a {@code Type}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param type A valid ConsultationType."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.type \u003d assignType(type);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if a given string is a valid consultation type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param test Input type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return confirmation of valid type."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return test.equalsIgnoreCase(GROUP.toString()) || test.equalsIgnoreCase(PERSONAL.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Assigns a ConsultationType to the input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param test Input type."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return ConsultationType of input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static ConsultationType assignType(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return test.equalsIgnoreCase(GROUP.toString()) ? GROUP : PERSONAL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns string representation of the consultation type.."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return type in string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return type.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 type.equals(((Type) other).type)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/UniqueConsultationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.consultation.exceptions.ConflictingGroupConsultationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.exceptions.ConflictingPersonalConsultationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.exceptions.ConsultationNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.exceptions.DuplicateConsultationException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * A list of consultations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * A consultation is considered unique by comparing using {@code Consultation#isSameConsultation(Consultation)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * As such, adding and updating of consultations uses Consultation#isSameConsultation(Consultation) for equality so as"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * to ensure that the consultation being added or updated is unique in terms of identity in the UniqueConsultationList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * However, the removal of a consultation uses Consultation#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * as to ensure that the consultation with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * @see Consultation#isSameConsultation(Consultation)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class UniqueConsultationList implements Iterable\u003cConsultation\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final ObservableList\u003cConsultation\u003e internalConsults \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final ObservableList\u003cConsultation\u003e internalUnmodifiableConsults \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalConsults);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if the list contains an equivalent consultation as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param toCheck the consultation being checked."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of consultation in current list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean contains(Consultation toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return internalConsults.stream().anyMatch(toCheck::isSameConsultation);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if the list contains an personal consultation that conflicts with as the given argument"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * in terms of timing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param toCheck Consultation being checked."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Presence of conflicting consultation."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasConflictingPersonalConsult(Consultation toCheck) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return internalConsults.stream().anyMatch(toCheck::isPersonalConsultationOnSameTiming);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Adds a consultation to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * The consultation must not already exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param toAdd Consultation to add to the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DuplicateConsultationException If consultation was already present."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void add(Consultation toAdd) throws"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            DuplicateConsultationException,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            ConflictingPersonalConsultationException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            ConflictingGroupConsultationException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new DuplicateConsultationException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // conflicting personal consultation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (hasConflictingPersonalConsult(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ConflictingPersonalConsultationException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // conflicting group consultation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        if (hasConflictingGroupConsultation(toAdd)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            throw new ConflictingGroupConsultationException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        internalConsults.add(toAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private boolean hasConflictingGroupConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return internalConsults.stream().anyMatch(consultation::isGroupConsultationOnSameTimingAndDifferentLocation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Replaces the consultation {@code target} in the list with {@code editedConsultation}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * The consultation identity of {@code editedConsultation} must not be the same as"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * another existing consultation in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param target Consultation set to be replaced."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param editedConsultation Replacement for the targeted consultation."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ConsultationNotFoundException If targeted consultation is missing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DuplicateConsultationException If replacement consultation was merely a duplicate in list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultation(Consultation target, Consultation editedConsultation) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireAllNonNull(target, editedConsultation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int index \u003d internalConsults.indexOf(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ConsultationNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!target.isSameConsultation(editedConsultation) \u0026\u0026 contains(editedConsultation)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new DuplicateConsultationException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        internalConsults.set(index, editedConsultation);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Replaces all the consultations in the current list with the ones from the given {@code UniqueConsultationList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param replacement Replacement unique consultation list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultations(UniqueConsultationList replacement) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        internalConsults.setAll(replacement.internalConsults);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Replaces the contents of this list with {@code consultations}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * {@code consultations} must not contain duplicate consultations."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param consultations Replacement list of consultations."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws DuplicateConsultationException If there are duplicates from the given list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultations(List\u003cConsultation\u003e consultations) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireAllNonNull(consultations);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!consultsAreUnique(consultations)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new DuplicateConsultationException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        internalConsults.setAll(consultations);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Removes the equivalent consultation from the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * The consultation must exist in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param toRemove Consultation to remove from the list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws ConsultationNotFoundException If consultation is not found in the list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void remove(Consultation toRemove) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!internalConsults.remove(toRemove)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new ConsultationNotFoundException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return ObservableList of consultations."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ObservableList\u003cConsultation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return internalUnmodifiableConsults;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Iterator\u003cConsultation\u003e iterator() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return internalConsults.iterator();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                || (other instanceof UniqueConsultationList // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 internalConsults.equals(((UniqueConsultationList) other).internalConsults));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return internalConsults.hashCode();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Returns true if {@code consultations} contains only unique consultations."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param consultations List of consultations."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Confirmation of all consults being unique."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private boolean consultsAreUnique(List\u003cConsultation\u003e consultations) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        for (int i \u003d 0; i \u003c consultations.size() - 1; i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            for (int j \u003d i + 1; j \u003c consultations.size(); j++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                if (consultations.get(i).isSameConsultation(consultations.get(j))) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 181,
      "kwannoel": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/exceptions/ConflictingGroupConsultationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.model.consultation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Signals that the operation will result in conflicting personal Consultations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * (Consultations are said to conflict if they match in time \u0026 date, but have various types such as"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * personal vs personal, group vs personal)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class ConflictingGroupConsultationException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public ConflictingGroupConsultationException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        super(\"Group consultations sharing the same time slot should be at the same location!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/exceptions/ConflictingPersonalConsultationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Signals that the operation will result in conflicting personal Consultations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * (Consultations are said to conflict if they match in time \u0026 date, but have various types such as"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * personal vs personal, group vs personal)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ConflictingPersonalConsultationException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConflictingPersonalConsultationException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(\"Operation would result in conflicting consultations at the same time!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/exceptions/ConsultationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Signals that the operation is unable to find the specified consultation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ConsultationNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consultation/exceptions/DuplicateConsultationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Signals that the operation will result in duplicate Consultations (Consultations are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class DuplicateConsultationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public DuplicateConsultationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(\"Operation would result in duplicate consultations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatricNumber.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Represents a Person\u0027s Matric number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class MatricNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \"Matric numbers should only contain numbers,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    + \" and it should be in the form A\u003c7 digits\u003e\u003c1 uppercase alphabet\u003e.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^A\\\\d{7}[A-Z]$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Constructs a {@code MatricNumber}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @param matricNumber A valid matric number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public MatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(matricNumber);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        checkArgument(isValidMatricNumber(matricNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        value \u003d matricNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Returns true if a given string is a valid matric number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static boolean isValidMatricNumber(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || (other instanceof MatricNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 value.equals(((MatricNumber) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "kwannoel": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private final Telegram telegram;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private final MatricNumber matricNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final SortedSet\u003cAttendance\u003e attendances \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public Person(Name name,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                  Phone phone,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                  Email email,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                  Telegram telegram,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                  MatricNumber matricNumber,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                  Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                  SortedSet\u003cAttendance\u003e attendances) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        requireAllNonNull(name, phone, email, tags, attendances);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this.attendances.addAll(attendances);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Telegram getTelegram() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return telegram;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public MatricNumber getMatricNumber() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return matricNumber;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Returns an immutable attendance sorted set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public SortedSet\u003cAttendance\u003e getAttendances() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return Collections.unmodifiableSortedSet(attendances);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || otherPerson.getMatricNumber().equals(getMatricNumber())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || otherPerson.getTelegram().equals(getTelegram()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 otherPerson.getTelegram().equals(getTelegram())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 otherPerson.getMatricNumber().equals(getMatricNumber())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                \u0026\u0026 otherPerson.getAttendances().equals(getAttendances());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return Objects.hash(name, phone, email, telegram, matricNumber, tags, attendances);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .append(\" Telegram: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .append(getTelegram())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .append(\" Matric Number: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .append(getMatricNumber())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 3,
      "kwannoel": 22,
      "-": 107,
      "chrisgzf": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Telegram.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Represents a Person\u0027s telegram in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTelegram(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class Telegram {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            \"Accepted characters: A-z (case-insensitive), 0-9 and underscores. Length: 5-32 characters.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * TODO: update regex"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9_-]{5,32}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public final String telegram;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Constructs a {@code Telegram}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * @param telegram A valid telegram."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public Telegram(String telegram) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        requireNonNull(telegram);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        checkArgument(isValidTelegram(telegram), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Returns true if a given string is a valid telegram."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static boolean isValidTelegram(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return \"@\" + telegram;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                || (other instanceof Telegram // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                \u0026\u0026 telegram.equals(((Telegram) other).telegram)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return telegram.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Contains utility methods for populating {@code Tasker} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new Telegram(\"alexyeoh\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new MatricNumber(\"A1234567A\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                getTagSet(\"F11\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                new TreeSet\u003c\u003e()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new Telegram(\"berniceyu\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new MatricNumber(\"A0001111B\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                getTagSet(\"F11\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                new TreeSet\u003c\u003e()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new Telegram(\"charlotte\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new MatricNumber(\"A1111000C\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                getTagSet(\"F11\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                new TreeSet\u003c\u003e()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new Telegram(\"david\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new MatricNumber(\"A7654321D\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                getTagSet(\"F11\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                new TreeSet\u003c\u003e()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new Telegram(\"irfan\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new MatricNumber(\"A7654321E\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                getTagSet(\"F11\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                new TreeSet\u003c\u003e()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                new Telegram(\"royba\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                new MatricNumber(\"A1234123F\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                getTagSet(\"F11\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                new TreeSet\u003c\u003e())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static Consultation[] getSampleConsultations() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new Consultation[] {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            new Consultation(new Name(\"Alex Yeoh\"), Day.fromDateString(\"24/10/2020\"), Time.fromTimeString(\"18:00\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    new Address(\"SOC Basement\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    new Type(\"personal\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            new Consultation(new Name(\"Alex Yeoh\"), Day.fromDateString(\"21/10/2020\"), Time.fromTimeString(\"10:00\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    new Address(\"SOC Basement 3\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    new Type(\"group\"))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker sampleAb \u003d new Tasker();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        for (Consultation sampleConsultation: getSampleConsultations()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            sampleAb.addConsultation(sampleConsultation);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Returns a sorted {@code Attendance} sorted set containing the list of strings given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static SortedSet\u003cAttendance\u003e getAttendanceSet(String... dateStrings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return new TreeSet\u003c\u003e(Arrays.stream(dateStrings)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                .map(Attendance::fromDateString)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                .collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 17,
      "kwannoel": 13,
      "-": 47,
      "chrisgzf": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Tasker}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Returns TAsker data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @param tasker cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook tasker) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook tasker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "chrisgzf": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Jackson-friendly version of {@link Attendance}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "class JsonAdaptedAttendance {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final SimpleDateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final String dateString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttendance} with the given {@code dateString}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public JsonAdaptedAttendance(String dateString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assert(dateString !\u003d null \u0026\u0026 !dateString.equals(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Converts a given {@code Attendance} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public JsonAdaptedAttendance(Attendance source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        dateString \u003d source.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assert(dateString !\u003d null \u0026\u0026 !dateString.equals(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Converts this Jackson-friendly adapted attendance object into the model\u0027s {@code Attendance} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public Attendance toModelType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assert(dateString !\u003d null \u0026\u0026 !dateString.equals(\"\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return Attendance.fromDateString(dateString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedConsultation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Jackson-friendly version of {@link Consultation}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class JsonAdaptedConsultation {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Consultation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructs a {@code JsonAdaptedConsultation} with the given consultation details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param name Name of consultation requestor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param date Date of consultation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param time Time of consultation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param location Location of consultation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param type Type of consultation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public JsonAdaptedConsultation(@JsonProperty(\"name\") String name, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                                   @JsonProperty(\"time\") String time, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                                   @JsonProperty(\"type\") String type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Converts a given {@code Consultation} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public JsonAdaptedConsultation(Consultation source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        type \u003d source.getType().type.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Converts this Jackson-friendly adapted consultation object into the model\u0027s {@code Consultation} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return converted Consultation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted consultation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Consultation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!Day.isValidDay(date)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final Day modelDay \u003d Day.fromDateString(date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final Time modelTime \u003d Time.fromTimeString(time);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final Address modelLocation \u003d new Address(location);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new Consultation(modelName,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                modelDay,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                modelTime,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                modelLocation,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                modelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final String telegram;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final String matricNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final List\u003cJsonAdaptedAttendance\u003e attendances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"telegram\") String telegram,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                             @JsonProperty(\"matricNumber\") String matricNumber,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                             @JsonProperty(\"attendances\") List\u003cJsonAdaptedAttendance\u003e attendances) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.matricNumber \u003d matricNumber;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (attendances !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            this.attendances.addAll(attendances);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        telegram \u003d source.getTelegram().telegram;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        matricNumber \u003d source.getMatricNumber().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tags.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        attendances.addAll(source.getAttendances().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                .map(JsonAdaptedAttendance::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        final SortedSet\u003cAttendance\u003e personAttendances \u003d new TreeSet\u003cAttendance\u003e(attendances.stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                .map(JsonAdaptedAttendance::toModelType)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                .collect(Collectors.toSet())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (telegram \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    Telegram.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final Telegram modelTelegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (matricNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    MatricNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final MatricNumber modelMatricNumber \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return new Person(modelName,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                modelPhone,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                modelEmail,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                modelTelegram,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                modelMatricNumber,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                modelTags,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                personAttendances);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 19,
      "-": 93,
      "chrisgzf": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert source !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * A class to access TAsker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class constructor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param filePath Path of file intialised"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert filePath !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook tasker) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        saveAddressBook(tasker, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook tasker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        requireNonNull(tasker);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(tasker), filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 5,
      "-": 74,
      "chrisgzf": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * An Immutable TAsker that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "@JsonRootName(value \u003d \"tasker\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULTATION \u003d \"Consultation list contains duplicate consult(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final List\u003cJsonAdaptedConsultation\u003e consults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons \u0026 consultations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                                       @JsonProperty(\"consults\") List\u003cJsonAdaptedConsultation\u003e consults) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.consults.addAll(consults);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consults.addAll(source.getConsultationList()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .map(JsonAdaptedConsultation::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Converts this address book into the model\u0027s {@code Tasker} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public Tasker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker tasker \u003d new Tasker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            if (tasker.hasPerson(person)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            tasker.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        for (JsonAdaptedConsultation jsonAdaptedConsultation : consults) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            Consultation consultation \u003d jsonAdaptedConsultation.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            if (tasker.hasConsultation(consultation)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CONSULTATION);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            tasker.addConsultation(consultation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return tasker;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 17,
      "-": 49,
      "chrisgzf": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook tasker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Manages storage of TAsker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assert addressBookStorage !\u003d null \u0026\u0026 userPrefsStorage !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TAsker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook tasker) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        saveAddressBook(tasker, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook tasker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        addressBookStorage.saveAddressBook(tasker, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 73,
      "chrisgzf": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttendanceTablePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rnmy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rnmy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rnmy"
        },
        "content": " * Panel containing the list of student attendance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rnmy"
        },
        "content": "public class AttendanceTablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String FXML \u003d \"AttendanceTablePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AttendanceTablePanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private TableView\u003cPerson\u003e attendanceTableView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private TableColumn\u003cPerson, String\u003e nameCol;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private TableColumn\u003cPerson, String\u003e attendanceCol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * Creates a {@code AttendanceTablePanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public AttendanceTablePanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        nameCol.setCellValueFactory("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                new PropertyValueFactory\u003cPerson, String\u003e(\"name\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        attendanceCol.setCellValueFactory("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                new PropertyValueFactory\u003cPerson, String\u003e(\"attendances\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        attendanceTableView.setItems(personList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rnmy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rnmy": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        commandTextField.addEventHandler(KeyEvent.KEY_PRESSED, (KeyEvent keyEvent) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                logger.fine(\"Key Pressed: UP\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                fillWithPreviousCommandIfPresent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                logger.fine(\"Key Pressed: DOWN\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                fillWithNextCommandIfPresent();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private void fillWithPreviousCommandIfPresent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        CommandHistory.getInstance().fetchPrevious().ifPresent(command -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            commandTextField.setText(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            logger.fine(\"Command Box set to previous command: \" + command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private void fillWithNextCommandIfPresent() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        CommandHistory.getInstance().fetchNext().ifPresent(command -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            commandTextField.setText(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            logger.fine(\"Command Box set to next command: \" + command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            String enteredCommand \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            CommandHistory.getInstance().push(enteredCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            commandExecutor.execute(enteredCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            // Force the command history to point at the previous command (the errored command)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            CommandHistory.getInstance().fetchPrevious();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "chrisgzf": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Keeps track of which commands have been previously entered, so that past commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * can easily be re-entered."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Follows a singleton design pattern, so that the command history can only be instantiated once."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static CommandHistory commandHistory \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandHistory.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final List\u003cString\u003e executedCommands;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private int pointer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Private constructor, only to be called by `getInstance`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private CommandHistory() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        executedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Initial value doesn\u0027t matter, pointer is reset when a new command is pushed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        pointer \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Method to get the CommandHistory singleton."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @return CommandHistory singleton"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static CommandHistory getInstance() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (commandHistory \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Adds a user-typed command to the command history."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * No validation will be performed on the command, as we also want to save"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * commands with mistakes in the syntax."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @param command command to be added to the history"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void push(String command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        executedCommands.add(command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        logger.fine(\"New command added to history: \" + command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Resets the pointer to point at the last command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // This is intentionally set to be out-of-bounds. The accessor methods will never have any"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // out-of-bounds accesses."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        pointer \u003d executedCommands.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Fetches the previous command from the command history."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Will restart from the most recent command, if the pointer has"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * gone beyond the earliest-entered command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @return previous command wrapped in a {@link Optional}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public Optional\u003cString\u003e fetchPrevious() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (executedCommands.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            logger.fine(\"Empty history, nothing to fetch\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (--pointer \u003c 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            pointer \u003d executedCommands.size() - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return Optional.of(executedCommands.get(pointer));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Fetches the next command from the command history."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Will restart from the earliest-entered command, if the pointer has"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * gone beyond the most recent command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @return next command wrapped in a {@link Optional}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public Optional\u003cString\u003e fetchNext() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        if (executedCommands.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            logger.fine(\"Empty history, nothing to fetch\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        pointer \u003d (pointer + 1) % executedCommands.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return Optional.of(executedCommands.get(pointer));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ConsultationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represents the UI part of Consultation object in JavaFX."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ConsultationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String FXML \u003d \"ConsultationListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Tasker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public final Consultation consultation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates a {@code ConsultationCode} with the given {@code Consultation} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param consultation Consultation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param displayedIndex Index of consultation to display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationCard(Consultation consultation, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.consultation \u003d consultation;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(consultation.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        name.setText(consultation.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        date.setText(consultation.getDate().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        time.setText(consultation.getTime().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        address.setText(consultation.getLocation().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        type.setText(consultation.getType().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        if (!(other instanceof ConsultationCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ConsultationCard card \u003d (ConsultationCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u0026\u0026 consultation.equals(card.consultation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ConsultationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Represent UI part of the list used to hold all consultations in JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ConsultationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String FXML \u003d \"ConsultationListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ConsultationListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private ListView\u003cConsultation\u003e consultListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates a {@code ConsultationListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @param consultList list that contains the consultations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationListPanel(ObservableList\u003cConsultation\u003e consultList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consultListView.setItems(consultList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consultListView.setCellFactory(listView -\u003e new ConsultationListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Consultation} using a {@code ConsultationCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    class ConsultationListViewCell extends ListCell\u003cConsultation\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        protected void updateItem(Consultation consultation, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            super.updateItem(consultation, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            if (empty || consultation \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                setGraphic(new ConsultationCard(consultation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f11-1.github.io/\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "            + \"tp/UserGuide.html#quick-start\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private AttendanceTablePanel attendanceTablePanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private ConsultationListPanel consultationListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private StackPane attendanceTablePanelPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private StackPane consultationListPanelPlaceHolder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        attendanceTablePanel \u003d new AttendanceTablePanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        attendanceTablePanelPlaceholder.getChildren().add(attendanceTablePanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consultationListPanel \u003d new ConsultationListPanel(logic.getFilteredConsultationList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        consultationListPanelPlaceHolder.getChildren().add(consultationListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationListPanel getConsultationListPanel() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return consultationListPanel;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 9,
      "-": 196,
      "rnmy": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Tasker level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label telegram;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Label matricNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        telegram.setText(person.getTelegram().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        matricNumber.setText(person.getMatricNumber().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 6,
      "-": 75,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/AttendanceTablePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \u003cTableView fx:id\u003d\"attendanceTableView\" prefHeight\u003d\"400.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"nameCol\" prefWidth\u003d\"200.0\" text\u003d\"Name\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                \u003cTableColumn fx:id\u003d\"attendanceCol\" prefWidth\u003d\"600.0\" text\u003d\"Attendance\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rnmy": 13,
      "chrisgzf": 3
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/ConsultationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 34,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/ConsultationListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  \u003cListView fx:id\u003d\"consultListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 7,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background: #fff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cfx:root minHeight\u003d\"650.0\" minWidth\u003d\"900.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TAsker\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \u003cURL value\u003d\"@TaskerTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \u003cVBox style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" style\u003d\"-fx-background-color: #fff; -fx-border-width: 0 0 2px 0; -fx-border-color: transparent transparent #dd658b transparent;\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" style\u003d\"-fx-background-color: white;\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" style\u003d\"-fx-background-color: white;\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \u003cTabPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rnmy"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            \u003cTab fx:id\u003d\"studentData\" text\u003d\"Students\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rnmy"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" style\u003d\"-fx-background-color: white;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rnmy"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            \u003cTab fx:id\u003d\"studentAttendance\" text\u003d\"Attendance\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rnmy"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                \u003cVBox fx:id\u003d\"attendanceTable\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"attendanceTablePanelPlaceholder\" style\u003d\"-fx-background-color: white;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rnmy"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003cTab fx:id\u003d\"studentConsult\" text\u003d\"Consultations\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003cVBox fx:id\u003d\"consultList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"consultationListPanelPlaceHolder\" style\u003d\"-fx-background-color: white;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rnmy"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" style\u003d\"-fx-background-color: #ffffff; -fx-border-color: #dd658b transparent transparent transparent; -fx-border-width: 2px 0 0 0;\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 18,
      "-": 44,
      "rnmy": 22,
      "chrisgzf": 19
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      \u003cLabel fx:id\u003d\"telegram\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$telegram\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      \u003cLabel fx:id\u003d\"matricNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matricNumber\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "-": 34,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" promptText\u003d\"Please input command in the box above. Type \u0027help\u0027 to access the user guide.\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "chrisgzf": 4
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cGridPane style\u003d\"-fx-background-color: #fff;\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "chrisgzf": 6
    }
  },
  {
    "path": "src/main/resources/view/TaskerTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "* {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-tasker-base-color: #ffffff;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-tasker-base-color-darker: #ffffff;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-tasker-font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-primary-color: #00089c;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-primary-lighter: #99cfff;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-primary-bg: #bde0ff;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 20%);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    background-color: -fx-tasker-base-color-darker; /* Used in the default.html file */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 600;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 600;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 600;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-base: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-control-inner-background: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 20%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: #cbcbcb;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 2px;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 20%);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: #d9f4ff;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: #d4fffc;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".list-cell:filled:hover {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(#fff3d4, 20%);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: #fff3d4;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 600;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 400;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 3 0 0 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-radius: 10px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: #dd658b;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#resultDisplay .scroll-pane {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#resultDisplay .scroll-pane .viewport {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#resultDisplay .scroll-pane .content {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: derive(-fx-tasker-base-color, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".menu:hover, .menu:showing{"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".menu:focused {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "/*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 400;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  -fx-text-fill: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(-fx-tasker-base-color, 25%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: #EED8E1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: derive(#dd658b, 50%);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: -fx-primary-lighter;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-radius: 10px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: -fx-tasker-base-color;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-family: -fx-tasker-font-family;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-weight: 300;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#commandTextField:hover {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: -fx-primary-color;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#commandTextField:focused {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-color: -fx-primary-color;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 380
    }
  },
  {
    "path": "src/test/data/ConfigUtilTest/EmptyConfig.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "{}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 1
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "-": 6,
      "chrisgzf": 6
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "      \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  \"consults\" : [ {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 3,
      "-": 5,
      "chrisgzf": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"alice_p\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A1234567H\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [\"friends\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"pauline@example.com\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"alicep\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A1234568H\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  \"consults\" : ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "-": 9,
      "rnmy": 4,
      "chrisgzf": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  \"consults\" : ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "-": 6,
      "chrisgzf": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"_comment\": \"TAsker save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"alice_p\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A1234567B\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [\"friends\"],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"attendances\": [\"27/03/1998\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"98765432\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"johnd@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"bm_99\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A3256548H\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [\"owesMoney\", \"friends\"],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"attendances\": [\"27/03/1998\", \"27/04/1998\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"95352563\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"heinz@example.com\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"cKurzzz\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A9876543D\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"attendances\": [\"27/03/1998\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"87652533\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"cornelia@example.com\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"12345\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A1010101B\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [\"friends\"],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"attendances\": [\"27/03/1998\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482224\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"werner@example.com\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"ElleMeyer\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A9999999F\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"attendances\": [\"27/03/1998\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482427\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"lydia@example.com\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"Fiona_Kunz_\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A5763762P\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"attendances\": [\"27/03/1998\"]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      \"name\": \"George Best\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "      \"phone\": \"9482442\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      \"email\": \"anna@example.com\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"telegram\": \"_gbest\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rnmy"
        },
        "content": "      \"matricNumber\": \"A6372632E\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"tags\": [],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "      \"attendances\": [\"27/03/1998\"]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "  \"consults\" : ["
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "-": 23,
      "rnmy": 14,
      "chrisgzf": 31
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/EmptyUserPrefs.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "{}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"addressBookFilePath\": \"tasker.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "  \"addressBookFilePath\": \"tasker.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void equality_toSelf_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        AppParameters p \u003d new AppParameters();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertTrue(p.equals(p));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "chrisgzf": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"tasker.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + TELEGRAM_DESC_AMY + MATRIC_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void getMethods() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(logic.getAddressBook(), model.getAddressBook());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(logic.getFilteredPersonList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(logic.getFilteredConsultationList(), model.getFilteredConsultList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(logic.getGuiSettings(), model.getGuiSettings());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        logic.setGuiSettings(model.getGuiSettings());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(logic.getGuiSettings(), model.getGuiSettings());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook tasker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "sun-yitao": 10,
      "-": 158,
      "rnmy": 2,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.stubs.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            return new Tasker();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 111,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddConsultCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.stubs.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.testutil.ConsultationBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class AddConsultCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void constructor_nullConsultation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddConsultCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_consultationAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ModelStubAcceptingConsultAdded modelStub \u003d new ModelStubAcceptingConsultAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation validConsult \u003d new ConsultationBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        CommandResult commandResult \u003d new AddConsultCommand(validConsult).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(String.format(AddConsultCommand.MESSAGE_SUCCESS, validConsult), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(Arrays.asList(validConsult), modelStub.addedConsults);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_duplicateConsultation_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation validConsult \u003d new ConsultationBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        AddConsultCommand addCommand \u003d new AddConsultCommand(validConsult);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ModelStub modelStub \u003d new AddConsultCommandTest.ModelStubWithConsultation(validConsult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                AddConsultCommand.MESSAGE_DUPLICATE_CONSULTATION, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation consultFromAlice \u003d new ConsultationBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation consultFromBob \u003d new ConsultationBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        AddConsultCommand addAliceCommand \u003d new AddConsultCommand(consultFromAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        AddConsultCommand addBobCommand \u003d new AddConsultCommand(consultFromBob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        AddConsultCommand addAliceCommandCopy \u003d new AddConsultCommand(consultFromAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different consultation -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * A Model stub that contains a single consultation."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private class ModelStubWithConsultation extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        private final Consultation consultation;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ModelStubWithConsultation(Consultation consult) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            requireNonNull(consult);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            consultation \u003d consult;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public boolean hasConsult(Consultation c) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            requireNonNull(c);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return consultation.isSameConsultation(c);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * A Model stub that always accept the consultation being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private class ModelStubAcceptingConsultAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        final ArrayList\u003cConsultation\u003e addedConsults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public boolean hasConsult(Consultation consultation) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            requireNonNull(consultation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return addedConsults.stream().anyMatch(consultation::isSameConsultation);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public void addConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            requireNonNull(consultation);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            addedConsults.add(consultation);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return new Tasker();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddConsultIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.getTypicalTasker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.testutil.ConsultationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class AddConsultIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        model \u003d new ModelManager(getTypicalTasker(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_newConsultation_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation validConsultation \u003d new ConsultationBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedModel.addConsultation(validConsultation);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(new AddConsultCommand(validConsultation), model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                String.format(AddConsultCommand.MESSAGE_SUCCESS, validConsultation), expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_duplicateConsultation_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation consultation \u003d model.getAddressBook().getConsultationList().get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandFailure(new AddConsultCommand(consultation), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                AddConsultCommand.MESSAGE_DUPLICATE_CONSULTATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 40,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchiveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void archive_unfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(new ArchiveCommand(), model, ArchiveCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void archive_appendedList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // archive model with add operation executed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(new ArchiveCommand(), model, ArchiveCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void archive_croppedList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // archive model with delete operation executed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(new ArchiveCommand(), model, ArchiveCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void archive_editedList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // archive model with edit operation executed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(new ArchiveCommand(), model, ArchiveCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void archive_clear_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedModel.setAddressBook(new Tasker());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.setAddressBook(new Tasker());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // archive model with edit operation executed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(new ArchiveCommand(), model, ArchiveCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AttendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " * Contains integration tests and unit tests for AttendCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "public class AttendCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static final String NEW_ATTENDANCE_STRING \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static final Attendance NEW_ATTENDANCE \u003d Attendance.fromDateString(NEW_ATTENDANCE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static final Attendance AMY_ATTENDANCE \u003d Attendance.fromDateString(VALID_ATTENDANCE_AMY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person attendedPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        attendedPerson \u003d new PersonBuilder(attendedPerson)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_AMY, NEW_ATTENDANCE_STRING).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand \u003d new AttendCommand(INDEX_FIRST_PERSON, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        String expectedMessage \u003d String.format(AttendCommand.MESSAGE_ATTEND_SUCCESS, attendedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), attendedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandSuccess(attendCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person attendedPerson \u003d new PersonBuilder(personInFilteredList)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_AMY, NEW_ATTENDANCE_STRING).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand \u003d new AttendCommand(INDEX_FIRST_PERSON, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        String expectedMessage \u003d String.format(AttendCommand.MESSAGE_ATTEND_SUCCESS, attendedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), attendedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandSuccess(attendCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void execute_nullAttendanceUnfilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand \u003d new AttendCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandFailure(attendCommand, model,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AttendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void execute_duplicateAttendanceFilteredList_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person personToAttend \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand \u003d new AttendCommand(INDEX_FIRST_PERSON, AMY_ATTENDANCE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandFailure(attendCommand, model, String.format(AttendCommand.MESSAGE_ALREADY_ATTENDED,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                personToAttend.getName(), AMY_ATTENDANCE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand \u003d new AttendCommand(outOfBoundIndex, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandFailure(attendCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * Attend filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand \u003d new AttendCommand(outOfBoundIndex, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandFailure(attendCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Index index1 \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Index index2 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand1 \u003d new AttendCommand(index1, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand2 \u003d new AttendCommand(index2, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertTrue(attendCommand1.equals(attendCommand1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand attendCommand1Copy \u003d new AttendCommand(index1, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertTrue(attendCommand1.equals(attendCommand1Copy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertFalse(attendCommand1.equals(1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertFalse(attendCommand1.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertFalse(attendCommand1.equals(attendCommand2));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        expectedModel.setAddressBook(new Tasker());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "chrisgzf": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String VALID_TELEGRAM_AMY \u003d \"amy123\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String VALID_TELEGRAM_BOB \u003d \"_bob_\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String VALID_MATRIC_NUMBER_AMY \u003d \"A0123456B\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String VALID_MATRIC_NUMBER_BOB \u003d \"A9876543C\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String VALID_ATTENDANCE_AMY \u003d \"27/03/1998\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String VALID_ATTENDANCE_BOB \u003d \"27/05/2020\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_DAY_AMY \u003d \"20/03/2019\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_DAY_BOB \u003d \"27/05/2020\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_TIME_AMY \u003d \"12:00\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_TIME_BOB \u003d \"11:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_LOCATION_AMY \u003d \"NUS Utown\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_LOCATION_BOB \u003d \"SOC Basement\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_TYPE_AMY \u003d \"personal\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String VALID_TYPE_BOB \u003d \"group\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String TELEGRAM_DESC_AMY \u003d \" \" + PREFIX_TELEGRAM + VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String TELEGRAM_DESC_BOB \u003d \" \" + PREFIX_TELEGRAM + VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String MATRIC_NUMBER_DESC_AMY \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String MATRIC_NUMBER_DESC_BOB \u003d \" \" + PREFIX_MATRIC_NUMBER + VALID_MATRIC_NUMBER_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String ATTENDANCE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String ATTENDANCE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String DAY_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DAY_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String DAY_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DAY_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String TIME_DESC_AMY \u003d \" \" + PREFIX_TIME + VALID_TIME_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String TIME_DESC_BOB \u003d \" \" + PREFIX_TIME + VALID_TIME_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String LOCATION_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_LOCATION_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String LOCATION_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_LOCATION_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String TYPE_DESC_AMY \u003d \" \" + PREFIX_TYPE + VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String TYPE_DESC_BOB \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    // \u0027.\u0027 not allowed in telegram usernames"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String INVALID_TELEGRAM_DESC \u003d \" \" + PREFIX_TELEGRAM + \"alex.yeoh\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    // missing digits in matric number"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String INVALID_MATRIC_NUMBER_DESC \u003d \" \" + PREFIX_MATRIC_NUMBER + \"A111B\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    // empty string not allowed for addresses"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    // invalid attendance date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String INVALID_ATTENDANCE_DESC \u003d \" \" + PREFIX_DATE + \"mar 27\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    // invalid time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"25:00\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    // invalid type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"one-to-one\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    // invalid consult day"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String INVALID_DAY_DESC \u003d \" \" + PREFIX_DATE + \"apr 27\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withTelegram(VALID_TELEGRAM_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withMatricNumber(VALID_MATRIC_NUMBER_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withMatricNumber(VALID_MATRIC_NUMBER_BOB)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker expectedAddressBook \u003d new Tasker(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 27,
      "-": 115,
      "rnmy": 26,
      "chrisgzf": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteConsultCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Contains integration tests (interaction with the {@code Model}) and unit tests for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * {@code DeleteConsultCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class DeleteConsultCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredConsultList().size() + 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        DeleteConsultCommand deleteConsultCommand \u003d new DeleteConsultCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertCommandFailure(deleteConsultCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        DeleteConsultCommand deleteFirstCommand \u003d new DeleteConsultCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        DeleteConsultCommand deleteSecondCommand \u003d new DeleteConsultCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        DeleteConsultCommand deleteFirstCommandCopy \u003d new DeleteConsultCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // different consultation -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 168,
      "chrisgzf": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportAttendanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "public class ExportAttendanceCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final LocalDate currentDate \u003d time.toLocalDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final String currentTime \u003d time.format(DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final String filePath \u003d String.format(\"data/attendance_%s_%s.csv\", currentDate, currentTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private final String messageSuccess \u003d String.format(ExportAttendanceCommand.MESSAGE_SUCCESS, filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void exportAttendance_unfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandSuccess(new ExportAttendanceCommand(), model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void exportAttendance_appendedList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        model.addPerson(validPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // export attendance with add operation executed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandSuccess(new ExportAttendanceCommand(), model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void exportAttendance_croppedList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // export attendance model with delete operation executed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandSuccess(new ExportAttendanceCommand(), model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void exportAttendance_editedList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        model.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // export attendance model with edit operation executed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandSuccess(new ExportAttendanceCommand(), model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void exportAttendance_clear_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        expectedModel.setAddressBook(new Tasker());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        model.setAddressBook(new Tasker());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // export attendance model with edit operation executed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertCommandSuccess(new ExportAttendanceCommand(), model, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowAttendanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " * Contains integration and unit tests for ShowAttendanceCommandTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class ShowAttendanceCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void execute_presentAttendance_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Attendance attendance \u003d Attendance.fromDateString(\"27/03/1998\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String message \u003d \"Alice Pauline was present on \" + attendance.date.toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            + \"\\nYou may view results in the Attendance tab.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        ShowAttendanceCommand showAttendanceCommand \u003d new ShowAttendanceCommand(INDEX_FIRST_PERSON, attendance);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertCommandSuccess(showAttendanceCommand, model, message, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void execute_absentAttendance_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Attendance attendance \u003d Attendance.fromDateString(\"28/03/1998\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String message \u003d \"Alice Pauline was absent on \" + attendance.date.toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            + \"\\nYou may view results in the Attendance tab.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        ShowAttendanceCommand showAttendanceCommand \u003d new ShowAttendanceCommand(INDEX_FIRST_PERSON, attendance);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertCommandSuccess(showAttendanceCommand, model, message, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 37,
      "chrisgzf": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnattendCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * Contains integration tests and unit tests for UnattendCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class UnattendCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String NEW_ATTENDANCE_STRING \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final Attendance NEW_ATTENDANCE \u003d Attendance.fromDateString(NEW_ATTENDANCE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final Attendance AMY_ATTENDANCE \u003d Attendance.fromDateString(VALID_ATTENDANCE_AMY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person personToUnattend \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        personToUnattend \u003d new PersonBuilder(personToUnattend)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_AMY, NEW_ATTENDANCE_STRING).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend \u003d new UnattendCommand(INDEX_FIRST_PERSON, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String expectedMessage \u003d String.format(UnattendCommand.MESSAGE_UNATTEND_SUCCESS, personToUnattend);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // remove attendance"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.setPerson(model.getFilteredPersonList().get(0), personToUnattend);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(unattend, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person unattendedPerson \u003d new PersonBuilder(person)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_AMY, NEW_ATTENDANCE_STRING).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend \u003d new UnattendCommand(INDEX_FIRST_PERSON, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String expectedMessage \u003d String.format(UnattendCommand.MESSAGE_UNATTEND_SUCCESS, unattendedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Tasker(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // remove attendance"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.setPerson(model.getFilteredPersonList().get(0), unattendedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandSuccess(unattend, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_nullAttendanceUnfilteredList_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend \u003d new UnattendCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        System.out.println(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnattendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandFailure(unattend, model,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnattendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_duplicateAttendanceFilteredList_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        int personIndex \u003d INDEX_FIRST_PERSON.getZeroBased();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person personToUnattend \u003d model.getAddressBook().getPersonList().get(personIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        personToUnattend \u003d new PersonBuilder(personToUnattend)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withAttendance().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        model.setPerson(model.getFilteredPersonList().get(personIndex), personToUnattend);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend \u003d new UnattendCommand(INDEX_FIRST_PERSON, AMY_ATTENDANCE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandFailure(unattend, model, String.format(UnattendCommand.MESSAGE_ALREADY_UNATTENDED,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                personToUnattend.getName(), AMY_ATTENDANCE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend \u003d new UnattendCommand(outOfBoundIndex, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandFailure(unattend, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Unattend filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend \u003d new UnattendCommand(outOfBoundIndex, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertCommandFailure(unattend, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Index index1 \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Index index2 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend1 \u003d new UnattendCommand(index1, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattend2 \u003d new UnattendCommand(index2, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(unattend1.equals(unattend1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand unattendCopy \u003d new UnattendCommand(index1, NEW_ATTENDANCE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(unattend1.equals(unattendCopy));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(unattend1.equals(1));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(unattend1.equals(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(unattend1.equals(unattend2));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PREFIX_MISSING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NUMBER_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + TELEGRAM_DESC_BOB + MATRIC_NUMBER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // single tag - all accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + TELEGRAM_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + MATRIC_NUMBER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + TELEGRAM_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + MATRIC_NUMBER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rnmy"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + TELEGRAM_DESC_AMY"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + MATRIC_NUMBER_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                String.format(MESSAGE_PREFIX_MISSING, PREFIX_NAME, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                String.format(MESSAGE_PREFIX_MISSING, PREFIX_PHONE, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                String.format(MESSAGE_PREFIX_MISSING, PREFIX_EMAIL, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "                String.format(MESSAGE_PREFIX_MISSING, PREFIX_NAME, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 10,
      "sun-yitao": 8,
      "-": 60,
      "rnmy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddConsultParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIXES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.GROUP_CONSULT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.AddConsultCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.testutil.ConsultationBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class AddConsultParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private AddConsultParser parser \u003d new AddConsultParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation expectedPerson \u003d new ConsultationBuilder(GROUP_CONSULT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                new AddConsultCommand(expectedPerson));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                new AddConsultCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void parse_duplicateFieldsPresent_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // multiple names - name flagged as duplicate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                String.format(MESSAGE_DUPLICATE_PREFIXES, PREFIX_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddConsultCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // missing day prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_DAY_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + VALID_TIME_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_DAY_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + VALID_TIME_BOB + VALID_LOCATION_BOB + VALID_TYPE_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid day"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_DAY_DESC"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + INVALID_TIME_DESC + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + INVALID_ADDRESS_DESC + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + INVALID_TYPE_DESC,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + DAY_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                        + TIME_DESC_BOB + LOCATION_DESC_BOB + TYPE_DESC_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddConsultCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 106,
      "kwannoel": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void tokenize_oneArgument() throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void tokenize_multipleArguments() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 8,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AttendCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.logic.commands.AttendCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "public class AttendCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    private AttendCommandParser parser \u003d new AttendCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertParseFailure(parser, ATTENDANCE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"-5\" + ATTENDANCE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"0\" + ATTENDANCE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        AttendCommand expectedCommand \u003d new AttendCommand(targetIndex, Attendance.fromDateString(VALID_ATTENDANCE_AMY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 57,
      "rnmy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"a\", MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "rnmy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_PREFIXES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void parse_multipleRepeatedFields_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_DUPLICATE_PREFIXES, PREFIX_PHONE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_DUPLICATE_PREFIXES, PREFIX_PHONE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertParseFailure(parser, userInput, String.format(MESSAGE_DUPLICATE_PREFIXES, PREFIX_PHONE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 7,
      "kwannoel": 7,
      "-": 144,
      "rnmy": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String INVALID_DATE_1 \u003d \"32/11/2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String INVALID_DATE_2 \u003d \"21/16/2020\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String INVALID_DATE_3 \u003d \"21/12/0000\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String INVALID_DATE_4 \u003d \"-21/12/2020\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String INVALID_DATE_5 \u003d \"30/02/2020\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String INVALID_DATE_6 \u003d \"31/06/1998\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String INVALID_TIME \u003d \"25:18\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String VALID_DATE \u003d \"22/12/2000\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    private static final String VALID_TIME \u003d \"23:59\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseDay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDay((String) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseDay_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // dd exceeds 1-31 range"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DATE_1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // MM exceeds 1-12 range"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DATE_2));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // negative values"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DATE_4));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // special dates"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DATE_5));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DATE_6));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseDay_validValueWithoutWhitespace_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Day expectedDay \u003d Day.fromDateString(VALID_DATE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseDay(VALID_DATE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseDay_validValueWithWhitespace_returnsTrimmedAttendance() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Day expectedDay \u003d Day.fromDateString(VALID_DATE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseDay(dateWithWhitespace));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseTime_validValueWithoutWhitespace_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Time expectedTime \u003d Time.fromTimeString(VALID_TIME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseTime_validValueWithWhitespace_returnsTrimmedAttendance() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Time expectedTime \u003d Time.fromTimeString(VALID_TIME);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseAttendance_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAttendance((String) null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseAttendance_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // dd exceeds 1-31 range"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_DATE_1));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // MM exceeds 1-12 range"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_DATE_2));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // invalid yyyy (0000)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_DATE_3));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // negative values"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_DATE_4));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        // special dates"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_DATE_5));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_DATE_6));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseAttendance_validValueWithoutWhitespace_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Attendance expectedAttendance \u003d Attendance.fromDateString(VALID_DATE);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertEquals(expectedAttendance, ParserUtil.parseAttendance(VALID_DATE));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public void parseAttendance_validValueWithWhitespace_returnsTrimmedAttendance() throws Exception {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        Attendance expectedAttendance \u003d Attendance.fromDateString(VALID_DATE);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertEquals(expectedAttendance, ParserUtil.parseAttendance(dateWithWhitespace));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 188,
      "rnmy": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnattendCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.logic.commands.UnattendCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class UnattendCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnattendCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private UnattendCommandParser parser \u003d new UnattendCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, ATTENDANCE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"-5\" + ATTENDANCE_DESC_AMY, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        assertParseFailure(parser, \"0\" + ATTENDANCE_DESC_AMY, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UnattendCommand expectedCommand \u003d new UnattendCommand(targetIndex,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                Attendance.fromDateString(VALID_ATTENDANCE_AMY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 58,
      "rnmy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/stubs/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.logic.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasConsult(Consultation consultation) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public boolean hasConflictingPersonalConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void addConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void deleteConsultation(Consultation target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultation(Consultation target, Consultation editedConsultation) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ObservableList\u003cConsultation\u003e getFilteredConsultList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void updateFilteredConsultList(Predicate\u003cConsultation\u003e predicate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(new Tasker(), new Tasker(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker tasker \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker differentAddressBook \u003d new Tasker();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        modelManager \u003d new ModelManager(tasker, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tasker, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // different tasker -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tasker, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tasker, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 124,
      "chrisgzf": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TaskerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "public class TaskerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private final Tasker tasker \u003d new Tasker();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(Collections.emptyList(), tasker.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tasker.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(newData, tasker);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e tasker.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tasker.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertFalse(tasker.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertTrue(tasker.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertTrue(tasker.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tasker.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        public ObservableList\u003cConsultation\u003e getConsultationList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 9,
      "-": 84,
      "chrisgzf": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(userPrefs, userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(userPrefs, new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(10, 10, 1, 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(new UserPrefs(), userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(userPrefs, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 15,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/AttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void fromDateString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // null attendance"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Attendance.fromDateString(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // invalid attendances"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Attendance.fromDateString(\"\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Attendance.fromDateString(\"hello\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // valid attendances"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertEquals(Attendance.fromDateString(\"13/01/2020\").toString(), \"13/01/2020\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Attendance.fromDateString(\"13/1/2020\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Attendance.fromDateString(\"-13/01/2020\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Attendance.fromDateString(\"13012020\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Attendance.fromDateString(\"13 01 2020\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Attendance.fromDateString(\"13    01    2020\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Attendance attendance1 \u003d Attendance.fromDateString(\"13/01/2020\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(Attendance.fromDateString(\"13/01/2020\"), attendance1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(attendance1, Attendance.fromDateString(\"13/01/2020\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(attendance1, attendance1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(attendance1, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(attendance1, Attendance.fromDateString(\"12/01/2020\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(attendance1, Attendance.fromDateString(\"13/02/2020\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(attendance1, Attendance.fromDateString(\"13/01/2021\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 23,
      "kwannoel": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"Blk 456, Den Road, #01-355\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertTrue(Address.isValidAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void equals_isSymmetric() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Address x \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Address y \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, y);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(y, x);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), y.hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 34,
      "chrisgzf": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/ConsultationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.ALICE_PERSONAL_CONSULT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.BENSON_GROUP_CONSULT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.testutil.ConsultationBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ConsultationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void isSameConsultation() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(ALICE_PERSONAL_CONSULT.isSameConsultation(ALICE_PERSONAL_CONSULT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isSameConsultation(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different time and date -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withDay(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withTime(VALID_TIME_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isSameConsultation(editedConsult));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different name \u0026 date -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withDay(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isSameConsultation(editedConsult));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same name, same day, same type (GROUP)-\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withDay(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isSameConsultation(editedConsult));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same name, same time, same day, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withLocation(VALID_LOCATION_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(ALICE_PERSONAL_CONSULT.isSameConsultation(editedConsult));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same name, same time, same day, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withLocation(VALID_LOCATION_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(ALICE_PERSONAL_CONSULT.isSameConsultation(editedConsult));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void isPersonalConsultationOnSameTiming() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(ALICE_PERSONAL_CONSULT.isPersonalConsultationOnSameTiming(ALICE_PERSONAL_CONSULT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isPersonalConsultationOnSameTiming(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different time and date -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withDay(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withTime(VALID_TIME_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isPersonalConsultationOnSameTiming(editedConsult));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different type \u0026 date -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withDay(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isPersonalConsultationOnSameTiming(editedConsult));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same name, same day, same type (GROUP)-\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withDay(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(ALICE_PERSONAL_CONSULT.isPersonalConsultationOnSameTiming(editedConsult));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same type, same time, same day, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withLocation(VALID_LOCATION_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(ALICE_PERSONAL_CONSULT.isPersonalConsultationOnSameTiming(editedConsult));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation personalCopy \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(personalCopy, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(ALICE_PERSONAL_CONSULT, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(ALICE_PERSONAL_CONSULT.hashCode(), ALICE_PERSONAL_CONSULT.hashCode());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(ALICE_PERSONAL_CONSULT, null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(ALICE_PERSONAL_CONSULT, 5);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different consultation -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(BENSON_GROUP_CONSULT, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(ALICE_PERSONAL_CONSULT.hashCode(), BENSON_GROUP_CONSULT.hashCode());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(editedConsult, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(ALICE_PERSONAL_CONSULT.hashCode(), editedConsult.hashCode());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withDay(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(editedConsult, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(ALICE_PERSONAL_CONSULT.hashCode(), editedConsult.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withTime(VALID_TIME_BOB).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(editedConsult, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(ALICE_PERSONAL_CONSULT.hashCode(), editedConsult.hashCode());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withLocation(VALID_LOCATION_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(editedConsult, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(ALICE_PERSONAL_CONSULT.hashCode(), editedConsult.hashCode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 107,
      "chrisgzf": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/DayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class DayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_DATE_STRING \u003d \"13/01/2020\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void fromDateString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null attendance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Day.fromDateString(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid attendances"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Day.fromDateString(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Day.fromDateString(\"hello\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // valid attendances"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(Day.fromDateString(VALID_DATE_STRING).toString(), VALID_DATE_STRING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Equality to null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(Day.fromDateString(VALID_DATE_STRING), null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Equality to objects of other classes / parent classes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(Day.fromDateString(VALID_DATE_STRING), new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testEquals_isReflexive() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Day x \u003d Day.fromDateString(VALID_DATE_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, x);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), x.hashCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testEquals_isSymmetric() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Day x \u003d Day.fromDateString(VALID_DATE_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Day y \u003d Day.fromDateString(VALID_DATE_STRING);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, y);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(y, x);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), y.hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testEquals_isTransitive() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Day x \u003d Day.fromDateString(VALID_DATE_STRING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Day y \u003d Day.fromDateString(VALID_DATE_STRING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Day z \u003d Day.fromDateString(VALID_DATE_STRING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, y);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(y, z);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, z);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), z.hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testCompareTo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // earlier date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(-1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            Day.fromDateString(\"27/03/1998\").compareTo("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                Day.fromDateString(\"28/03/1998\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // later date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(1,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            Day.fromDateString(\"29/03/1998\").compareTo("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                Day.fromDateString(\"28/03/1998\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // same date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            Day.fromDateString(\"29/03/1998\").compareTo("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                Day.fromDateString(\"29/03/1998\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 20,
      "chrisgzf": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_TIME_STRING \u003d \"12:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.fromTimeString(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Time.fromTimeString(invalidTime));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(Time.isValidTime(\"4 pm\")); // incorrect format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(Time.isValidTime(\"1200\")); // missing colon characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(Time.isValidTime(\"1270\")); // incorrect input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertTrue(Time.isValidTime(VALID_TIME_STRING));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(Time.isValidTime(\"23:59\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(Time.isValidTime(\"00:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Equality to null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(Time.fromTimeString(VALID_TIME_STRING), null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Equality to objects of other classes / parent classes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotEquals(Time.fromTimeString(VALID_TIME_STRING), new Object());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testEquals_isReflexive() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Time x \u003d Time.fromTimeString(VALID_TIME_STRING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, x);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), x.hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testEquals_isSymmetric() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Time x \u003d Time.fromTimeString(VALID_TIME_STRING);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Time y \u003d Time.fromTimeString(VALID_TIME_STRING);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, y);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(y, x);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), y.hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testEquals_isTransitive() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Time x \u003d Time.fromTimeString(VALID_TIME_STRING);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Time y \u003d Time.fromTimeString(VALID_TIME_STRING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Time z \u003d Time.fromTimeString(VALID_TIME_STRING);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, y);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(y, z);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, z);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), z.hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void testCompareTo() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // earlier time"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(-1,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            Time.fromTimeString(\"11:59\").compareTo("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                Time.fromTimeString(\"12:00\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // later time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(1,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            Time.fromTimeString(\"12:01\").compareTo("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                Time.fromTimeString(\"12:00\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // same time"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(0,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            Time.fromTimeString(\"12:00\").compareTo("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                Time.fromTimeString(\"12:00\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 38,
      "chrisgzf": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/TypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class TypeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void fromType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // null attendance"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Type(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Type(\"\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Type(\"hello\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        // valid attendances"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(new Type(\"personal\").toString(), \"Personal\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(new Type(\"group\").toString(), \"Group\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void equals_isSymmetric() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Type x \u003d new Type(\"personal\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Type y \u003d new Type(\"personal\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x, y);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(y, x);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(x.hashCode(), y.hashCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 22,
      "chrisgzf": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consultation/UniqueConsultationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.ALICE_DAY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.ALICE_PERSONAL_CONSULT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.ALICE_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.BENSON_GROUP_CONSULT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.GROUP_CONSULT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.PERSONAL_CONSULT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.exceptions.ConflictingGroupConsultationException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.exceptions.ConflictingPersonalConsultationException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.exceptions.ConsultationNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.exceptions.DuplicateConsultationException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.testutil.ConsultationBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class UniqueConsultationListTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private final UniqueConsultationList uniqueConsultList \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void contains_nullConsult_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueConsultList.contains(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void contains_consultNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertFalse(uniqueConsultList.contains(ALICE_PERSONAL_CONSULT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void contains_personalConsultInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(uniqueConsultList.contains(ALICE_PERSONAL_CONSULT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void contains_groupConsultInList_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(BENSON_GROUP_CONSULT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(uniqueConsultList.contains(BENSON_GROUP_CONSULT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void contains_multipleSameGroupConsultInList_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(GROUP_CONSULT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation amyGroupConsult \u003d new ConsultationBuilder(GROUP_CONSULT).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(amyGroupConsult);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(uniqueConsultList.contains(amyGroupConsult));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void contains_consultWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(uniqueConsultList.contains(editedConsult));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void add_nullConsult_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueConsultList.add(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void add_duplicateConsult_throwsDuplicateConsultationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(DuplicateConsultationException.class, () -\u003e uniqueConsultList.add(ALICE_PERSONAL_CONSULT));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void add_personalConsultWithExistingPersonalConsult_throwsConflictingPersonalConsultationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation personalConsult \u003d new ConsultationBuilder(PERSONAL_CONSULT).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(ConflictingPersonalConsultationException.class, () -\u003e uniqueConsultList.add(personalConsult));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void add_groupConsultWithExistingPersonalConsult_throwsConflictingPersonalConsultationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation groupConsult \u003d new ConsultationBuilder(PERSONAL_CONSULT).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withType(VALID_TYPE_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(ConflictingPersonalConsultationException.class, () -\u003e uniqueConsultList.add(groupConsult));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void add_groupConsultWithSameGroupConsult_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(GROUP_CONSULT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation groupConsult \u003d new ConsultationBuilder(GROUP_CONSULT).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(groupConsult);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertTrue(uniqueConsultList.contains(groupConsult));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void add_personalConsultWithExistingGroupConsult_throwsConflictingPersonalConsultationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(GROUP_CONSULT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation personalConsult \u003d new ConsultationBuilder(GROUP_CONSULT).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            .withType(VALID_TYPE_AMY).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(ConflictingPersonalConsultationException.class, () -\u003e uniqueConsultList.add(personalConsult));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void add_conflictingConsult_throwsConflictingPersonalConsultationException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Consultation conflictingConsult \u003d new ConsultationBuilder(PERSONAL_CONSULT)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            .withDay(ALICE_DAY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            .withTime(ALICE_TIME)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(ConflictingPersonalConsultationException.class, () -\u003e uniqueConsultList.add(conflictingConsult));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void add_groupConsultWithSameGroupConsultDifferentLocation_throwsConflictingGroupConsultationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(GROUP_CONSULT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation groupConsult \u003d new ConsultationBuilder(GROUP_CONSULT).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withLocation(VALID_LOCATION_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(ConflictingGroupConsultationException.class, () -\u003e uniqueConsultList.add(groupConsult));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult_nullConsultation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueConsultList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .setConsultation(null, ALICE_PERSONAL_CONSULT)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        );"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult_nullEditedConsult_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueConsultList"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .setConsultation(ALICE_PERSONAL_CONSULT, null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult_targetConsultNotInList_throwsConsultationNotFoundException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(ConsultationNotFoundException.class, () -\u003e uniqueConsultList"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .setConsultation(ALICE_PERSONAL_CONSULT, ALICE_PERSONAL_CONSULT));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult_editedConsultIsSameConsult_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.setConsultation(ALICE_PERSONAL_CONSULT, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UniqueConsultationList uniqueConsultationList \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultationList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(uniqueConsultationList, uniqueConsultList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(uniqueConsultationList.hashCode(), uniqueConsultList.hashCode());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult_editedConsultHasSameIdentity_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Consultation editedConsult \u003d new ConsultationBuilder(ALICE_PERSONAL_CONSULT).withType(VALID_TYPE_BOB)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.setConsultation(ALICE_PERSONAL_CONSULT, editedConsult);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UniqueConsultationList expectedUniqueConsultationList \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedUniqueConsultationList.add(editedConsult);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(expectedUniqueConsultationList, uniqueConsultList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(expectedUniqueConsultationList.hashCode(), uniqueConsultList.hashCode());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult_editedConsultHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.setConsultation(ALICE_PERSONAL_CONSULT, BENSON_GROUP_CONSULT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UniqueConsultationList expectedUniquePersonList \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedUniquePersonList.add(BENSON_GROUP_CONSULT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueConsultList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(expectedUniquePersonList.hashCode(), uniqueConsultList.hashCode());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsult_editedConsultHasNonUniqueIdentity_throwsDuplicateConsultationException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(BENSON_GROUP_CONSULT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(DuplicateConsultationException.class, () -\u003e uniqueConsultList"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .setConsultation(ALICE_PERSONAL_CONSULT, BENSON_GROUP_CONSULT));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void remove_nullConsult_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueConsultList.remove(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void remove_consultDoesNotExist_throwsConsultationNotFoundException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(ConsultationNotFoundException.class, () -\u003e uniqueConsultList.remove(ALICE_PERSONAL_CONSULT));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void remove_existingConsult_removesConsult() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.remove(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UniqueConsultationList expectedUniqueConsultationList \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(expectedUniqueConsultationList, uniqueConsultList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(expectedUniqueConsultationList.hashCode(), uniqueConsultList.hashCode());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsults_nullUniqueConsultationList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueConsultList"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .setConsultations((UniqueConsultationList) null));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsults_uniqueConsultationList_replacesOwnListWithProvidedUniqueConsultationList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UniqueConsultationList expectedUniqueConsultationList \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedUniqueConsultationList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.setConsultations(expectedUniqueConsultationList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(expectedUniqueConsultationList, uniqueConsultList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(expectedUniqueConsultationList.hashCode(), uniqueConsultList.hashCode());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultations_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueConsultList.setConsultations((List\u003cConsultation\u003e) null));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultations_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        List\u003cConsultation\u003e consultationList \u003d Collections.singletonList(BENSON_GROUP_CONSULT);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        uniqueConsultList.setConsultations(consultationList);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        UniqueConsultationList expectedUniqueConsultationList \u003d new UniqueConsultationList();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        expectedUniqueConsultationList.add(BENSON_GROUP_CONSULT);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertEquals(expectedUniqueConsultationList, uniqueConsultList);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(expectedUniqueConsultationList.hashCode(), uniqueConsultList.hashCode());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void setConsultations_listWithDuplicateConsultations_throwsDuplicateConsultationException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        List\u003cConsultation\u003e listWithDuplicateConsultations \u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                Arrays.asList(ALICE_PERSONAL_CONSULT, ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(DuplicateConsultationException.class, () -\u003e uniqueConsultList"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .setConsultations(listWithDuplicateConsultations));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void iterator_emptyList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Iterator\u003cConsultation\u003e iterator \u003d uniqueConsultList.iterator();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertFalse(iterator.hasNext());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(NoSuchElementException.class, iterator::next);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void iterator_nonEmptyList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        uniqueConsultList.add(ALICE_PERSONAL_CONSULT);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Iterator\u003cConsultation\u003e iterator \u003d uniqueConsultList.iterator();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertTrue(iterator.hasNext());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(ALICE_PERSONAL_CONSULT, iterator.next());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 234,
      "chrisgzf": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatricNumberTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class MatricNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MatricNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void constructor_invalidMatricNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        String invalidMatricNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new MatricNumber(invalidMatricNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void isValidMatricNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MatricNumber.isValidMatricNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"Joe\")); // 3 characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(MatricNumber.isValidMatricNumber(\"B0001111Z\")); // Start with B instead"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(MatricNumber.isValidMatricNumber(\"A1234000Z\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(MatricNumber.isValidMatricNumber(\"A4321000A\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // different phone and email and MatricNumber -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .withMatricNumber(VALID_MATRIC_NUMBER_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 3,
      "kwannoel": 9,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TelegramTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "public class TelegramTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Telegram(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void constructor_invalidTelegram_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        String invalidTelegram \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Telegram(invalidTelegram));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public void isValidTelegram() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Telegram.isValidTelegram(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"Joe\")); // 4 characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"000011112222333355556666777788889\")); // 33 characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"Joeyy\")); // 5 characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"00001111222233335555666677778888\")); // 32 characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"Jackson123\")); // With numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"Jackson_123\")); // With underscores"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kwannoel": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(tag1, new Tag(\"tag\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertEquals(tag1, tag1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(tag1, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "        assertNotEquals(tag1, new Tag(\"TAG\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sun-yitao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sun-yitao": 12,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedConsultationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.storage.JsonAdaptedConsultation.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.TypicalConsults.BENSON_GROUP_CONSULT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.consultation.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.consultation.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.testutil.TypicalConsults;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "public class JsonAdaptedConsultationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String INVALID_NAME \u003d \"B@ns0n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String INVALID_DAY \u003d \"next Monday\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String INVALID_TIME \u003d \"25:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final Consultation BENSON_CONSULT \u003d BENSON_GROUP_CONSULT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_DAY \u003d TypicalConsults.BENSON_DAY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_TIME \u003d TypicalConsults.BENSON_TIME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_LOCATION \u003d TypicalConsults.BENSON_LOCATION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String VALID_CONSULT_TYPE \u003d TypicalConsults.BENSON_CONSULT_TYPE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_validConsultationDetails_returnsConsultation() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Consultation consultation \u003d new JsonAdaptedConsultation(BENSON_CONSULT).toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(consultation, BENSON_CONSULT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(INVALID_NAME, VALID_DAY, VALID_TIME,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            VALID_LOCATION, VALID_CONSULT_TYPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(null, VALID_DAY, VALID_TIME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            VALID_LOCATION, VALID_CONSULT_TYPE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_invalidDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(VALID_NAME, INVALID_DAY, VALID_TIME,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            VALID_LOCATION, VALID_CONSULT_TYPE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_nullDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(VALID_NAME, null, VALID_TIME,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            VALID_LOCATION, VALID_CONSULT_TYPE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_invalidTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(VALID_NAME, VALID_DAY, INVALID_TIME,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            VALID_LOCATION, VALID_CONSULT_TYPE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_nullTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(VALID_NAME, VALID_DAY, null,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            VALID_LOCATION, VALID_CONSULT_TYPE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(VALID_NAME, VALID_DAY, VALID_TIME,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            null, VALID_CONSULT_TYPE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void toModelType_nullConsultType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        JsonAdaptedConsultation consultation \u003d new JsonAdaptedConsultation(VALID_NAME, VALID_DAY, VALID_TIME,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            VALID_LOCATION, null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consultation::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String INVALID_TELEGRAM \u003d \"@@a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String INVALID_MATRIC_NUMBER \u003d \"x00239414\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String VALID_TELEGRAM \u003d BENSON.getTelegram().telegram;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private static final String VALID_MATRIC_NUMBER \u003d BENSON.getMatricNumber().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final List\u003cJsonAdaptedAttendance\u003e VALID_ATTENDANCE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        BENSON.getAttendances().stream().map(JsonAdaptedAttendance::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TELEGRAM, VALID_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                        VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                VALID_TELEGRAM, VALID_MATRIC_NUMBER, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TELEGRAM, VALID_MATRIC_NUMBER,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                        VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                VALID_TELEGRAM, VALID_MATRIC_NUMBER, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                        VALID_TELEGRAM, VALID_MATRIC_NUMBER, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                VALID_TELEGRAM, VALID_MATRIC_NUMBER, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void toModelType_invalidTelegram_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                        INVALID_TELEGRAM, VALID_MATRIC_NUMBER, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String expectedMessage \u003d Telegram.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void toModelType_nullTelegram_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                null, VALID_MATRIC_NUMBER, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Telegram.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void toModelType_invalidMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                        VALID_TELEGRAM, INVALID_MATRIC_NUMBER, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String expectedMessage \u003d MatricNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        assertThrows(IllegalArgumentException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public void toModelType_nullMatricNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                VALID_TELEGRAM, null, VALID_TAGS, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatricNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                        VALID_TELEGRAM, VALID_MATRIC_NUMBER, invalidTags, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 33,
      "-": 91,
      "chrisgzf": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(original, new Tasker(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(original, new Tasker(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(original, new Tasker(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Saves {@code tasker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook tasker, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "                    .saveAddressBook(tasker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new Tasker(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "chrisgzf": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "chrisgzf": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"tasker.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "chrisgzf": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(original, new Tasker(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "chrisgzf": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": " *     {@code Tasker ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private Tasker tasker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker \u003d new Tasker();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public AddressBookBuilder(Tasker tasker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this.tasker \u003d tasker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Adds a new {@code Person} to the {@code Tasker} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        tasker.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public Tasker build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return tasker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "chrisgzf": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConsultationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Address;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * A utility class to help with building Consultation objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class ConsultationBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"20/10/2020\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"SOC Basement\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"personal\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Day date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Address location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Creates a {@code ConsultationBuilder} with the default details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        date \u003d Day.fromDateString(DEFAULT_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        time \u003d Time.fromTimeString(DEFAULT_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        location \u003d new Address(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Initializes the ConsultationBuilder with the data of {@code consult}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationBuilder(Consultation consult) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        name \u003d consult.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        date \u003d consult.getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        time \u003d consult.getTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        location \u003d consult.getLocation();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        type \u003d consult.getType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Sets the {@code Name} of the {@code Consultation} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Sets the {@code Day} of the {@code Consultation} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationBuilder withDay(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.date \u003d Day.fromDateString(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Sets the {@code Time} of the {@code Consultation} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationBuilder withTime(String time) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.time \u003d Time.fromTimeString(time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Sets the {@code Location} of the {@code Consultation} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.location \u003d new Address(location);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Sets the {@code Type} of the {@code Consultation} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public ConsultationBuilder withType(String type) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * Class builder."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     * @return Consultation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public Consultation build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new Consultation(name, date, time, location, type);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        descriptor.setTelegram(person.getTelegram());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        descriptor.setMatricNumber(person.getMatricNumber());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        descriptor.setAttendances(person.getAttendances());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * Sets the {@code Telegram} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public EditPersonDescriptorBuilder withTelegram(String telegram) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        descriptor.setTelegram(new Telegram(telegram));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * Sets the {@code MatricNumber} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public EditPersonDescriptorBuilder withMatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        descriptor.setMatricNumber(new MatricNumber(matricNumber));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Parses the {@code attendances} into a {@code SortedSet\u003cAttendance\u003e} and set it to the {@code"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * EditPersonDescriptor}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public EditPersonDescriptorBuilder withAttendances(String... attendances) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        SortedSet\u003cAttendance\u003e attendanceSet \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "            new TreeSet\u003c\u003e(Stream.of(attendances).map(Attendance::fromDateString).collect(Collectors.toSet()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        descriptor.setAttendances(attendanceSet);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "rnmy": 15,
      "chrisgzf": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "import seedu.address.model.person.MatricNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.person.Telegram;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String DEFAULT_TELEGRAM \u003d \"alice\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public static final String DEFAULT_MATRIC_NUMBER \u003d \"A1234567H\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private Telegram telegram;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    private MatricNumber matricNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private SortedSet\u003cAttendance\u003e attendances;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        telegram \u003d new Telegram(DEFAULT_TELEGRAM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        matricNumber \u003d new MatricNumber(DEFAULT_MATRIC_NUMBER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        attendances \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        telegram \u003d personToCopy.getTelegram();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        matricNumber \u003d personToCopy.getMatricNumber();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        attendances \u003d new TreeSet\u003c\u003e(personToCopy.getAttendances());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Sets the {@code Telegram} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public PersonBuilder withTelegram(String telegram) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.telegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "     * Sets the {@code MatricNumber} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    public PersonBuilder withMatricNumber(String matricNumber) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        this.matricNumber \u003d new MatricNumber(matricNumber);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kwannoel"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kwannoel"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rnmy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rnmy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Parses the {@code attendances} into a {@code SortedSet\u003cAttendances\u003e} and set it to the {@code Person} that we are"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public PersonBuilder withAttendance(String... attendances) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        this.attendances \u003d SampleDataUtil.getAttendanceSet(attendances);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        return new Person(name, phone, email, telegram, matricNumber, tags, attendances);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 1,
      "kwannoel": 16,
      "-": 84,
      "rnmy": 10,
      "chrisgzf": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        sb.append(PREFIX_TELEGRAM + person.getTelegram().telegram + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        sb.append(PREFIX_MATRIC_NUMBER + person.getMatricNumber().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        descriptor.getTelegram().ifPresent(telegram -\u003e sb.append(PREFIX_TELEGRAM).append(telegram.telegram)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            .append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        descriptor.getMatricNumber().ifPresent(matricNumber -\u003e sb.append(PREFIX_MATRIC_NUMBER)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rnmy"
        },
        "content": "            .append(matricNumber.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "rnmy": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalConsults.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "import seedu.address.model.consultation.Consultation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " * A utility class containing a list of {@code Consultation} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "public class TypicalConsults {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String ALICE_DAY \u003d \"10/10/2020\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String ALICE_TIME \u003d \"18:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String ALICE_LOCATION \u003d \"Tembusu College\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String ALICE_CONSULT_TYPE \u003d \"personal\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String BENSON_DAY \u003d \"12/10/2020\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String BENSON_TIME \u003d \"10:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String BENSON_LOCATION \u003d \"Kent Ridge Drive\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final String BENSON_CONSULT_TYPE \u003d \"group\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final Consultation ALICE_PERSONAL_CONSULT \u003d new ConsultationBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withName(ALICE.getName().toString())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withDay(ALICE_DAY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withTime(ALICE_TIME)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withLocation(ALICE_LOCATION)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withType(ALICE_CONSULT_TYPE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static final Consultation BENSON_GROUP_CONSULT \u003d new ConsultationBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withName(BENSON.getName().toString())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withDay(BENSON_DAY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withTime(BENSON_TIME)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withLocation(BENSON_LOCATION)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withType(BENSON_CONSULT_TYPE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    // Manually added - Consultation\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final Consultation PERSONAL_CONSULT \u003d new ConsultationBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withDay(VALID_DAY_AMY).withTime(VALID_TIME_AMY).withLocation(VALID_LOCATION_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withType(VALID_TYPE_AMY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    public static final Consultation GROUP_CONSULT \u003d new ConsultationBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withDay(VALID_DAY_BOB).withTime(VALID_TIME_BOB).withLocation(VALID_LOCATION_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withType(VALID_TYPE_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    private TypicalConsults() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Returns a {@code Tasker} with all the typical consultations."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @return a {@code Tasker} with all the typical consultations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static Tasker getTypicalTasker() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        Tasker ab \u003d new Tasker();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        for (Consultation consultation : getTypicalConsultations()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "            ab.addConsultation(consultation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Returns a list of typical {@code Consultation}s."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * @return list of typical {@code Consultation}s"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static List\u003cConsultation\u003e getTypicalConsultations() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_PERSONAL_CONSULT, BENSON_GROUP_CONSULT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 49,
      "chrisgzf": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NUMBER_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rnmy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import seedu.address.model.Tasker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(\"alice@example.com\").withTelegram(\"alice_p\").withMatricNumber(\"A1234567B\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withAttendance(\"27/03/1998\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rnmy"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(\"johnd@example.com\").withTelegram(\"bm_99\").withMatricNumber(\"A3256548H\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withTags(\"owesMoney\", \"friends\").withAttendance(\"27/03/1998\", \"27/04/1998\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(\"heinz@example.com\").withTelegram(\"cKurzzz\").withMatricNumber(\"A9876543D\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withAttendance(\"27/03/1998\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withTelegram(\"12345\").withMatricNumber(\"A1010101B\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withTags(\"friends\").withAttendance(\"27/03/1998\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(\"werner@example.com\").withTelegram(\"ElleMeyer\").withMatricNumber(\"A9999999F\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withAttendance(\"27/03/1998\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(\"lydia@example.com\").withTelegram(\"Fiona_Kunz_\").withMatricNumber(\"A5763762P\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withAttendance(\"27/03/1998\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(\"anna@example.com\").withTelegram(\"_gbest\").withMatricNumber(\"A6372632E\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        .withAttendance(\"27/03/1998\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withTelegram(VALID_TELEGRAM_AMY).withMatricNumber(VALID_MATRIC_NUMBER_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rnmy"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withTelegram(VALID_TELEGRAM_BOB).withMatricNumber(VALID_MATRIC_NUMBER_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rishi5154"
        },
        "content": "        .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "     * Returns an {@code Tasker} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public static Tasker getTypicalAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        Tasker ab \u003d new Tasker();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rishi5154": 4,
      "-": 52,
      "rnmy": 15,
      "chrisgzf": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String COMMAND_1 \u003d \"Testing 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private static final String COMMAND_2 \u003d \"Testing 2\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void commandHistorySingleton() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Initialisation of singleton"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        commandHistory \u003d CommandHistory.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertNotNull(commandHistory);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Fetch previous command - non-existent"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(Optional.empty(), commandHistory.fetchPrevious());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Fetch next command - non-existent"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(Optional.empty(), commandHistory.fetchNext());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Add new command to history - null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e commandHistory.push(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Add new valid command to history"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        commandHistory.push(COMMAND_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Fetch previous command a few times - should get the only command in history"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchPrevious().get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchPrevious().get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchPrevious().get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Fetch next command a few times - should get the only command in history"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchNext().get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchNext().get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchNext().get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Add another new valid command to history"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        commandHistory.push(COMMAND_2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Fetch previous commands - commands should match and should \"roll over\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_2, commandHistory.fetchPrevious().get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchPrevious().get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_2, commandHistory.fetchPrevious().get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        // Fetch next commands - commands should match and should \"roll over\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchNext().get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_2, commandHistory.fetchNext().get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(COMMAND_1, commandHistory.fetchNext().get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisgzf": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void constructor_validFileUrlString_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(VALID_FILE_PATH).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    public void constructor_validFileUrlStringWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(VALID_FILE_WITH_FX_ROOT_PATH, root).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "chrisgzf": 11
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisgzf"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "chrisgzf": 1
    }
  }
]
