[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Covigent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-1/tp/actions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Check out our [User Guide](https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html) to get started."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "-": 3,
      "itssodium": 8
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    toolVersion \u003d \u00278.36.2\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    String jUnitVersion \u003d \u00275.7.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    testImplementation group: \u0027org.mockito\u0027, name: \u0027mockito-core\u0027, version: \u00273.5.13\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    archiveFileName \u003d \u0027covigent.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "### Wee Yee Hong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cimg src\u003d\"images/w-yeehong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "[[Github](https://github.com/w-yeehong)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Responsibilities: Project Coordination"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "### Ge Wai Lok"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003cimg src\u003d\"images/raymondge.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "[[github](http://github.com/raymondge)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "### Noorul Azlina"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003cimg src\u003d\"images/itssodium.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "[[github](http://github.com/itssodium)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### Chiam Yun Qing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cimg src\u003d\"images/chiamyunqing.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[[Github](https://github.com/chiamyunqing)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "### Lee Ming De"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003cimg src\u003d\"images/leemingde.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "[[Github](http://github.com/LeeMingDe)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Responsibilities: Integration (version the code, maintain the code repository and integrate various parts into a software)"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "LeeMingDe": 4,
      "chiamyunqing": 4,
      "-": 33,
      "raymondge": 6,
      "itssodium": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Needs to manage a significant number of patients and their tasks"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Needs to manage a significant number of rooms"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Wants to keep track of patients and their tasks efficiently"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Wants to look up patients, rooms and tasks details quickly"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Prefers desktop apps over other types"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Prefers all information to be available at one place"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Is reasonably comfortable using Command Line Interface (CLI) apps"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Covigent is a handy tool for quarantine facility managers to manage the rooms and patients in the quarantine facility with increased productivity."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Covigent stores and retrieves information faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | key in new patient information | better serve them                |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | edit patient information       | update his/her health status                                                                  |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | key in new task information    | keep track of the details of the tasks that I must complete                                  |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* * *`  | staff of a quarantine facility       | view which rooms are empty     |allocate patients to them |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* *`    | staff of the quarantine facility     | indicate that I have completed the task in the room | let other staff know that they no longer have to handle them"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* *`      | staff of a quarantine facility | find out all the outstanding tasks left in each room |  serve the quarantined individuals better                                               |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "| `* *` | staff of a quarantine facility | quickly search through patient information | find the patients that match my criteria"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "(For all use cases below, the **System** is`Covigent` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Use case: Allocates a patient to a room**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. User requests to add a patient into the system."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. System adds the patient."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. User requests to allocate the patient to a specified room."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "4. System adds the patient to the specified room number."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* 4a. System realises that the specified room is not empty."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   * 4a1. System displays an error message."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Use case: Edit a patient**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. User requests to edit a patient."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "2. User inputs the new information about the patient."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "3. System edits the patient information to the new information."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "4. System saves the new patient information."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* 2a. System realises that no optional fields are inputted."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   * 2a1. System displays an error message."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Use case: Search a patient**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "1. User requests to search patients with a criteria."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "2. System search the patients with the inputted criteria."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "3. System shows the search results."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* 2a. System realises that no such patient is recorded"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   * 2a1. System displays an error message."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "4. Should work even without internet connection."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "5. Should respond to commands in 3 seconds."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Patient**: An individual residing in the quarantine facility"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* **Task**: Task is to be completed by staff of the quarantine facility"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 32,
      "chiamyunqing": 31,
      "-": 331
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### Covigent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W12-1/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Check out our [User Guide](https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html) to get started."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 11
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "# Covigent - User Guide"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. [Introduction](#1-introduction)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "2. [Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "3. [Features](#3-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.1  [Command Format](#31-command-format)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.2  [Add a patient: `addpatient`](#32-add-a-patient-addpatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.3  [Delete a patient: `deletepatient`](#33-delete-a-patient-deletepatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.4  [Edit a patient: `editpatient`](#34-edit-a-patient-editpatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.5  [Search information: `searchpatient`](#35-search-information-searchpatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.6  [List all patients: `listpatient`] (#36-list-all-patients-listpatient)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.7  [Initialize rooms in hotel: `initRooms`](#37-initialize-rooms-in-hotel-initrooms)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.8  [Lists the current rooms: `listRoom`](#38-lists-the-current-rooms-listroom)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.9  [Find the first free room: `findRoom`](#39-find-the-first-free-room-findroom)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.10 [Search room: `searchroom`] (#310-search-room-searchroom)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.11 [Allocate patient to room or edit room: `editroom`](#311-allocate-patient-to-room-or-edit-room-editroom)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.12 [Add a task to a room: `addtask`](#312-add-a-task-to-a-room-addtask)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.13 [Delete a task from a room: `deletetask`](#313-delete-a-task-from-a-room-deletetask)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.14 [Edit a task in a room: `edittask`](#314-edit-a-task-in-a-room-edittask)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.15 [Searches all tasks before the given date: `searchtask`](#315-search-tasks-before-a-date-searchtask)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.16 [View help: `help`](#316-view-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    3.17 [Save the data](#317-save-the-data)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " 4. [FAQ](#4-faq)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " 5. [Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facility. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. (*Coming soon*) Download the latest `covigent.jar` from [here](https://github.com)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   * **`addpatient`** `n/John Doe t/37.4 d/20200910-20200924 p/98765432 a/35` : Adds a quarantined individual named `John Doe` to the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "   * **`editpatient`** `Mary t/36.7 p/91234567` : Updates the temperature and phone number of an individual named `Mary` to 36.7 and 91234567 respectively."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "1. Refer to the [Features](#3-features) below for details of each command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.1 Command Format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  e.g. in `addpatient n/NAME`, `NAME` is a parameter which can be used as `addpatient n/John Doe`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  e.g `n/NAME [c/COMMENT]` can be used as `n/John Doe c/Is vegan` or as `n/John Doe`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.2 Add a patient: `addpatient`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Adds a quarantined individual to the application."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Format: `addpatient n/NAME t/TEMPERATURE d/PERIOD_OF_STAY p/PHONE_NUMBER a/AGE [c/COMMENT]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Adds a quarantined individual with the specified name, temperature, period of stay, phone number and age."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Temperature must be to 1 decimal place (e.g. 37.0 instead of 37)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Period of stay is in the format YYYYMMDD-YYYYMMDD."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* It is optional to include the comment field for the quarantined individual."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `addpatient n/John Doe p/98765432 t/37.4 d/20200910-20200924 a/35`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `addpatient n/Betsy Crowe t/36.5 d/20201001-20201014 p/91234567 a/19 c/Is asthmatic`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.3 Delete a patient: `deletepatient`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Deletes an existing patient in the application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Format: `deletepatient NAME`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Deletes the patient with the specified `NAME`. The name refers to the name of the patient inputted into the application earlier. The name **must match exactly with the name of the patient**."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `NAME` is case-insensitive."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `deletepatient Mary Doe` Deletes the patient record of Mary Doe from the application."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.4 Edit a patient: `editpatient`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Edits an existing patient in the application."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Format: `editpatient NAME [n/NAME] [t/TEMPERATURE] [d/PERIOD_OF_STAY] [p/PHONE_NUMBER] [a/AGE] [c/COMMENT]`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* Edits the patient with the specified `NAME`. The name refers to the name of the patient inputted into the application earlier. The name **must match exactly with the name of the patient**."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `NAME` is case-insensitive."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `TEMPERATURE` must be to 1 decimal place (e.g. 37.0 instead of 37)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `PERIOD_OF_STAY` is in the format `YYYYMMDD-YYYYMMDD`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "*  `editpatient john doe p/91234567` Edits the phone number of john doe to be `91234567`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "*  `editpatient alex t/36.7 a/21 d/20200303-20200315` Edits the temperature, age and period of stay of alex to be `36.7`, `21` and `20200303-20200315` respectively."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.5 Search information: `searchpatient`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Searches the patients that matches the given criteria in the application."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Format: `searchpatient [n/NAME] [tr/TEMPERATURE_RANGE]`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Only one of the fields can be provided."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* The temperature range is inclusive of start and end temperatures."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raymondge"
        },
        "content": "*  `searchpatient n/john` Searches patients with a name John."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raymondge"
        },
        "content": "*  `searchpatient tr/36.5-36.7` Searches patients with temperature 36.5 to 36.7 degree, celsius, both inclusive."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.6 List all patients: `listpatient`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Shows a list of all patients in the patient tab."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Format: `listpatient`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.7 Initialize rooms in hotel: `initRooms`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Initializes the number of rooms in the quarantine facility to the app, if there was data given previously, they would"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "be stored."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Format: `initRooms NUMBER_OF_ROOMS`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Adds NUMBER_OF_ROOMS rooms into the hotel system"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* `initRooms 123`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": "* `initRooms 400`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.8 Lists the current rooms: `listRoom`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Lists all the rooms in the hotel."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `listRoom`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.9 Find the first free room: `findRoom`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Finds the room with the lowest room number that is free for use."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Format: `findRoom`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Finds the room number of least value that can be safely used for accommodation"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.10 Search room: `searchroom`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Searches for the room with the specified room number."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Format `searchRoom ROOM_NUMBER`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "* `searchRoom 15`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.11 Allocate patient to room or edit room: `editroom`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Allocates a patient to a room or edits an existing room in the application."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "Format: `editroom ROOM_NUMBER [r/NEW_ROOM_NUMBER] [p/PATIENT_NAME]`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Edits the room with the specified `ROOM_NUMBER`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `PATIENT_NAME` must match exactly with the patient name that was inputted into the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `PATIENT_NAME` is case-insensitive."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* Remove patient from room by inputting a `-` for `PATIENT_NAME`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* A room with the `ROOM_NUMBER` must be present."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `editroom 1 r/2 p/alex`. Changes the room number from #1 to #2. Afterwards, allocates alex to Room #2."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `editroom 1 p/alex`. Allocates alex to Room #1."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `editroom 1 p/-`. Removes the patient from the Room #1."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "* `editroom 1 r/3 p/-`. Changes the room number from #1 to #3. Afterwards, removes the patient from Room #3."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.12 Add a task to a room: `addtask`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Adds a task to a room."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `addtask d/DESCRIPTION r/ROOM_NUMBER [dd/DUE_DATE]`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Adds a task with the specified description to the room with the specified room number."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Due date is optional and defaults to \"-\" if not provided."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Due date can be in the any of the following formats:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * `YYYYMMDD` (e.g. 20210131)."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * `YYYYMMDD HHmm` (e.g. 20210131 2359)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * `D-M-YYYY` (e.g. 31-1-2021 or 31-01-2021)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "  * `D-M-YYYY HHmm` (e.g. 31-1-2021 2359 or 31-01-2021 2359)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If the time is not given for a due date, it defaults to 0000 (12am)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `addtask d/Remind Alice to change bedsheets. r/5` Adds a task with description \"Remind Alice to change bedsheets.\" to Room #5."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `addtask d/Running low on masks and needs to be restocked. r/1 dd/12-1-2021` Adds a task with description \"Running low on masks and needs to be restocked.\" and due date \"12 Jan 2021 1200\" to Room #1."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.13 Delete a task from a room: `deletetask`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Deletes a task from a room."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `deletetask r/ROOM_NUMBER t/TASK_NUMBER`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Deletes the task with the `TASK_NUMBER` from the room with the `ROOM_NUMBER`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* A room with the `ROOM_NUMBER` must be present."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* A task with the `TASK_NUMBER` must be present in the room."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `deletetask r/1 t/3` Deletes the third task of Room #1."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.14 Edit a task in a room: `edittask`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Edits a task in a room."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Format: `edittask r/ROOM_NUMBER t/TASK_NUMBER [d/DESCRIPTION] [dd/DUE_DATE]`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Edits the task with the `TASK_NUMBER` in the room with the `ROOM_NUMBER`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* Remove patient from room by inputting a `-` for `PATIENT_NAME`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* A room with the `ROOM_NUMBER` must be present."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* A task with the `TASK_NUMBER` must be present in the room."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If \"-\" is provided for due date, the original due date value will be cleared."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Due date can be in the any of the following formats:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `YYYYMMDD` (e.g. 20210131)."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `YYYYMMDD HHmm` (e.g. 20210131 2359)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `D-M-YYYY` (e.g. 31-1-2021 or 31-01-2021)."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `D-M-YYYY HHmm` (e.g. 31-1-2021 2359 or 31-01-2021 2359)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* If the time is not given for a due date, it defaults to 0000 (12am)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `edittask r/5 t/1 dd/-` Removes the due date from the first task in Room #5."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "* `edittask r/1 t/3 d/Running low on masks and needs to be restocked. dd/12-1-2021` Modifies the third task in Room #1 to have the description \"Running low on masks and needs to be restocked.\" and due date \"12 Jan 2021 1200\"."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.15 Search tasks before a date: `searchtask`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Search all tasks before a date."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Format: `searchtask dd/DUE_DATE`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* Due date can be in the any of the following formats:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `YYYYMMDD` (e.g. 20210131)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `YYYYMMDD HHmm` (e.g. 20210131 2359)."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `D-M-YYYY` (e.g. 31-1-2021 or 31-01-2021)."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "raymondge"
        },
        "content": "  * `D-M-YYYY HHmm` (e.g. 31-1-2021 2359 or 31-01-2021 2359)."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "raymondge"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "raymondge"
        },
        "content": "* `searchtask dd/12-1-2021` Search all tasks before 12-1-2021."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.16 View help: `help`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "### 3.17 Save the data"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "Covigent data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Covigent home folder."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "## 5. Command summary"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Add Patient** | `addpatient n/NAME t/TEMPERATURE d/PERIOD_OF_STAY p/PHONE_NUMBER a/AGE [c/COMMENT]` \u003cbr\u003e e.g.,`addpatient n/Betsy Crowe t/36.5 d/20201001-20201014 p/91234567 a/19 c/Is asthmatic`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Edit Patient** | `editpatient NAME [n/NAME] [t/TEMPERATURE] [d/PERIOD_OF_STAY] [p/PHONE_NUMBER] [a/AGE] [c/COMMENT]`\u003cbr\u003e e.g.,`editpatient James Lee t/36.5`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "itssodium"
        },
        "content": "**Initialize Rooms** | `initRooms NUMBER_OF_ROOMS` \u003cbr\u003e e.g., `addRooms 123`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Search Patient** | `searchpatient [n/NAME] [tr/TEMPERATURE_RANGE]` \u003cbr\u003e e.g., `searchpatient tr/36.5-36.7`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**List Patient** | `listpatient`\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Add Rooms** | `addRooms NUMBER_OF_ROOMS` \u003cbr\u003e e.g., `addRooms 123`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**List Room** | `listRoom` \u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Find Room** | `findRoom` \u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "**Edit Room** | `editroom ROOM_NUMBER [r/NEW_ROOM_NUMBER] [p/PATIENT_NAME]` \u003cbr\u003e e.g., `editroom 1 r/2 p/alex`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "**Search Room** | `searchRoom ROOM_NUMBER`\u003cbr\u003e e.g., `searchRoom 15`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Add Task to Room** | `addtask d/DESCRIPTION r/ROOM_NUMBER [dd/DUE_DATE]` \u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Delete Task from Room** | `deletetask r/ROOM_NUMBER t/TASK_NUMBER` \u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Edit Task in Room** | `edittask r/ROOM_NUMBER t/TASK_NUMBER [d/DESCRIPTION] [dd/DUE_DATE]` \u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "raymondge"
        },
        "content": "**Search Task** | `searchtask dd/DUE_DATE` \u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 42,
      "LeeMingDe": 26,
      "chiamyunqing": 93,
      "-": 111,
      "raymondge": 30,
      "itssodium": 6
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "title: Covigent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "**Covigent is a desktop app for managing information of quarantined individuals and the tasks to be done by staff of the quarantine facilities**. It is optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you type fast, Covigent can improve your efficiency in managing your patients and tasks instead of using traditional GUI apps."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "Check out our [User Guide](https://ay2021s1-cs2103t-w12-1.github.io/tp/UserGuide.html) to get started."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.storage.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.storage.JsonRoomOccupancyStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.storage.JsonTaskOccupancyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.storage.PatientRecordsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CovigentApp ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecordsStorage patientRecordsStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new JsonPatientRecordsStorage(userPrefs.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage roomOccupancyStorage \u003d new JsonRoomOccupancyStorage("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                userPrefs.getRoomsOccupiedFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonTaskOccupancyStorage taskOccupancyStorage \u003d new JsonTaskOccupancyStorage("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                userPrefs.getTaskOccupiedFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        storage \u003d new StorageManager(patientRecordsStorage,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                userPrefsStorage, roomOccupancyStorage, taskOccupancyStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s covigent app and RoomList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * The data from the sample covigent app and covigentApp will be used instead if {@code storage}\u0027s covigent app is"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * not found,or an empty covigent app will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Optional\u003cReadOnlyPatientRecords\u003e patientRecordsOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ReadOnlyPatientRecords initialData;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Optional\u003cReadOnlyRoomList\u003e readOnlyRoomOccupancy;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ReadOnlyRoomList initialRoomList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Optional\u003cReadOnlyTaskList\u003e readOnlyTaskOccupancy;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ReadOnlyTaskList initialTaskList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            readOnlyTaskOccupancy \u003d storage.readTaskOccupancyStorage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialTaskList \u003d readOnlyTaskOccupancy.orElseGet(SampleDataUtil::getSampleTaskList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    \"Room Data file not in the correct format. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            readOnlyRoomOccupancy \u003d storage.readRoomOccupancyStorage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            initialRoomList \u003d readOnlyRoomOccupancy.orElseGet(SampleDataUtil::getSampleRoomList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \"Room Data file not in the correct format. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            initialRoomList \u003d new RoomList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            initialRoomList \u003d new RoomList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            patientRecordsOptional \u003d storage.readPatientRecords();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (!patientRecordsOptional.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CovigentApp\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialData \u003d patientRecordsOptional.orElseGet(SampleDataUtil::getSampleCovigentApp);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \"Patient Data file not in the correct format. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialData \u003d new PatientRecords();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            initialData \u003d new PatientRecords();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialRoomList, initialTaskList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CovigentApp\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        logger.info(\"Starting CovigentApp \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 11,
      "-": 164,
      "raymondge": 36,
      "itssodium": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 750;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String LOG_FILE \u003d \"covigentapp.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // common"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_COMMANDS \u003d \"Too many commands entered!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // patients"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_NAME \u003d \"The patient name provided \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"cannot be found in Covigent.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_PATIENT_LISTED_OVERVIEW \u003d \"%1$d patient listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // rooms"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_ROOM_NUMBER \u003d \"The room number provided \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"cannot be found in Covigent.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String NUMBER_OF_ROOMS_GIVEN_IN_DIGITS \u003d \"Please give the number of digits in numbers\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"Example: addRooms 200\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_PATIENT_ALREADY_ASSIGNED \u003d \"Patient has already been assigned a room.\\nPlease\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \" clear patient from the room first.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_PATIENT_NO_ROOM \u003d \"Patient is not assigned to any room yet.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_INDEX \u003d \"The task number provided \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"cannot be found in the room.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_EDITED \u003d \"Task has not been edited.\\nPlease ensure that at least\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \" one valid and different value has been provided.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 19,
      "LeeMingDe": 3,
      "chiamyunqing": 2,
      "-": 11,
      "itssodium": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.temporal.TemporalQuery;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Helper functions for handling date and date-time objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Date formats"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20200920 */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_YEAR_MONTH_DAY \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20 Sep 2020 */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20/9/2020 */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Date-time formats"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20200920 or 20200920 2359 */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"yyyyMMdd\", \" HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20 Sep 2020 (time defaults to 0000) or 20 Sep 2020 2359 */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"d MMM yyyy\", \" HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** e.g. 20/9/2020 (time defaults to 0000) or 20/09/2020 2359 */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            createFormatterWithOptionalTime(\"d/M/yyyy\", \" HHmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the text into a date-time object (e.g. {@code LocalDate} or {@code LocalDateTime})"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * using all given {@code DateTimeFormatter} and returns the first successful result."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The text is parsed using each formatter in turn. No output is generated if a formatter fails to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * parse the text. However, a {@code DateTimeParseException} is thrown if all formatters fail."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The {@code TemporalQuery\u003cT\u003e} is typically a method reference to a"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code from(TemporalAccessor)} method."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * For example:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *     LocalDate date \u003d DateTimeUtil.parseFirstMatching(text, LocalDate::from, formatter1, formatter2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * \u003c/pre\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * For more details, refer to"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * parse-java.lang.CharSequence-java.time.temporal.TemporalQuery-"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param text The text to parse, cannot be null."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param query A way to retrieve information from a temporal-based object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param formatters Formatters to parse the text with, cannot be null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param \u003cT\u003e A date-time class, usually a {@code TemporalAccessor}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return The date-time object parsed from text."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws DateTimeParseException if text cannot be parsed with any of the formatters or no formatters provided."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static \u003cT\u003e T parseFirstMatching("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            CharSequence text, TemporalQuery\u003cT\u003e query, DateTimeFormatter... formatters) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(text, query, formatters);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (DateTimeFormatter formatter : formatters) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                return formatter.parse(text, query);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                // Current formatter is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                // Proceed to test next formatter."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String exceptionMessage \u003d String.format(\"Unable to parse %s\", text);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int errorIndex \u003d 0; // index in parsed text that was invalid, set to 0 to indicate entirety of text"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new DateTimeParseException(exceptionMessage, text, errorIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code DateTimeFormatter} with default values of time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If a time conforms to the time format, the {@code DateTimeFormatter} sets the parsed date-time"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * to that value. Otherwise, the hour and minute of the parsed date-time are set to 0."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param dateFormat The pattern for the date portion of a string parsed by  a{@code DateTimeFormatter}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param timeFormat The pattern for the time portion of a string parsed by a {@code DateTimeFormatter}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return A {@code DateTimeFormatter} that defaults the hour and minute to 0 if time does not conform to format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static DateTimeFormatter createFormatterWithOptionalTime(String dateFormat, String timeFormat) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .appendPattern(dateFormat)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .optionalStart()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .appendPattern(timeFormat)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .optionalEnd()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)})}},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns Covigent."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @see seedu.address.model.Model#getPatientRecords()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    ReadOnlyPatientRecords getCovigentApp();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of patients. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /** Returns an unmodifiable view of the list of rooms. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of rooms. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the user prefs\u0027 Covigent file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Path getCovigentAppFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 7,
      "LeeMingDe": 3,
      "-": 42,
      "raymondge": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.CovigentAppParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final CovigentAppParser covigentAppParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        covigentAppParser \u003d new CovigentAppParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Command command \u003d covigentAppParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            storage.saveRoomList(model.getModifiableRoomList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            storage.savePatientRecords(model.getPatientRecords());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ReadOnlyPatientRecords getCovigentApp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return model.getPatientRecords();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return model.getFilteredPatientList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return model.getRoomList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return model.getCovigentAppFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return model.getFilteredRoomList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "LeeMingDe": 8,
      "-": 71,
      "raymondge": 13,
      "itssodium": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.setPatientRecords(new PatientRecords());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/AddPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Adds a patient to the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpatient\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to Covigent. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_TEMP + \"TEMPERATURE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PERIOD_OF_STAY + \"PERIOD OF STAY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"[\" + PREFIX_COMMENTS + \"COMMENTS]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_TEMP + \"37.0 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PERIOD_OF_STAY + \"20200914-20200928 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_AGE + \"22 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_COMMENTS + \"Vegan,asthmatic \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in Covigent.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Patient toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Patient}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddPatientCommand(Patient patient) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        toAdd \u003d patient;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (model.hasPatient(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.addPatient(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof AddPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 20,
      "chiamyunqing": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/DeletePatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Deletes a patient identified by the patient\u0027s name from the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeletePatientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepatient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \": Deletes the patient identified by the patient\u0027s name used in the displayed patient list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Parameters: NAME (must match exactly with the name of the patient to be deleted from the patient list)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Mary Doe\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Name nameOfPatientToDelete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates a DeleteCommand to delete the patient with the name {@code String}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param nameOfPatientToDelete name in the filtered patient list to be deleted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public DeletePatientCommand(Name nameOfPatientToDelete) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(nameOfPatientToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.nameOfPatientToDelete \u003d nameOfPatientToDelete;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cPatient\u003e patientToDelete \u003d model.getPatientWithName(nameOfPatientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (patientToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient deletedPatient \u003d patientToDelete.get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (model.isPatientAssignedToRoom(nameOfPatientToDelete)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            model.clearRoom(nameOfPatientToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.deletePatient(deletedPatient);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.updateRoomListWhenPatientsChanges(deletedPatient, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, deletedPatient));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof DeletePatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 nameOfPatientToDelete.equals(((DeletePatientCommand) other).nameOfPatientToDelete)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "LeeMingDe": 1,
      "chiamyunqing": 29,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/EditPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Edits a patient in the app with the selected name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Input of name is case insensitive."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditPatientCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpatient\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"by the patient\u0027s name used in the displayed patient list. \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Parameters: NAME (must match exactly with the name of the patient to be edited in the patient list) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_TEMP + \"TEMPERATURE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_AGE + \"AGE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_PERIOD_OF_STAY + \"PERIOD OF STAY] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_COMMENTS + \"COMMENT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" john \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TEMP + \"36.5\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in Covigent.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Name patientToBeEdited;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final EditPatientDescriptor editPatientDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs an EditCommand to edit the patient with the name {@code String}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param patientToBeEdited name in the filtered patient list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editPatientDescriptor details to edit the patient with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPatientCommand(Name patientToBeEdited, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireAllNonNull(patientToBeEdited, editPatientDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.patientToBeEdited \u003d patientToBeEdited;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Optional\u003cPatient\u003e optionalPatient \u003d model.getPatientWithName(patientToBeEdited);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (optionalPatient.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Patient patientToEdit \u003d optionalPatient.get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.setPatient(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.updateRoomListWhenPatientsChanges(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * edited with {@code editPatientDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param patientToEdit Patient that is to be edited."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editPatientDescriptor Details to edit the patient with."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return Patient that has been edited."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert patientToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assert editPatientDescriptor !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Temperature updatedTemperature \u003d editPatientDescriptor.getTemperature().orElse(patientToEdit.getTemperature());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Age updatedAge \u003d editPatientDescriptor.getAge().orElse(patientToEdit.getAge());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PeriodOfStay updatedPeriodOfStay \u003d editPatientDescriptor"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .getPeriodOfStay()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .orElse(patientToEdit.getPeriodOfStay());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Comment updatedComment \u003d editPatientDescriptor.getComment().orElse(patientToEdit.getComment());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Patient(updatedName, updatedTemperature, updatedPeriodOfStay,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                updatedPhone, updatedAge, updatedComment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (other \u003d\u003d this) { //short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(other instanceof EditPatientCommand)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand e \u003d (EditPatientCommand) other; // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patientToBeEdited.equals(e.patientToBeEdited)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Stores the details to edit the patient with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * corresponding field value of the patient."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static class EditPatientDescriptor {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private Temperature temperature;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private Age age;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private Comment comment;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public EditPatientDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * Constructs a EditPatientDescriptor object with the following fields."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * @param toCopy EditPatientDescriptor to copy the fields from."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public EditPatientDescriptor(EditPatientDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setTemperature(toCopy.temperature);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setAge(toCopy.age);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setPeriodOfStay(toCopy.periodOfStay);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setComment(toCopy.comment);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, temperature, age, periodOfStay, comment);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setTemperature(Temperature temperature) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cTemperature\u003e getTemperature() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(temperature);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setAge(Age age) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cAge\u003e getAge() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(age);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setPeriodOfStay(PeriodOfStay periodOfStay) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cPeriodOfStay\u003e getPeriodOfStay() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(periodOfStay);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setComment(Comment comment) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.comment \u003d comment;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cComment\u003e getComment() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(comment);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (!(other instanceof EditPatientDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            EditPatientDescriptor e \u003d (EditPatientDescriptor) other; // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getTemperature().equals(e.getTemperature())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getAge().equals(e.getAge())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getPeriodOfStay().equals(e.getPeriodOfStay())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getComment().equals(e.getComment());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 218,
      "LeeMingDe": 12,
      "chiamyunqing": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/ListPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Lists all patients in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ListPatientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listpatient\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All patients are listed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "LeeMingDe": 1,
      "chiamyunqing": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patient/SearchPatientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP_RANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRangePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Searches a patient or a list of patient according to a name or a range of temperature."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchpatient\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \": Searches a patient or a list of patients with only one specific criteria. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"NAME or \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + PREFIX_TEMP_RANGE + \"TEMPERATURE RANGE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + PREFIX_TEMP_RANGE + \"36.1-37.9 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"No patient matching the criteria has been found.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SEARCH_PATIENT_LIST_SUCCESS \u003d \"Listed patient(s) matching the criteria.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final SearchPatientDescriptor searchPatientDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private TemperatureRangePredicate temperaturePredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs an SearchPatientCommand to edit the patient with the name {@code String}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param searchPatientDescriptor Description of the searchPatient command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientCommand(SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(searchPatientDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.searchPatientDescriptor \u003d searchPatientDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final SearchCriteria criteriaToSearch \u003d this.confirmCriteria(searchPatientDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d model.getFilteredPatientList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (criteriaToSearch \u003d\u003d SearchCriteria.CRITERIA_NOT_FOUND) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (criteriaToSearch \u003d\u003d SearchCriteria.CRITERIA_IS_NAME) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            updateNamePredicate(model, searchPatientDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return findPatientWithName(searchPatientDescriptor, patientList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (criteriaToSearch \u003d\u003d SearchCriteria.CRITERIA_IS_TEMPERATURE) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            updateTemperaturePredicate(model, searchPatientDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return findPatientWithTemperature(searchPatientDescriptor, patientList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (criteriaToSearch \u003d\u003d SearchCriteria.TOO_MANY_CRITERIA) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TOO_MANY_COMMANDS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Update the predicate for filteredlist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param model the model."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void updateNamePredicate(Model model, SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        namePredicate \u003d new NameContainsKeywordsPredicate(Arrays"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                .asList(searchPatientDescriptor.getStringName().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(namePredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Update the predicate for filteredlist."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param model the model."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void updateTemperaturePredicate(Model model, SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double startingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getStartingTemperature();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double endingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getEndingTemperature();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        temperaturePredicate \u003d new TemperatureRangePredicate(startingTemperature, endingTemperature);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(temperaturePredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Return the patient\u0027s detail with specific name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param patientList the patient list stored."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return a CommandResult of the patients\u0027 details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws CommandException if patient is not found."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult findPatientWithName(SearchPatientDescriptor searchPatientDescriptor,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                                             List\u003cPatient\u003e patientList) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String nameToSearch \u003d searchPatientDescriptor.getName().toString().trim().toLowerCase();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArrayList\u003cPatient\u003e patientNameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String patientName \u003d patient.getName().toString().trim().toLowerCase();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (patientName.contains(nameToSearch)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                patientNameList.add(patient);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (patientNameList.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new CommandResult(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Return the patient\u0027s detail with specific Temperature Range."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param searchPatientDescriptor the patient\u0027s name in the descriptor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param patientList the patient list stored."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return a CommandResult of the patients\u0027 details."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws CommandException if no patient matching the criteria."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult findPatientWithTemperature(SearchPatientDescriptor searchPatientDescriptor,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                                             List\u003cPatient\u003e patientList) throws CommandException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double startingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getStartingTemperature();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double endingTemperature \u003d searchPatientDescriptor.getTemperatureRange().getEndingTemperature();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArrayList\u003cPatient\u003e patientWithinTemperatureRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (patient.getTemperature().getValue() \u003e\u003d startingTemperature"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 patient.getTemperature().getValue() \u003c\u003d endingTemperature) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                patientWithinTemperatureRange.add(patient);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (patientWithinTemperatureRange.isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new CommandResult(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Confirm the criteria to look for."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param searchPatientDescriptor Details of the searchPatient Command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @return criteria to look for."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchCriteria confirmCriteria(SearchPatientDescriptor searchPatientDescriptor) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (searchPatientDescriptor.getOptionalName().isEmpty()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 searchPatientDescriptor.getOptionalTemperatureRange().isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.CRITERIA_NOT_FOUND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (searchPatientDescriptor.getOptionalName().isPresent()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 searchPatientDescriptor.getOptionalTemperatureRange().isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.CRITERIA_IS_NAME;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (searchPatientDescriptor.getOptionalName().isEmpty()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 searchPatientDescriptor.getOptionalTemperatureRange().isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.CRITERIA_IS_TEMPERATURE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return SearchCriteria.TOO_MANY_CRITERIA;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private enum SearchCriteria {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        CRITERIA_IS_NAME,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        CRITERIA_IS_TEMPERATURE,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TOO_MANY_CRITERIA,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        CRITERIA_NOT_FOUND"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Stores the details to search the patient ."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The class is used with @ConfirmArea method to confirm the area to look for."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static class SearchPatientDescriptor {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        private TemperatureRange temperatureRange;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        private String stringName;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public SearchPatientDescriptor() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public void setStringName(String stringName) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            this.stringName \u003d stringName;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public String getStringName() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return stringName;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public Optional\u003cName\u003e getOptionalName() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public void setTemperatureRange(TemperatureRange temperatureRange) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            this.temperatureRange \u003d temperatureRange;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public Optional\u003cTemperatureRange\u003e getOptionalTemperatureRange() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.ofNullable(temperatureRange);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public TemperatureRange getTemperatureRange() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return temperatureRange;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (!(other instanceof SearchPatientDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            SearchPatientDescriptor e \u003d (SearchPatientDescriptor) other; // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    \u0026\u0026 getTemperatureRange().equals(e.getTemperatureRange());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 32,
      "LeeMingDe": 3,
      "chiamyunqing": 9,
      "raymondge": 189,
      "itssodium": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/EditRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Edits the details of a room identified by the room number in the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Allows setting/removing/changing patient in the room and changing the room number of the room."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditRoomCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editroom\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the room identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"by the room number.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"Existing values will be overwritten by the input values. \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"To make an occupied room empty, the parameter for patient name should be set to \u0027-\u0027.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Parameters: ROOM NUMBER \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_ROOM_NUMBER + \"ROOM NUMBER] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"[\" + PREFIX_PATIENT_NAME + \"PATIENT NAME]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 23 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"123 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"Mary Doe\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_EDIT_ROOM_SUCCESS \u003d \"Edited Room: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_ROOM_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in the application.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Integer roomNumberToEdit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final EditRoomDescriptor editRoomDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs an EditRoomCommand to edit the room with the room number {@code Integer}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param roomNumberToEdit room number to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param editRoomDescriptor details to edit the room with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomCommand(Integer roomNumberToEdit, EditRoomDescriptor editRoomDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireAllNonNull(roomNumberToEdit, editRoomDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.roomNumberToEdit \u003d roomNumberToEdit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.editRoomDescriptor \u003d new EditRoomDescriptor(editRoomDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ObservableList\u003cRoom\u003e roomList \u003d model.getRoomList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Index index \u003d model.checkIfRoomPresent(roomNumberToEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room roomToEdit \u003d roomList.get(index.getZeroBased() - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room editedRoom \u003d createEditedRoom(model, roomToEdit, editRoomDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!roomToEdit.isSameRoom(editedRoom) \u0026\u0026 model.hasRoom(editedRoom)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        model.setSingleRoom(roomToEdit, editedRoom);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ROOM_SUCCESS, editedRoom));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates and returns a {@code Room} with the details of {@code roomToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * edited with {@code editRoomDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param model Current model"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomToEdit Room that is to be edited."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param editRoomDescriptor Details to edit the room with."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Room that has been edited."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Room createEditedRoom(Model model, Room roomToEdit,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                  EditRoomDescriptor editRoomDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert (roomToEdit !\u003d null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assert (editRoomDescriptor !\u003d null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int updatedRoomNumber \u003d editRoomDescriptor.getRoomNumber().orElse(roomToEdit.getRoomNumber());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList roomTaskList \u003d roomToEdit.getTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        boolean isClearRoom \u003d editRoomDescriptor.getIsOccupied().isPresent();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        boolean hasNewPatient \u003d editRoomDescriptor.getPatientName().isPresent();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        boolean isCurrentlyOccupied \u003d roomToEdit.isOccupied();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!isClearRoom \u0026\u0026 !hasNewPatient \u0026\u0026 isCurrentlyOccupied) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            //case 1: change room number in a room with patient already"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new Room(updatedRoomNumber, roomToEdit.getPatient(), roomTaskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else if (!hasNewPatient) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            //case 2: change room number in an empty room"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new Room(updatedRoomNumber, false, null, roomTaskList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //case 3: patient is already allocated to a room."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name patientName \u003d editRoomDescriptor.getPatientName().get(); //definitely has name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (model.isPatientAssignedToRoom(patientName)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        //case 4: allocate patient to the room"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cPatient\u003e updatedPatient \u003d model.getPatientWithName(patientName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (updatedPatient.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Room updatedRoom \u003d new Room(updatedRoomNumber, updatedPatient.get(), roomTaskList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return updatedRoom;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (other \u003d\u003d this) { //short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!(other instanceof EditRoomCommand)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand e \u003d (EditRoomCommand) other; // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return roomNumberToEdit.equals(e.roomNumberToEdit)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 editRoomDescriptor.equals(e.editRoomDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Stores the details to edit the room with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * corresponding field value of the room."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static class EditRoomDescriptor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Integer roomNumber;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        private Boolean isOccupied;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        private Name patientName;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public EditRoomDescriptor() {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         * Constructs an EditRoomDescriptor object with the following fields."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         * @param toCopy EditRoomDescriptor to copy the fields from."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public EditRoomDescriptor(EditRoomDescriptor toCopy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setRoomNumber(toCopy.roomNumber);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            setOccupied(toCopy.isOccupied);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            setPatientName(toCopy.patientName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return CollectionUtil.isAnyNonNull(roomNumber, patientName, isOccupied);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public Optional\u003cInteger\u003e getRoomNumber() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(roomNumber);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public void setOccupied(Boolean isOccupied) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsOccupied() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.ofNullable(isOccupied);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public void setPatientName(Name patientName) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public Optional\u003cName\u003e getPatientName() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return Optional.ofNullable(patientName);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (!(other instanceof EditRoomDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            EditRoomDescriptor e \u003d (EditRoomDescriptor) other; // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return getRoomNumber().equals(e.getRoomNumber())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    \u0026\u0026 getIsOccupied().equals(e.getIsOccupied())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    \u0026\u0026 getPatientName().equals(e.getPatientName());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return \"EditRoomDescriptor{\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \"roomNumber\u003d\" + roomNumber"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \", isOccupied\u003d\" + isOccupied"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \", patientName\u003d\" + patientName"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    + \u0027}\u0027;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"EditRoomCommand{\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"roomNumberToEdit\u003d\" + roomNumberToEdit"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \", editRoomDescriptor\u003d\" + editRoomDescriptor"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "LeeMingDe": 180,
      "chiamyunqing": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/FindRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Finds the next empty room with the lowest room number"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FindRoomCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findroom\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String MESSAGE_NO_EMPTY_ROOM \u003d \"There are unfortunately no more empty rooms!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String NUMBER_OF_ROOMS_UNDEFINED \u003d \"Please define number of rooms\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room Number %s is empty\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FindRoomCommand() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms \u003d model.getRooms();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (model.getNumOfRooms() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(NUMBER_OF_ROOMS_UNDEFINED);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room \u003d rooms.peek();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert room !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (room.isOccupied()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EMPTY_ROOM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d givePredicate(room);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, room.getRoomNumber()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Predicate\u003cRoom\u003e givePredicate(Room room) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e roomPredicate \u003d room1 -\u003e room1.getRoomNumber() \u003d\u003d room.getRoomNumber();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "LeeMingDe": 3,
      "itssodium": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/InitRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Adds the number of hotel rooms in a hotel"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class InitRoomCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"initroom\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_ZERO_CANNOT_BE_AN_INPUT \u003d \"Please input a positive value\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT \u003d \"Please check your value! \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            + \"You have input a negative value!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Initialize the number of rooms to %d rooms in the application\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Initializes the number of rooms in the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + \"quarantine facility to the app, if there was data given previously, they would be stored.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + \"Parameters: NUMBER_OF_ROOMS\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 123\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int numOfRooms;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates an AddCommand to add the number of rooms available in a hotel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public InitRoomCommand(int numOfRooms) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.numOfRooms \u003d numOfRooms;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (numOfRooms \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(MESSAGE_ZERO_CANNOT_BE_AN_INPUT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (numOfRooms \u003c 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.addRooms(numOfRooms);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, numOfRooms));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        InitRoomCommand that \u003d (InitRoomCommand) o;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return numOfRooms \u003d\u003d that.numOfRooms;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return Objects.hash(numOfRooms);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 12,
      "itssodium": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/ListRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROOMS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ListRoomCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listroom\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All rooms are listed.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String NUMBER_OF_ROOMS_UNDEFINED \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"There is no room in the app yet. Please define the number of rooms using initRooms command.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (model.getRooms().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new CommandException(NUMBER_OF_ROOMS_UNDEFINED);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.updateFilteredRoomList(PREDICATE_SHOW_ALL_ROOMS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 5,
      "itssodium": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/room/SearchRoomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_NO_ROOM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Searches a room according to the given room number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchroom\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \": Searches the room with the given room number or with the given individual.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Only one of the parameter can be provided.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER or \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"130 or \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            + PREFIX_NAME + \"John Doe\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room has been found and listed.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final SearchRoomDescriptor descriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates a SearchRoomCommand to look for the specified room based on the inputs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * in searchRoomDescriptor."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param descriptor Details to search the room with."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomCommand(SearchRoomDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(descriptor.hasParameter());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (descriptor.getRoomNumber().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Integer roomNumber \u003d descriptor.roomNumber;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Index index \u003d model.checkIfRoomPresent(roomNumber);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (index.getZeroBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            model.updateFilteredRoomList(room -\u003e room.getRoomNumber() \u003d\u003d roomNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name patientName \u003d descriptor.patientName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (model.getPatientWithName(patientName).isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else if (!model.isPatientAssignedToRoom(patientName)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_NO_ROOM);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        model.updateFilteredRoomList(room -\u003e room.isOccupied()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 room.getPatient().getName().equals(patientName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof SearchRoomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 descriptor.equals(((SearchRoomCommand) other).descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Stores the details to search the room."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Each non-empty field value will replace the corresponding field value of the room."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static class SearchRoomDescriptor {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        private Integer roomNumber;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        private Name patientName;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public SearchRoomDescriptor() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         * Constructs a SearchRoomDescriptor object with the following fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         * @param toCopy SearchRoomDescriptor to copy the fields from."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public SearchRoomDescriptor(SearchRoomDescriptor toCopy) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            setRoomNumber(toCopy.roomNumber);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            setPatientName(toCopy.patientName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public boolean hasParameter() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return CollectionUtil.isAnyNonNull(roomNumber, patientName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public void setRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public Optional\u003cInteger\u003e getRoomNumber() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return Optional.ofNullable(roomNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public void setPatientName(Name patientName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public Optional\u003cName\u003e getPatientName() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return Optional.ofNullable(patientName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (other \u003d\u003d this) { // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (!(other instanceof SearchRoomDescriptor)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            SearchRoomDescriptor e \u003d (SearchRoomDescriptor) other; // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return getRoomNumber().equals(e.getRoomNumber())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    \u0026\u0026 getPatientName().equals(e.getPatientName());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "chiamyunqing": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Adds a {@code Task} to a {@code Room}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtask\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to Covigent. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_DUE_DATE + \"DUE DATE]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Remind John to return his bedsheets \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"3 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DUE_DATE + \"20200928 2359\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_ADD_TASK_SUCCESS \u003d \"New Task added to Room %1$d. \\nDescription: %2$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Task taskToAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int roomNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task} to a {@code Room}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * with the {@code roomNumber}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddTaskCommand(Task task, int roomNumber) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomNumber \u003e 0 : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskToAdd \u003d task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (roomNumber \u003c 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d model.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d optionalRoom.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert room !\u003d null : \"Target room should never be null.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.addTask(taskToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.addTaskToRoom(taskToAdd, room);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TASK_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomNumber, taskToAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskToAdd.equals(((AddTaskCommand) other).taskToAdd)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 roomNumber \u003d\u003d (((AddTaskCommand) other).roomNumber));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 73,
      "LeeMingDe": 2,
      "raymondge": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Deletes a {@code Task} from a {@code Room}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Room} is identified by its room number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Task} is identified by its one-based index in the {@code TaskList}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * of {@code Room}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetask\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a task from Covigent. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"TASK NUMBER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Task %1$d deleted from Room %2$d. \\nDescription: %3$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int roomNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Index taskIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a DeleteTaskCommand to remove the {@code Task} with {@code taskIndex} from"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * the {@code Room} with the {@code roomNumber}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DeleteTaskCommand(int roomNumber, Index taskIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(taskIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomNumber \u003e 0 : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (roomNumber \u003c 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the room from which the user wants to delete the task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d model.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d optionalRoom.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert room !\u003d null : \"Target room should never be null.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the task which the user wants to delete"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d model.getTaskFromRoomWithTaskIndex(taskIndex, room);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task taskToDelete \u003d optionalTask.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_TASK_INDEX));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert taskToDelete !\u003d null : \"The task to delete should never be null.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.deleteTaskFromRoom(taskToDelete, room);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                taskIndex.getOneBased(), roomNumber, taskToDelete));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 roomNumber \u003d\u003d (((DeleteTaskCommand) other).roomNumber)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskIndex.equals((((DeleteTaskCommand) other).taskIndex)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 80,
      "LeeMingDe": 3,
      "raymondge": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Edits and replaces a {@code Task} in a {code Room}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Room} is identified by its index in the {@code RoomList}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * of {@code Model}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The {@code Task} is identified by its index in the {@code TaskList}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * of {@code Room}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittask\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits a task in Covigent.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"ROOM NUMBER \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"TASK NUMBER \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"[\" + PREFIX_DUE_DATE + \"DUE DATE]\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_ROOM_NUMBER + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_TASK_NUMBER + \"3 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + PREFIX_DUE_DATE + \"20200930 1700\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Task %1$d edited from Room %2$d. \\nDescription: %3$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final int roomNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Index taskIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates an EditTaskCommand to replace a {@code Task} in a {@code Room} with another"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code Task} described by {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditTaskCommand(int roomNumber, Index taskIndex, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(taskIndex, editTaskDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert roomNumber \u003e 0 : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (roomNumber \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the room from which the user wants to delete the task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d model.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d optionalRoom.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_ROOM_NUMBER));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert room !\u003d null : \"Target room should never be null.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Get the task which the user wants to edit"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d model.getTaskFromRoomWithTaskIndex(taskIndex, room);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task taskToEdit \u003d optionalTask.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_TASK_INDEX));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert taskToEdit !\u003d null : \"The task to edit should never be null.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (taskToEdit.equals(editedTask)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_TASK_NOT_EDITED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.setTaskToRoom(taskToEdit, editedTask, room);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                taskIndex.getOneBased(), roomNumber, editedTask));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskToEdit Task that is to be edited."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editTaskDescriptor Details to edit the task with."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return Task that has been edited."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue updatedDueAt \u003d editTaskDescriptor.getDateTimeDue().orElse(taskToEdit.getDueAt());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Task(updatedDescription, updatedDueAt);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof EditTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 roomNumber \u003d\u003d (((EditTaskCommand) other).roomNumber)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((EditTaskCommand) other).taskIndex)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(((EditTaskCommand) other).editTaskDescriptor));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Stores the details used to edit the task. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private DateTimeDue dueAt;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Prevents instantiation"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * Constructs a EditTaskDescriptor object with the following fields."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * @param toCopy EditTaskDescriptor to copy the fields from."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            setDateTimeDue(toCopy.dueAt);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, dueAt);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void setDateTimeDue(DateTimeDue dueAt) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.dueAt \u003d dueAt;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public Optional\u003cDateTimeDue\u003e getDateTimeDue() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.ofNullable(dueAt);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    || (other instanceof EditTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getDescription().equals(((EditTaskDescriptor) other).getDescription())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 getDateTimeDue().equals(((EditTaskDescriptor) other).getDateTimeDue()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 167,
      "LeeMingDe": 2,
      "raymondge": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/SearchTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DueDatePredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Searches a {@code Task} before a {@code DateTimeDue}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchtask\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches tasks in Covigent. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + \"[\" + PREFIX_DUE_DATE + \"DUE DATE]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            + PREFIX_DUE_DATE + \"20200928 2359\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_SEARCH_TASK_SUCCESS \u003d \"Tasks before the due date found: \\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"There is no task that matches your criteria.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final DateTimeDue duedate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private DueDatePredicate datePredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates an SearchTaskCommand to Search the specified {@code Task} with {@code DateTimeDue}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchTaskCommand(DateTimeDue duedate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireAllNonNull(duedate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.duedate \u003d duedate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d model.getRoomList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArrayList\u003cTask\u003e taskListWithDesirableResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        for (Room room : rooms) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            tasks \u003d room.getTaskList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                if (task.getDueAt().compareTo(duedate) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    taskListWithDesirableResult.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (taskListWithDesirableResult.size() \u003c 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        datePredicate \u003d new DueDatePredicate(duedate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredTaskList(datePredicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SEARCH_TASK_SUCCESS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                + getListOutput(taskListWithDesirableResult)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns the list of tasks\u0027 details"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param list a list that stores the tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @return a String output of the tasks\u0027 details."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private String getListOutput(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        StringBuilder outputString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            outputString.append(String.format(\"%d. Description: %s\\n\", i + 1, list.get(i)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return outputString.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof SearchTaskCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 duedate.equals(((SearchTaskCommand) other).duedate));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 2,
      "raymondge": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CovigentAppParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.EditRoomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.room.FindRoomCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.InitRoomCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.commands.room.ListRoomCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.task.SearchTaskCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.AddPatientCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.DeletePatientCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.EditPatientCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.SearchPatientCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.room.EditRoomCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.room.InitRoomCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.room.SearchRoomCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.task.AddTaskCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.task.DeleteTaskCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.task.EditTaskCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.task.SearchTaskCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class CovigentAppParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // create"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        case AddPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new AddPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case InitRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new InitRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // update"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        case EditPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new EditPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case EditRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new EditRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // read"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ListPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new ListPatientCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // delete"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case DeletePatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DeletePatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // others"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case SearchPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new SearchPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        case SearchRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new SearchRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case SearchTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new SearchTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case FindRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new FindRoomCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        case ListRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new ListRoomCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 50,
      "LeeMingDe": 13,
      "chiamyunqing": 9,
      "-": 55,
      "raymondge": 3,
      "itssodium": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER \u003d \"Please only enter positive numbers.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses {@code integer} into an {@code Integer} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the specified integer is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Integer parsePositiveInteger(String integer) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedInteger \u003d integer.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedInteger)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Integer.parseInt(trimmedInteger);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if exactly one prefix contains a non-empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static boolean isExactlyOnePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .count() \u003d\u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 20,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/AddPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.patient.AddPatientCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses input arguments and creates a new AddPatientCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPatientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * and returns an AddPatientCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public AddPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TEMP, PREFIX_PERIOD_OF_STAY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        PREFIX_PHONE, PREFIX_AGE, PREFIX_COMMENTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TEMP,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                PREFIX_PERIOD_OF_STAY, PREFIX_PHONE, PREFIX_AGE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Name name \u003d PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Temperature temp \u003d PatientParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMP).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PeriodOfStay periodOfStay \u003d PatientParserUtil.parsePeriodOfStay("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                argMultimap.getValue(PREFIX_PERIOD_OF_STAY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Phone phone \u003d PatientParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Age age \u003d PatientParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Comment comment \u003d new Comment(\"-\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            comment \u003d PatientParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENTS).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            // unhandled because comment will be initialised already"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patient \u003d new Patient(name, temp, periodOfStay, phone, age, comment);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new AddPatientCommand(patient);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 32,
      "chiamyunqing": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/DeletePatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Parses input arguments and creates a new DeletePatientCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeletePatientCommandParser implements Parser\u003cDeletePatientCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePatientCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * and returns a DeletePatientCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DeletePatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name patientName \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            patientName \u003d PatientParserUtil.parseName(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new DeletePatientCommand(patientName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "chiamyunqing": 9,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/EditPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Parses input arguments and creates a new EditPatientCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPatientCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * and returns an EditPatientCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param args that are inputted by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return EditPatientCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        PREFIX_COMMENTS, PREFIX_TEMP, PREFIX_AGE, PREFIX_PERIOD_OF_STAY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Name patientTobeEdited;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            patientTobeEdited \u003d PatientParserUtil.parseName(argMultimap.getPreamble().trim().toLowerCase());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor editPatientDescriptor \u003d new EditPatientCommand.EditPatientDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setName(PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setPhone(PatientParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEMP).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setTemperature("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMP).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AGE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setAge(PatientParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERIOD_OF_STAY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setPeriodOfStay("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parsePeriodOfStay(argMultimap.getValue(PREFIX_PERIOD_OF_STAY).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMMENTS).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editPatientDescriptor.setComment("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parseComment(argMultimap.getValue(PREFIX_COMMENTS).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!editPatientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(EditPatientCommand.MESSAGE_PATIENT_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new EditPatientCommand(patientTobeEdited, editPatientDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 24,
      "LeeMingDe": 34,
      "chiamyunqing": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/PatientCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple patient-related commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_TEMP \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_PERIOD_OF_STAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_COMMENTS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final Prefix PREFIX_TEMP_RANGE \u003d new Prefix(\"tr/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "-": 9,
      "raymondge": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/PatientParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains utility methods used for parsing strings in the various patient-related Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String temperature} into a {@code Temperature}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given {@code temperature} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Temperature parseTemperature(String temp) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(temp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedTemp \u003d temp.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!Temperature.isValidTemperature(trimmedTemp)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Temperature(trimmedTemp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String temperature} into a {@code Temperature}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given {@code temperature} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static TemperatureRange parseTemperatureRange(String tempRange) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(tempRange);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedTempRange \u003d tempRange.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!TemperatureRange.isValidTemperatureRange(trimmedTempRange)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(TemperatureRange.MESSAGE_CONSTRAINTS_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new TemperatureRange(trimmedTempRange);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String period of stay} into a {@code PeriodOfStay}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given {@code period of stay} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static PeriodOfStay parsePeriodOfStay(String periodOfStay) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(periodOfStay);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedPeriodOfStay \u003d periodOfStay.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!PeriodOfStay.isValidPeriodOfStay(trimmedPeriodOfStay)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(PeriodOfStay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new PeriodOfStay(trimmedPeriodOfStay);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Age parseAge(String age) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String comment} into a {@code Comment}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return an \"-\" comment if no comment is added"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Comment parseComment(String comment) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new Comment(\"-\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return new Comment(comment.trim());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patient/SearchPatientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP_RANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Parses input arguments and creates a new SearchPatientCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommandParser implements Parser\u003cSearchPatientCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchPatientCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * and returns an SearchPatientCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TEMP_RANGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.isExactlyOnePrefixPresent(argMultimap, PREFIX_NAME, PREFIX_TEMP_RANGE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand.SearchPatientDescriptor searchPatientDescriptor \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientCommand.SearchPatientDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            String[] commandFields \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            String nameWithoutPrefix \u003d commandFields[0].substring(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            searchPatientDescriptor.setStringName(nameWithoutPrefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            searchPatientDescriptor.setName(PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEMP_RANGE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            searchPatientDescriptor.setTemperatureRange("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    PatientParserUtil.parseTemperatureRange(argMultimap.getValue(PREFIX_TEMP_RANGE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new SearchPatientCommand(searchPatientDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12,
      "raymondge": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/EditRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.EditRoomCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.PatientParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Parses input arguments and creates a new EditRoomCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditRoomCommandParser implements Parser\u003cEditRoomCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String INPUT_REMOVE_PATIENT \u003d \"-\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPatientCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * and returns an EditPatientCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param args that are inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return EditPatientCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_PATIENT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Integer roomToBeEdited;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            roomToBeEdited \u003d ParserUtil.parsePositiveInteger(argMultimap.getPreamble().trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor editRoomDescriptor \u003d new EditRoomCommand.EditRoomDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROOM_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            editRoomDescriptor.setRoomNumber("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    ParserUtil.parsePositiveInteger(argMultimap.getValue(PREFIX_ROOM_NUMBER).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PATIENT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            String patientFieldInput \u003d argMultimap.getValue(PREFIX_PATIENT_NAME).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (patientFieldInput.equals(INPUT_REMOVE_PATIENT)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                editRoomDescriptor.setOccupied(false); //empty the room"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                editRoomDescriptor.setPatientName(PatientParserUtil.parseName(patientFieldInput));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!editRoomDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(EditRoomCommand.MESSAGE_ROOM_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new EditRoomCommand(roomToBeEdited, editRoomDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "LeeMingDe": 57,
      "chiamyunqing": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/InitRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.core.Messages.NUMBER_OF_ROOMS_GIVEN_IN_DIGITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.InitRoomCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Parses user input and creates new AddRoomsCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class InitRoomCommandParser implements Parser\u003cInitRoomCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPatientCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * and returns an AddRoomsCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public InitRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            //if user does not give number of room"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int numberOfRooms \u003d -1; //used so that it can be used to test for NumberFormatException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            numberOfRooms \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NUMBER_OF_ROOMS_GIVEN_IN_DIGITS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            //if user does not give number of rooms in terms of digits but gives in terms of words"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new InitRoomCommand(numberOfRooms);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 6,
      "itssodium": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/RoomCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Prefix PREFIX_ROOM_NUMBER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_NAME \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/room/SearchRoomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.room.SearchRoomCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.patient.PatientParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Parses input arguments and creates a new SearchRoomCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommandParser implements Parser\u003cSearchRoomCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of SearchRoomCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * and returns a SearchRoomCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ROOM_NUMBER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.isExactlyOnePrefixPresent(argMultimap, PREFIX_NAME, PREFIX_ROOM_NUMBER)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand.SearchRoomDescriptor descriptor \u003d new SearchRoomCommand.SearchRoomDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Name patientName \u003d PatientParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            descriptor.setPatientName(patientName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new SearchRoomCommand(descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //definitely have prefix room number if no prefix name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Integer roomNumber \u003d ParserUtil.parsePositiveInteger(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.setRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new SearchRoomCommand(descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "chiamyunqing": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/AddTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_ROOM_NUMBER, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_ROOM_NUMBER)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description description \u003d TaskParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int roomNumber \u003d ParserUtil.parsePositiveInteger(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue dueAt \u003d TaskParserUtil.parseDateTimeDue(argMultimap.getValue(PREFIX_DUE_DATE)); // optional"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task task \u003d new Task(description, dueAt);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new AddTaskCommand(task, roomNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/DeleteTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int roomNumber \u003d ParserUtil.parsePositiveInteger(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Index taskNumber \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_NUMBER).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DeleteTaskCommand(roomNumber, taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/EditTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INPUT_REMOVE_DUE_DATE \u003d \"-\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                        PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER, PREFIX_DESCRIPTION, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_ROOM_NUMBER, PREFIX_TASK_NUMBER)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Compulsory fields"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int roomNumber \u003d ParserUtil.parsePositiveInteger(argMultimap.getValue(PREFIX_ROOM_NUMBER).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Index taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK_NUMBER).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Optional fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editTaskDescriptor.setDescription(TaskParserUtil.parseDescription(description));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DUE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String dueAt \u003d argMultimap.getValue(PREFIX_DUE_DATE).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            editTaskDescriptor.setDateTimeDue(TaskParserUtil.parseDateTimeDue((dueAt.equals(INPUT_REMOVE_DUE_DATE))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    ? Optional.empty()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    : Optional.of(dueAt)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // Do not execute as no changes have been made"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_TASK_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new EditTaskCommand(roomNumber, taskIndex, editTaskDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/SearchTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.task.SearchTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Parses input arguments and creates a new SearchTaskCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommandParser implements Parser\u003cSearchTaskCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * and returns an SearchTaskCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DUE_DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!ParserUtil.isExactlyOnePrefixPresent(argMultimap, PREFIX_DUE_DATE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        DateTimeDue dueAt \u003d TaskParserUtil.parseDateTimeDue(argMultimap.getValue(PREFIX_DUE_DATE)); // optional"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new SearchTaskCommand(dueAt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "raymondge": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskCliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple task-related commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Prefix PREFIX_DUE_DATE \u003d new Prefix(\"dd/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Prefix PREFIX_TASK_NUMBER \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains utility methods used for parsing strings in the various task-related Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Description parseDescription(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e optionalDueAt} into a {@code DateTimeDue}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code optionalDueAt} can be empty but must not be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static DateTimeDue parseDateTimeDue(Optional\u003cString\u003e optionalDueAt) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(optionalDueAt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        boolean isValid \u003d optionalDueAt"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map(String::trim)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map(DateTimeDue::isValidDateTimeDue)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .orElse(true); // empty Optional considered valid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new ParseException(DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new DateTimeDue(optionalDueAt);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns the user prefs\u0027 covigent app file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Path getCovigentAppFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the user prefs\u0027 covigent app file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    void setCovigentAppFilePath(Path covigentAppFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Replaces patient records with the data in {@code covigentApp}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    void setPatientRecords(ReadOnlyPatientRecords patientRecords);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /** Returns the patient records */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    ReadOnlyPatientRecords getPatientRecords();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient records."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    boolean hasPatient(Patient patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the patient with the {@code nameOfPatient} if it exists. Otherwise, an empty optional"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * is returned."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    Optional\u003cPatient\u003e getPatientWithName(Name nameOfPatient);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Deletes the given patient."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * The patient must exist in the patient records."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void deletePatient(Patient target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * {@code patient} must not already exist in the patient records."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Replaces the given patient {@code target} with {@code editedPatient}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * {@code target} must exist in the patient records."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * another existing patient in the patient records."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void setPatient(Patient target, Patient editedPatient);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Checks if patient is already assigned to a room."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param name Of the patient."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value of whether patient is already assigned."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    boolean isPatientAssignedToRoom(Name name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code UniquePatientList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cPatient\u003e getFilteredPatientList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Updates the filter of the filtered patient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Replaces room list with the data in {@code covigentApp}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    void setRoomList(ReadOnlyRoomList rooms);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns total number of rooms in the application\u0027s {@code RoomList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    int getNumOfRooms();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void addRooms(int num);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if a room with the same identity as {@code room} exists in Covigent."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param room The room ."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return true if {@code room} is in Covigent; false otherwise."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    boolean hasRoom(Room room);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the room with the {@code roomNumber} if it exists. Otherwise, an empty optional"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * is returned."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the given room {@code target} with {@code editedRoom}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * another existing room in the application."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param target Of the room to be changed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editedRoom Is the newly edited room."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void setSingleRoom(Room target, Room editedRoom);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Clears the room with the given patient name {@code patientName}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param patientName must be in a room."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    void clearRoom(Name patientName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Checks if the given room number is present in the application."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomNumber to check if it is in the application."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Index Of room that is found."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Index checkIfRoomPresent(Integer roomNumber);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Updates the room with the new edited patient."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param patientToEdit Patient that is to be edited."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param editedPatient Patient that is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    void updateRoomListWhenPatientsChanges(Patient patientToEdit, Patient editedPatient);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code RoomList}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    RoomList getModifiableRoomList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Room} backed by the internal list of"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * {@code RoomList}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    ObservableList\u003cRoom\u003e getFilteredRoomList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Updates the filter of the filtered rooms to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns Priority Queue of rooms"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    PriorityQueue\u003cRoom\u003e getRooms();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the task with the {@code taskIndex} in {code room} if it exists."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Otherwise, an empty optional is returned."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    Optional\u003cTask\u003e getTaskFromRoomWithTaskIndex(Index taskIndex, Room room);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds {@code task} to {@code room}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The room must exist in {@code CovigentApp}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param room The room to which the task should be added."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void addTaskToRoom(Task task, Room room);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Adds {@code task}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The room must exist in {@code CovigentApp}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Deletes {@code task} from {@code room}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The room must exist in Covigent."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must exist in room."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to delete."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param room The room from which the task should be delete."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void deleteTaskFromRoom(Task task, Room room);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The room must exist in Covigent."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must exist in room."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param target The task to replace."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editedTask The modified task to replace the original."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param room The room from which the task should be replaced."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    void setTaskToRoom(Task target, Task editedTask, Room room);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Deletes {@code task}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The room must exist in Covigent."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param taskToDelete The task to delete."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void deleteTask(Task taskToDelete);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Sets {@code task}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * The room must exist in Covigent."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param taskToEdit The task to edit."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param editedTask the edited task."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void setTask(Task taskToEdit, Task editedTask);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 84,
      "LeeMingDe": 35,
      "chiamyunqing": 37,
      "-": 64,
      "raymondge": 29,
      "itssodium": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final PatientRecords patientRecords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final RoomList roomList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final FilteredList\u003cPatient\u003e filteredPatients;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final FilteredList\u003cRoom\u003e filteredRooms;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Initializes a ModelManager with the given patient records, room records and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public ModelManager(ReadOnlyPatientRecords patientRecords, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                        ReadOnlyRoomList roomList, ReadOnlyTaskList taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(patientRecords, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        logger.fine(\"Initializing with Covigent App: \" + patientRecords + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.patientRecords \u003d new PatientRecords(patientRecords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.roomList \u003d new RoomList(roomList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.taskList \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        filteredPatients \u003d new FilteredList\u003c\u003e(this.patientRecords.getPatientList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        filteredRooms \u003d new FilteredList\u003c\u003e(this.roomList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.taskList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this(new PatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return userPrefs.getCovigentAppFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath(Path covigentAppFilePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(covigentAppFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(covigentAppFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setPatientRecords(ReadOnlyPatientRecords patientRecords) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.patientRecords.resetData(patientRecords);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public ReadOnlyPatientRecords getPatientRecords() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patientRecords;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RoomList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setRoomList(ReadOnlyRoomList rooms) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.roomList.resetData(rooms);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patients \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patientRecords.hasPatient(patient);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name nameOfPatient) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(nameOfPatient);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patientRecords.getPatientWithName(nameOfPatient);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.removePatient(target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.addPatient(patient);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isPatientAssignedToRoom(Name name) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Room room : roomList.getRoomObservableList()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (room.getPatient() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                Name patientNameInRoom \u003d room.getPatient().getName();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                if (patientNameInRoom.equals(name)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return filteredPatients;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        filteredPatients.setPredicate(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Room List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getNumOfRooms() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return roomList.getNumOfRooms();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void addRooms(int num) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        roomList.addRooms(num);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return roomList.containsRoom(room);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assert (roomNumber \u003e 0) : \"Room number should be greater than 0.\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return roomList.getRoomWithRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setSingleRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomList.setSingleRoom(target, editedRoom);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void clearRoom(Name patientName) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assert(isPatientAssignedToRoom(patientName));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        roomList.clearRoom(patientName);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Index checkIfRoomPresent(Integer roomNumber) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ObservableList\u003cRoom\u003e roomObservableList \u003d this.getRoomList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d roomObservableList.size(); i++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            int roomNum \u003d roomObservableList.get(i - 1).getRoomNumber();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            boolean isValidRoom \u003d (Integer.valueOf(roomNum)).equals(roomNumber);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (isValidRoom) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                index \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void updateRoomListWhenPatientsChanges(Patient patientToEdit, Patient editedPatient) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ObservableList\u003cRoom\u003e roomObservableList \u003d this.roomList.getRoomObservableList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (int i \u003d 0; i \u003c roomObservableList.size(); i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Patient patient \u003d roomObservableList.get(i).getPatient();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (isPatientAssignedToRoom(patientToEdit.getName()) \u0026\u0026 patient !\u003d null"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 patient.isSamePatient(patientToEdit)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Room updatedRoom \u003d roomObservableList.get(i);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                if (editedPatient \u003d\u003d null) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    updatedRoom.setOccupied(false);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                updatedRoom.setPatient(editedPatient);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                roomObservableList.set(i, updatedRoom);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered RoomList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return roomList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomList getModifiableRoomList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PriorityQueue\u003cRoom\u003e getRooms() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.getModifiableRoomList().getRooms();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return filteredRooms;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        filteredRooms.setPredicate(predicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tasks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cTask\u003e getTaskFromRoomWithTaskIndex(Index taskIndex, Room room) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(taskIndex, room);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e tasks \u003d room.getTaskList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (taskIndex.getZeroBased() \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Optional.of(tasks.get(taskIndex.getZeroBased()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void addTaskToRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(task, room);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        roomList.addTaskToRoom(task, room);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireAllNonNull(task);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        filteredTasks.setPredicate(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(task, room);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.deleteTaskFromRoom(task, room);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom(Task target, Task editedTask, Room room) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedTask, room);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.setTaskToRoom(target, editedTask, room);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void deleteTask(Task taskToDelete) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireAllNonNull(taskToDelete);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskList.remove(taskToDelete);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireAllNonNull(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskList.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Miscellaneous \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patientRecords.equals(other.patientRecords)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 roomList.equals(other.roomList)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 filteredPatients.equals(other.filteredPatients)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 filteredRooms.equals(other.filteredRooms);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 65,
      "LeeMingDe": 60,
      "chiamyunqing": 57,
      "-": 116,
      "raymondge": 37,
      "itssodium": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PatientRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.UniquePatientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Wraps all data at the app level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Duplicate patients are not allowed (by .isSamePatient comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PatientRecords implements ReadOnlyPatientRecords {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final UniquePatientList patients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecords() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates an CovigentApp using the Patients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecords(ReadOnlyPatientRecords toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the contents of the patient list with {@code patients}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.patients.setPatients(patients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Resets the existing data of this {@code PatientRecords} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void resetData(ReadOnlyPatientRecords newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        setPatients(newData.getPatientList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    //// patient-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a patient with the same identity as {@code patient} exists in the patient records."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.contains(patient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the patient with the input name."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param name of patient to find."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return the patient with the name if it exists."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name name) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patients.getPatientWithName(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a patient to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient must not already exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients.add(p);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the given patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(editedPatient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients.setPatient(target, editedPatient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Removes {@code key} from this {@code PatientRecords}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void removePatient(Patient key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.asUnmodifiableObservableList().size() + \" patients\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof PatientRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 patients.equals(((PatientRecords) other).patients));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patients.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 30,
      "LeeMingDe": 1,
      "chiamyunqing": 22,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPatientRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Unmodifiable view of app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public interface ReadOnlyPatientRecords {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an unmodifiable view of the patients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * This list will not contain any duplicate patients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    ObservableList\u003cPatient\u003e getPatientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "chiamyunqing": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public interface ReadOnlyRoomList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    ObservableList\u003cRoom\u003e getRoomObservableList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public interface ReadOnlyTaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskObservableList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    Path getCovigentAppFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.exceptions.DuplicateRoomException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.storage.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains information regarding the Room information"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class RoomList implements ReadOnlyRoomList {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientRecordsStorage.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private int numOfRooms;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private PriorityQueue\u003cRoom\u003e rooms \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /** Creates default RoomList() object where all fields are null**/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public RoomList() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Converts data from readOnlyRoomList to roomList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public RoomList(ReadOnlyRoomList readOnlyRoomList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        resetData(readOnlyRoomList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates a RoomList object using the information given in files containing information about"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * which rooms are occupied and number of rooms"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public RoomList(PriorityQueue\u003cRoom\u003e rooms, int numOfRooms) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.rooms \u003d rooms;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.numOfRooms \u003d numOfRooms;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Resets the existing data of this {@code RoomList} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void resetData(ReadOnlyRoomList readOnlyRoomList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ObservableList\u003cRoom\u003e roomLists \u003d readOnlyRoomList.getRoomObservableList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        numOfRooms \u003d roomLists.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.addAll(roomLists);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        internalList.addAll(roomLists);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns Priority Queue of rooms"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PriorityQueue\u003cRoom\u003e getRooms() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.rooms;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns number of rooms in hotel"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int getNumOfRooms() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return numOfRooms;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomObservableList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private void addRooms() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (numOfRooms \u003c 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (numOfRooms \u003e internalList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            for (int i \u003d internalList.size(); i \u003c numOfRooms; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                Room room \u003d new Room(i + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                rooms.add(room);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else if (numOfRooms \u003c internalList.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            for (int i \u003d numOfRooms; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                Room room \u003d internalList.get(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                rooms.remove(room);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            int size \u003d internalList.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            for (int i \u003d numOfRooms; i \u003c size; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                internalList.remove(numOfRooms);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        internalList.setAll(rooms); // to let the UI update"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Adds the number of the rooms in a hotel"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param numOfRooms is the number of rooms to be added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void addRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.numOfRooms \u003d numOfRooms;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        addRooms();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Adds this room to the RoomList"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param room is added to RoomList"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void addRooms(Room room) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.numOfRooms++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.add(room);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        internalList.add(room);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the room with the provided {@code roomNumber}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * An empty optional is returned if such a room is not found in the {@code RoomList}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param roomNumber The room number of the room."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return the optional-wrapped room if found, otherwise an empty optional"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (Room room : internalList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (roomNumber \u003d\u003d room.getRoomNumber()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                return Optional.of(room);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // TODO: Move task-related methods into another class"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the task with the provided {@code taskIndex} from {@code room}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * An empty optional is returned if such a task is not found in the room."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param taskIndex The index of the task in the room."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @return the optional-wrapped task if found, otherwise an empty optional"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cTask\u003e getTaskFromRoomWithTaskIndex(Index taskIndex, Room room) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e tasks \u003d room.getTaskList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (taskIndex.getZeroBased() \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Optional.of(tasks.get(taskIndex.getZeroBased()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Adds a task to a room."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * The room must exist in the {@code RoomList}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param room The room to which the task should be added."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws RoomNotFoundException if {@code room} is not in {@code RoomList}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void addTaskToRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(task, room);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        int index \u003d internalList.indexOf(room);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        room.addTask(task);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        internalList.set(index, room);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Deletes a task from a room."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The room must exist in the {@code RoomList}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must exist in the {@code TaskList} of the room."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to delete."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param room The room to which the task should be deleted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws RoomNotFoundException if {@code room} is not in {@code RoomList}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws TaskNotFoundException if {@code task} is not in {@code room}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(task, room);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int index \u003d internalList.indexOf(room);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.deleteTask(task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.set(index, room);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces a task {code target} in a room with {@code editedTask}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The room must exist in the {@code RoomList}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The {@code target} must exist in the {@code TaskList} of the room."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param target The task to be replaced."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editedTask The edited task to replace the target."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param room The room in which the task should be replaced."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws RoomNotFoundException if {@code room} is not in {@code RoomList}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws TaskNotFoundException if {@code target} is not in {@code room}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom(Task target, Task editedTask, Room room) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedTask, room);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int index \u003d internalList.indexOf(room);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.setTask(target, editedTask);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.set(index, room);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        RoomList roomList \u003d (RoomList) o;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room[] roomsForPQ \u003d this.rooms.toArray(new Room[0]);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room[] rooms1ForPQ \u003d roomList.rooms.toArray(new Room[0]);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room[] roomsForObservableList \u003d internalList.toArray(new Room[0]);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room[] rooms1FOrObservableList \u003d roomList.internalList.toArray(new Room[0]);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return numOfRooms \u003d\u003d roomList.numOfRooms"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 Arrays.equals(roomsForPQ, rooms1ForPQ)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 Arrays.equals(roomsForObservableList, rooms1FOrObservableList);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Tests whether 2 PriorityQueues are equal by checking whether at each relative position they contain the equal"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * rooms"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(PriorityQueue\u003cRoom\u003e rooms1, PriorityQueue\u003cRoom\u003e rooms2) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (rooms1.size() !\u003d rooms2.size()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            int size \u003d rooms1.size();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                if (!rooms1.poll().equals(rooms2.poll())) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if the list contains an equivalent room as the given argument."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean containsRoom(Room toCheck) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRoom);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Clears the room which contains the patient with the given name."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param patientName to clear the room from."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void clearRoom(Name patientName) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(patientName);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d internalList.size(); i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (!internalList.get(i - 1).isOccupied()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            Name patientNameInRoom \u003d internalList.get(i - 1).getPatient().getName();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (patientName.equals(patientNameInRoom)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                Room roomToClear \u003d internalList.get(i - 1);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                setSingleRoom(roomToClear, new Room(roomToClear.getRoomNumber()));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * The room identity of {@code editedRoom} must not be the same as another existing room in the list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param target Room to be changed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param editedRoom Room that has been changed."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setSingleRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new RoomNotFoundException();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!target.isSameRoom(editedRoom) \u0026\u0026 containsRoom(editedRoom)) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new DuplicateRoomException();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.remove(target); // this and the next LOC is to replace the room in the priority queue"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.add(editedRoom);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        internalList.set(index, editedRoom);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        int result \u003d Objects.hash(numOfRooms, rooms, internalList);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        result \u003d 31 * result;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setNumOfRooms(int numOfRooms) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.numOfRooms \u003d numOfRooms;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setRooms(PriorityQueue\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.rooms \u003d rooms;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 84,
      "LeeMingDe": 1,
      "chiamyunqing": 246,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Path covigentAppFilePath \u003d Paths.get(\"data\" , \"covigentapp.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path numberOfRoomsFilePath \u003d Paths.get(\"data\", \"numberOfRooms.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path roomsOccupiedFilePath \u003d Paths.get(\"data\", \"roomsOccupied.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Path taskFilePath \u003d Paths.get(\"data\", \"task.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        setCovigentAppFilePath(newUserPrefs.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return covigentAppFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath(Path covigentAppFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        requireNonNull(covigentAppFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.covigentAppFilePath \u003d covigentAppFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path getNumberOfRoomsFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return numberOfRoomsFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path getRoomsOccupiedFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomsOccupiedFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Path getTaskOccupiedFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return taskFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 covigentAppFilePath.equals(o.covigentAppFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return Objects.hash(guiSettings, covigentAppFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + covigentAppFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 10,
      "-": 80,
      "raymondge": 3,
      "itssodium": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Age.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Patient\u0027s age recorded in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Age should only contain numbers.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d Integer.parseInt(age);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 (Integer.parseInt(test) \u003e\u003d 0)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 (Integer.parseInt(test) \u003c 120);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Age) other).value); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Integer.toString(value).hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Comment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents important comments of the Patient in the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Guarantees: immutable; is an optional attribute of patient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class Comment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code Comment}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param comment A valid comment"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Comment(String comment) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(comment);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        value \u003d comment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof Comment // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 value.equals(((Comment) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "chiamyunqing": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a Patient\u0027s name in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 2,
      "chiamyunqing": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Patient in the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Name name; //identifier field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Temperature temperature;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Comment comment; // an optional field, if null is initialised to \"-\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Patient(Name name, Temperature temperature, PeriodOfStay periodOfStay,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                   Phone phone, Age age, Comment comment) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireAllNonNull(name, temperature, periodOfStay, phone, age);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.comment \u003d comment \u003d\u003d null ? new Comment(\"-\") : comment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Temperature getTemperature() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return temperature;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PeriodOfStay getPeriodOfStay() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return periodOfStay;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Comment getComment() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if both patients have the same name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * This defines a weaker notion of equality between two patients."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean isSamePatient(Patient otherPatient) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return otherPatient !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 otherPatient.getName().equals(getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns true if both patients have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * This defines a stronger notion of equality between two patients."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(other instanceof Patient)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient otherPatient \u003d (Patient) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return otherPatient.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 otherPatient.getTemperature().equals(getTemperature())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 otherPatient.getPeriodOfStay().equals(getPeriodOfStay())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 otherPatient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 otherPatient.getAge().equals(getAge());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Objects.hash(name, temperature, periodOfStay, phone, age);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        builder.append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Temperature: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .append(getTemperature() + \"\\n\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Period of stay: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(getPeriodOfStay().readerFriendlyString() + \"\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Phone: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .append(getPhone() + \"\\n\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Age: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .append(getAge() + \"\\n\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .append(\"Comment: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .append(getComment() + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 14,
      "LeeMingDe": 8,
      "chiamyunqing": 32,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/PeriodOfStay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Patient\u0027s period of stay in the facility."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPeriodOfStay(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PeriodOfStay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \"Period of stay should be in the format YYYYMMDD-YYYYMMDD.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8}[-]\\\\d{8}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final LocalDate startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final LocalDate endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code PeriodOfStay}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param periodOfStay A valid period of stay."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(periodOfStay);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        checkArgument(isValidPeriodOfStay(periodOfStay), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        startDate \u003d LocalDate.parse(periodOfStay.split(\"-\")[0], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        endDate \u003d LocalDate.parse(periodOfStay.split(\"-\")[1], DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns true if a given string is a valid period of stay."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static boolean isValidPeriodOfStay(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        boolean isRegexCorrect \u003d test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (isRegexCorrect) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            String[] dates \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                LocalDate start \u003d LocalDate.parse(dates[0], DateTimeFormatter.ofPattern(\"yyyyMMdd\")); //check start date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                LocalDate end \u003d LocalDate.parse(dates[1], DateTimeFormatter.ofPattern(\"yyyyMMdd\")); //check end date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return start.compareTo(end) \u003c 0; //check start date less than end date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns a string that is more human readable (e.g. 09 Jan 2020)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return reader friendly string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String readerFriendlyString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return startDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \" to \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + endDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return startDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\")) + \"-\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + endDate.format(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                || (other instanceof PeriodOfStay // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 startDate.compareTo(((PeriodOfStay) other).startDate) \u003d\u003d 0"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 endDate.compareTo(((PeriodOfStay) other).endDate) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Patient\u0027s phone number in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Temperature.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Patient\u0027s temperature recorded in the app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTemperature(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class Temperature {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \"Temperature should only contain numbers, and it should be to one decimal place. (E.g. 36.0)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\\\\d[.]\\\\d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs a {@code Temperature}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param temperature A valid temperature."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Temperature(String temperature) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(temperature);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        checkArgument(isValidTemperature(temperature), MESSAGE_CONSTRAINTS); //ensures temp is always to 1 d.p."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        value \u003d Double.parseDouble(temperature);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns the float value of the temperature reading."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public double getValue () {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns true if a given string is a valid temperature."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static boolean isValidTemperature(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof Temperature // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Temperature) other).value); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return Double.toString(value).hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "raymondge": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/TemperatureRange.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * The temperature range class serves to update a list of patients that fall within the temperature range."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * A temperature range object contains two immutable temperature objects for comparison."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TemperatureRange {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TEMPERATURERANGE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \"Temperature range should contain temperature-temperature\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TEMPERATURE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \"Temperature should only contain numbers, and it should be to one decimal place. (E.g. 36.0)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String VALIDATION_REGEX_TEMPERATURE \u003d \"\\\\d\\\\d[.]\\\\d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final String VALIDATION_REGEX_TEMPERATURERANGE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            VALIDATION_REGEX_TEMPERATURE + \"[-]\" + VALIDATION_REGEX_TEMPERATURE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public final double startingTemperature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public final double endingTemperature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs a {@code TemperatureRange}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param temperatureRange A valid temperature range."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TemperatureRange (String temperatureRange) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(temperatureRange);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        checkArgument(isValidTemperatureRange(temperatureRange), MESSAGE_CONSTRAINTS_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String[] temperatures \u003d temperatureRange.split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        checkArgument(isValidTemperature(temperatures[0]), MESSAGE_CONSTRAINTS_TEMPERATURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //ensures temp is always to 1 d.p."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        checkArgument(isValidTemperature(temperatures[0]), MESSAGE_CONSTRAINTS_TEMPERATURE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //ensures temp is always to 1 d.p."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        startingTemperature \u003d Double.parseDouble(temperatures[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        endingTemperature \u003d Double.parseDouble(temperatures[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns the starting temperature for the temperature range ."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public double getStartingTemperature () {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.startingTemperature;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns the ending temperature for the temperature range ."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public double getEndingTemperature () {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.endingTemperature;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns true if a given string is a valid temperature."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static boolean isValidTemperature(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return test.matches(VALIDATION_REGEX_TEMPERATURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns true if a given string is a valid temperature Range ."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static boolean isValidTemperatureRange(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return test.matches(VALIDATION_REGEX_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return startingTemperature + \" to \" + endingTemperature;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof TemperatureRange // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 startingTemperature \u003d\u003d ((TemperatureRange) other).startingTemperature"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 endingTemperature \u003d\u003d ((TemperatureRange) other).endingTemperature); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "raymondge": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/TemperatureRangePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Tests that a {@code Patient}\u0027s {@code Temperature} falls within the temperature range."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TemperatureRangePredicate implements Predicate\u003cPatient\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final double startingTemperature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final double endingTemperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs a {@code TemperatureRangePredicate}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param startingTemperature The start of temperature range."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param endingTemperature The end of temperature range."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TemperatureRangePredicate(double startingTemperature, double endingTemperature) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.startingTemperature \u003d startingTemperature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.endingTemperature \u003d endingTemperature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean test(Patient patient) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        double temperature \u003d patient.getTemperature().value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return startingTemperature \u003c\u003d temperature \u0026\u0026 endingTemperature \u003e\u003d temperature;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof TemperatureRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 startingTemperature \u003d\u003d (((TemperatureRangePredicate) other).startingTemperature) // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 endingTemperature \u003d\u003d (((TemperatureRangePredicate) other).endingTemperature)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/UniquePatientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A list of patients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A patient is considered unique by comparing using {@code Patient#isSamePatient(Patient)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * As such, adding and updating of patients uses Patient#isSamePatient(Patient) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * that the patient being added or updated is unique in terms of identity in the UniquePatientList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * However, the removal of a patient uses Patient#equals(Object) so as to ensure that the patient with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * @see Patient#isSamePatient(Patient)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class UniquePatientList implements Iterable\u003cPatient\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if the list contains an equivalent patient as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean contains(Patient toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePatient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the patient with the input name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param name of patient to find."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @return the patient with the name if it exists."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        for (Patient patient : internalList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (patient.getName().equals(name)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                return Optional.of(patient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a patient to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient must not already exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add(Patient toAdd) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the patient {@code target} in the list with {@code editedPatient}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedPatient);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.set(index, editedPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Removes the equivalent patient from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The patient must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove(Patient toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new PatientNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients(UniquePatientList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the contents of this list with {@code patients}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code patients} must not contain duplicate patients."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(patients);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!patientsAreUnique(patients)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new DuplicatePatientException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(patients);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Iterator\u003cPatient\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof UniquePatientList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if {@code patients} contains only unique patients."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c patients.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                if (patients.get(i).isSamePatient(patients.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 138,
      "chiamyunqing": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/DuplicatePatientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation will result in duplicate Patients (Patients are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DuplicatePatientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DuplicatePatientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(\"Operation would result in duplicate patients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/exceptions/PatientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation is unable to find the specified patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/Room.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Represents Room in the app"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Room implements Comparable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int roomNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isOccupied;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates room object where isOccupied is always false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Room(int roomNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isOccupied \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.patient \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates room object where roomNumber and isOccupied values are values given by user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Room(int roomNumber, boolean isOccupied) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.patient \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a room object containing a patient that can be found in the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomNumber Room Number of the room."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param patient Patient to be added to the room."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param taskList TaskList of tasks for the room."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Room(int roomNumber, Patient patient, TaskList taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isOccupied \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates a Room object where none of the values are pre determined by app"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Room(int roomNumber, boolean isOccupied, Patient patient, TaskList taskList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int getRoomNumber() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomNumber;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Patient getPatient() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isOccupied() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return isOccupied;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setOccupied(boolean isOccupied) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setPatient(Patient patient) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a task to the task list of this room."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Deletes a task from the task list of this room."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must be in this room."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param task The task to delete."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws TaskNotFoundException if task is not found in the task list of this room."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            taskList.remove(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces a task from the task list of this room with {@code editedTask}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must be in this room."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param target The task to replace."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param editedTask The modified task to replace the original."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws TaskNotFoundException if task is not found in the task list of this room."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            taskList.setTask(target, editedTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if both rooms of the same number have at least one other identity field that is the same."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * This defines a weaker notion of equality between two rooms."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean isSameRoom(Room otherRoom) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (otherRoom \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return otherRoom !\u003d null"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 Integer.valueOf(otherRoom.getRoomNumber()).equals(getRoomNumber());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns true if both rooms have the same identity and data fields."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * This defines a stronger notion of equality between two rooms."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room \u003d (Room) o;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (taskList \u003d\u003d null \u0026\u0026 patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return room.taskList \u003d\u003d null"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 room.patient \u003d\u003d null"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 roomNumber \u003d\u003d room.roomNumber"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 isOccupied \u003d\u003d room.isOccupied;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (taskList \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return roomNumber \u003d\u003d room.roomNumber"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 room.taskList \u003d\u003d null"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 isOccupied \u003d\u003d room.isOccupied"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 patient.equals(room.getPatient());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return roomNumber \u003d\u003d room.roomNumber"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 room.patient \u003d\u003d null"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 isOccupied \u003d\u003d room.isOccupied"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 taskList.equals(room.getTaskList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return roomNumber \u003d\u003d room.roomNumber"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 isOccupied \u003d\u003d room.isOccupied"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \u0026\u0026 patient.equals(room.getPatient())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    \u0026\u0026 taskList.equals(room.getTaskList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Objects.hash(roomNumber, isOccupied, taskList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public int compareTo(Room room) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (room.isOccupied \u003d\u003d this.isOccupied) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (room.roomNumber \u003c this.roomNumber) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (room.isOccupied) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String patientDetails \u003d getPatient() \u003d\u003d null ? \"-\" : getPatient().toString();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        builder.append(\"Room Number: \")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .append(getRoomNumber() + \"\\n\")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .append(\"Patient: \")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .append(patientDetails + \"\\n\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .append(\"TaskList: \")"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .append(taskList.toString() + \"\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 67,
      "LeeMingDe": 40,
      "itssodium": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/DuplicateRoomException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Signals that the operation will result in duplicate Rooms (Rooms are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DuplicateRoomException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DuplicateRoomException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(\"Operation would result in duplicate rooms\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/room/exceptions/RoomNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation is unable to find the specified room."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DateTimeDue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents the date-time when a Task is due."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Guarantees: immutable; is an optional attribute of task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * is valid as declared in {@link #isValidDateTimeDue(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class DateTimeDue implements Comparable\u003cDateTimeDue\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Due dates should adhere to one of the \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"following formats:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"1. yyyyMMdd (e.g. 20201230)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"2. yyyyMMdd HHmm (e.g. 20201230 2359)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"3. d/M/yyyy (e.g. 30/12/2020)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"4. d/M/yyyy HHmm (e.g. 30/12/2020 2359)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Format 3 and 4 allow a single digit for day and month (e.g. 1/1/2020); \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + \"Format 1 and 2 do not.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static final DateTimeFormatter[] ALLOWED_DATETIME_FORMATS \u003d {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String NULL_VALUE_TO_STRING \u003d \"-\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final Optional\u003cLocalDateTime\u003e value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private String val;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code DateTimeDue}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code optionalDueAt} must be non-null (but can be empty)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If the date-time string is empty, the value defaults to {@code Optional.empty()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * If the date-time string is present and valid, the value parsed into is a {@code LocalDateTime}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * and wrapped in an {@code Optional}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param optionalDueAt A valid optional date-time string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DateTimeDue(Optional\u003cString\u003e optionalDueAt) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(optionalDueAt);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        value \u003d optionalDueAt"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map((dueAt) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    String trimmedDueAt \u003d dueAt.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    checkArgument(isValidDateTimeDue(trimmedDueAt), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    val \u003d trimmedDueAt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    return Optional.of(DateTimeUtil"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                            .parseFirstMatching(trimmedDueAt, LocalDateTime::from, ALLOWED_DATETIME_FORMATS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                })"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .orElse(Optional.empty());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code DateTimeDue}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code dueAt} must be non-null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param dueAt A valid date-time string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DateTimeDue(String dueAt) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(dueAt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String trimmedDueAt \u003d dueAt.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        checkArgument(isValidDateTimeDue(trimmedDueAt), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        value \u003d Optional.of(DateTimeUtil"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .parseFirstMatching(trimmedDueAt, LocalDateTime::from, ALLOWED_DATETIME_FORMATS));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        val \u003d trimmedDueAt;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cLocalDateTime\u003e getValue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public String getVal() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return val;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns if a given string is a valid date-time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static boolean isValidDateTimeDue(String test) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.parseFirstMatching(test, LocalDateTime::from, ALLOWED_DATETIME_FORMATS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .map((dueAt) -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                    dueAt.format(DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .orElse(NULL_VALUE_TO_STRING);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof DateTimeDue // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 value.equals(((DateTimeDue) other).value)); // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public int compareTo(DateTimeDue other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return value.get().isBefore(other.getValue().get())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || value.get().isEqual(other.getValue().get()) ? 1 : 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 113,
      "raymondge": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a description of a Task in the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @param description A description of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DueDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTimeDue} falls within the range."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class DueDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final DateTimeDue duedate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Constructs a {@code DueDatePredicate}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param duedate The start of temperature range."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public DueDatePredicate(DateTimeDue duedate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.duedate \u003d duedate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                || (other instanceof DueDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 duedate \u003d\u003d (((DueDatePredicate) other).duedate)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (task.getDueAt().compareTo(duedate) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Represents a Task that can be assigned to a room."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Data fields (i.e. values entered by user)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final DateTimeDue dueAt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Every field apart must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task(Description description, DateTimeDue dueAt) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(description, dueAt);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.dueAt \u003d dueAt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public DateTimeDue getDueAt() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return dueAt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if both tasks have the same data and metadata fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 otherTask.getDueAt().equals(getDueAt());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Use this method for custom fields hashing instead of implementing your own."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Objects.hash(description, dueAt);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(\"Due Date: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .append(getDueAt());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A list of tasks that does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e, ReadOnlyTaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Create a TaskList Object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TaskList(){}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Create a TaskList Object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param readOnlyTaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TaskList(ReadOnlyTaskList readOnlyTaskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        resetData(readOnlyTaskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Reset the data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param readOnlyTaskList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void resetData(ReadOnlyTaskList readOnlyTaskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        requireNonNull(readOnlyTaskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ObservableList\u003cTask\u003e taskLists \u003d readOnlyTaskList.getTaskObservableList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        internalList.addAll(taskLists);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks(TaskList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ObservableList\u003cTask\u003e getInternalList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (internalUnmodifiableList.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            builder.append(\"-\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return builder.toString().trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // TODO: add method to get task details with numbering and indentation; remove numbering from toString()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        for (Task task : internalList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            // Results in \"1. \u003ctask\u003e\\n2. \u003ctask\u003e...\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            builder.append(taskIndex++);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            builder.append(\". \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            builder.append(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            builder.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return builder.toString().trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 internalList.equals(((TaskList) other).internalList));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskObservableList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 100,
      "LeeMingDe": 5,
      "raymondge": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains utility methods for populating {@code CovigentApp} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static Patient[] getSamplePatient() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Patient[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Temperature(\"36.7\"), new PeriodOfStay(\"20200908-20200918\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"87438807\"), new Age(\"23\"), null),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Bernice Yu\"), new Temperature(\"37.0\"), new PeriodOfStay(\"20200808-20200819\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"99272758\"), new Age(\"37\"), null),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Temperature(\"38.0\"), new PeriodOfStay(\"20200301-20200309\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"93210283\"), new Age(\"87\"), null),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Temperature(\"35.8\"), new PeriodOfStay(\"20201001-20201014\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"91031282\"), new Age(\"13\"), null),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            new Patient(new Name(\"Irfan Ibrahim\"), new Temperature(\"37.7\"), new PeriodOfStay(\"20200901-20200915\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    new Phone(\"92492021\"), new Age(\"65\"), null)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static ReadOnlyPatientRecords getSampleCovigentApp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecords sampleAb \u003d new PatientRecords();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Patient samplePatient : getSamplePatient()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            sampleAb.addPatient(samplePatient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static Room[] getSampleRoom() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Room[] {};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static Task[] getSampleTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new Task[] {};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static ReadOnlyRoomList getSampleRoomList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (Room room : getSampleRoom()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomList.addRooms(room);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public static ReadOnlyTaskList getSampleTaskList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        for (Task task : getSampleTask()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 13,
      "LeeMingDe": 3,
      "chiamyunqing": 5,
      "-": 16,
      "raymondge": 20,
      "itssodium": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPatient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Jackson-friendly version of {@link Patient}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "class JsonAdaptedPatient {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String temperature;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String periodOfStay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String age;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final String comment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Constructs a {@code JsonAdaptedPatient} with the given patient details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"temperature\") String temperature,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                              @JsonProperty(\"periodOfStay\") String periodOfStay, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                              @JsonProperty(\"age\") String age, @JsonProperty(\"comment\") String comment) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.periodOfStay \u003d periodOfStay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Converts a given {@code Patient} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public JsonAdaptedPatient(Patient source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature \u003d source.getTemperature().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay \u003d source.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age \u003d source.getAge().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment \u003d source.getComment().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Converts this Jackson-friendly adapted Patient object into the model\u0027s {@code Patient} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted patient."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Patient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (temperature \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    Temperature.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Temperature.isValidTemperature(temperature)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Temperature modelTemp \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (periodOfStay \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    PeriodOfStay.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!PeriodOfStay.isValidPeriodOfStay(periodOfStay)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(PeriodOfStay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final PeriodOfStay modelPeriod \u003d new PeriodOfStay(periodOfStay);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (age \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!Age.isValidAge(age)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Age modelAge \u003d new Age(age);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (comment \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Comment.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        final Comment modelComment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Patient(modelName, modelTemp, modelPeriod, modelPhone, modelAge, modelComment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 18,
      "chiamyunqing": 47,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonAdaptedRoom {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String PATIENT_PRESENT_IS_OCCUPIED_FALSE \u003d \"When patient is present isOccupied cannot be false\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String PATIENT_ABSENT_IS_OCCUPIED_TRUE \u003d \"When patient is absent isOccupied cannot be true\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String DATE_WRONG_FORMAT_IN_TASKS \u003d \"The date is given in the wrong format in tasks.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String PATIENT_WRONG_FORMAT \u003d \"The patient is given in the wrong format\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int roomNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isOccupied;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private JsonAdaptedPatient patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private JsonSerializableTaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates JsonAdaptedRoom based on the inputs given by the user of roomNumber and isOccupied"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedRoom(@JsonProperty(\"roomNumber\") int roomNumber,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"isOccupied\") boolean isOccupied,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"patient\") JsonAdaptedPatient patient,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"tasks\") JsonSerializableTaskList tasks) throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (patient !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates JsonAdaptedRoom from Room object given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedRoom(Room source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d source.getRoomNumber();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d source.isOccupied();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (source.getPatient() !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            this.patient \u003d new JsonAdaptedPatient(source.getPatient());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.tasks \u003d new JsonSerializableTaskList(source.getTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this Jackson-friendly adapted Room object into the model\u0027s {@code Room} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted room."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Room toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.patient !\u003d null \u0026\u0026 !isOccupied) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(PATIENT_PRESENT_IS_OCCUPIED_FALSE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.patient \u003d\u003d null \u0026\u0026 isOccupied) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(PATIENT_ABSENT_IS_OCCUPIED_TRUE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (patient !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                patient.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (IllegalValueException i) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new IllegalValueException(PATIENT_WRONG_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IllegalValueException i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(DATE_WRONG_FORMAT_IN_TASKS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new Room(roomNumber, isOccupied, null, tasks.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Room(roomNumber, isOccupied, patient.toModelType(), tasks.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String DATE_WRONG_FORMAT \u003d \"The date is given in the wrong format.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dueAt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given Task details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                           @JsonProperty(\"dueAt\") String dueAt) throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dueAt \u003d dueAt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dueAt \u003d source.getDueAt().getVal();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this Jackson-friendly adapted Task object into the model\u0027s {@code Room} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        DateTimeDue dateTimeDue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (dueAt \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                dateTimeDue \u003d new DateTimeDue(Optional.empty());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                dateTimeDue \u003d new DateTimeDue(dueAt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IllegalArgumentException i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new IllegalValueException(DATE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Task(new Description(description), dateTimeDue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPatientRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * A class to access patient records data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class JsonPatientRecordsStorage implements PatientRecordsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPatientRecordsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public JsonPatientRecordsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Path getPatientRecordsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cReadOnlyPatientRecords\u003e readPatientRecords()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return readPatientRecords(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Similar to {@link #readPatientRecords()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cReadOnlyPatientRecords\u003e readPatientRecords(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cJsonSerializablePatientRecords\u003e jsonPatientRecords \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                filePath, JsonSerializablePatientRecords.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!jsonPatientRecords.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return Optional.of(jsonPatientRecords.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void savePatientRecords(ReadOnlyPatientRecords patientRecords) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        savePatientRecords(patientRecords, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Similar to {@link #savePatientRecords(ReadOnlyPatientRecords)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void savePatientRecords(ReadOnlyPatientRecords patientRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        requireNonNull(patientRecords);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePatientRecords(patientRecords), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 21,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonRoomOccupancyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Reads data from storage data files and imports them into RoomList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonRoomOccupancyStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path roomsOccupied;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonRoomOccupancyStorage() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates RoomOccupancyStorage object that reads the number of rooms a hotel has and the rooms which are"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * occupied"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonRoomOccupancyStorage(Path roomsOccupied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomsOccupied \u003d roomsOccupied;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path getRoomsOccupied() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomsOccupied;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Optional\u003cReadOnlyRoomList\u003e readOnlyRoomOccupancy() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return readOnlyRoomOccupancy(roomsOccupied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns RoomList data as a {@link ReadOnlyRoomList}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Optional\u003cReadOnlyRoomList\u003e readOnlyRoomOccupancy(Path filePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Optional\u003cJsonSerializableRoomList\u003e jsonCovigentApp \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                filePath, JsonSerializableRoomList.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!jsonCovigentApp.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return Optional.of(jsonCovigentApp.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveOccupiedRooms(RoomList roomList) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        saveOccupiedRooms(roomList, roomsOccupied);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Function saves the room numbers of occupied rooms"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param roomList contains information of which rooms are occupied"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param fileRoomsOccupied Path to where to write the room numbers of occupied rooms"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveOccupiedRooms(RoomList roomList, Path fileRoomsOccupied) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        FileUtil.createIfMissing(fileRoomsOccupied);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.addAll(roomList.getRoomObservableList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRoomList(roomList), fileRoomsOccupied);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 3,
      "chiamyunqing": 3,
      "itssodium": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePatientRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * An Immutable Patient Records that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "@JsonRootName(value \u003d \"covigentapp\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "class JsonSerializablePatientRecords {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Constructs a {@code JsonSerializablePatientRecords} with the given patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public JsonSerializablePatientRecords(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.patients.addAll(patients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Converts a given {@code ReadOnlyPatientRecords} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePatientRecords}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public JsonSerializablePatientRecords(ReadOnlyPatientRecords source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Converts this address book into the model\u0027s {@code PatientRecords} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecords toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords patientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            Patient patient \u003d jsonAdaptedPatient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            if (patientRecords.hasPatient(patient)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            patientRecords.addPatient(patient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patientRecords;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "LeeMingDe": 1,
      "chiamyunqing": 15,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRoomList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "@JsonRootName(value \u003d \"roomList\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonSerializableRoomList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonProperty(\"rooms\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final List\u003cJsonAdaptedRoom\u003e rooms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Constructs a {@code JsonSerializableRoomList} with the given rooms."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableRoomList(@JsonProperty(\"rooms\") List\u003cJsonAdaptedRoom\u003e rooms) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.rooms.addAll(rooms);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts a given {@code RoomList} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRoomList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableRoomList(RoomList source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        rooms.addAll(source.getRoomObservableList().stream().map(JsonAdaptedRoom::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this task list into the model\u0027s {@code RoomList} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (JsonAdaptedRoom jsonAdaptedRoom : rooms) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d jsonAdaptedRoom.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomList.addRooms(room);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 2,
      "itssodium": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskList} with the given tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts a given {@code TaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public JsonSerializableTaskList(TaskList source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.addAll(source.getInternalList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts this Task List into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public TaskList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        taskList.getInternalList().clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskOccupancyStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Reads data from storage data files and imports them into TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class JsonTaskOccupancyStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Path task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates the TaskOccupancy object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public JsonTaskOccupancyStorage() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates the TaskOccupancy object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public JsonTaskOccupancyStorage(Path task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Path getTask() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readOnlyTaskOccupancy() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return readOnlyTaskOccupancy(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyTaskList}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readOnlyTaskOccupancy(Path filePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonCovigentApp \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (!jsonCovigentApp.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return Optional.of(jsonCovigentApp.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Save the task to the tasklist."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void saveTask(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        saveTasks(taskList, task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Save the task to the tasklist with the path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param fileTask"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void saveTasks(TaskList taskList, Path fileTask) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        FileUtil.createIfMissing(fileTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        tasks.addAll(taskList.getTaskObservableList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(taskList), fileTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PatientRecordsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Represents a storage for {@link PatientRecords}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public interface PatientRecordsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    Path getPatientRecordsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns CovigentApp data as a {@link ReadOnlyPatientRecords}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    Optional\u003cReadOnlyPatientRecords\u003e readPatientRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @see #getPatientRecordsFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    Optional\u003cReadOnlyPatientRecords\u003e readPatientRecords(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Saves the given {@link ReadOnlyPatientRecords} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param patientRecords cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    void savePatientRecords(ReadOnlyPatientRecords patientRecords) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @see #savePatientRecords(ReadOnlyPatientRecords)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    void savePatientRecords(ReadOnlyPatientRecords patientRecords, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public interface Storage extends PatientRecordsStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Path getPatientRecordsFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Optional\u003cReadOnlyPatientRecords\u003e readPatientRecords() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void savePatientRecords(ReadOnlyPatientRecords patientRecords) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /** Reads the data of number of rooms and occupied rooms into RoomList **/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Optional\u003cReadOnlyRoomList\u003e readRoomOccupancyStorage() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskOccupancyStorage() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Saves the information given by user into a hard disk. Such information includes number of rooms and room number"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * of occupied rooms"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param roomList contains user inputs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void saveRoomList(RoomList roomList) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void saveTaskList(TaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "raymondge": 11,
      "itssodium": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Manages storage of CovigentApp data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private PatientRecordsStorage patientRecordsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private JsonRoomOccupancyStorage roomOccupancyStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private JsonTaskOccupancyStorage taskOccupancyStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PatientRecordsStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public StorageManager(PatientRecordsStorage patientRecordsStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                          JsonRoomOccupancyStorage roomOccupancyStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                          JsonTaskOccupancyStorage taskOccupancyStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.patientRecordsStorage \u003d patientRecordsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomOccupancyStorage \u003d roomOccupancyStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.taskOccupancyStorage \u003d taskOccupancyStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient Records methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Path getPatientRecordsFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return patientRecordsStorage.getPatientRecordsFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Optional\u003cReadOnlyPatientRecords\u003e readPatientRecords() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return readPatientRecords(patientRecordsStorage.getPatientRecordsFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Optional\u003cReadOnlyPatientRecords\u003e readPatientRecords(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return patientRecordsStorage.readPatientRecords(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void savePatientRecords(ReadOnlyPatientRecords patientRecords) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        savePatientRecords(patientRecords, patientRecordsStorage.getPatientRecordsFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void savePatientRecords(ReadOnlyPatientRecords patientRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        patientRecordsStorage.savePatientRecords(patientRecords, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomList(RoomList roomList) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomOccupancyStorage.saveOccupiedRooms(roomList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void saveTaskList(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskOccupancyStorage.saveTask(taskList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Optional\u003cReadOnlyRoomList\u003e readRoomOccupancyStorage() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomOccupancyStorage.readOnlyRoomOccupancy();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskOccupancyStorage() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return taskOccupancyStorage.readOnlyTaskOccupancy();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 63,
      "raymondge": 33,
      "itssodium": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Image patientImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/patient.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Image roomImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/room.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Image taskImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/task.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private PatientListPanel patientListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private RoomListPanel roomListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ImageView logoIcon;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private StackPane patientListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TabPane covigentTabs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Tab patientTab;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Tab roomTab;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Tab taskTab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private StackPane roomListPanelPlaceHolder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //set images"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.setTabImage(patientTab, patientImage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.setTabImage(roomTab, roomImage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.setTabImage(taskTab, taskImage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setTabImage(Tab tab, Image image) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ImageView imageView \u003d new ImageView();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        imageView.setFitHeight(90);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        imageView.setFitWidth(90);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        imageView.setImage(image);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tab.setGraphic(imageView);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void displayAppIcon() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        logoIcon.setImage(logoImage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        roomListPanel \u003d new RoomListPanel(logic.getFilteredRoomList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomListPanelPlaceHolder.getChildren().add(roomListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        statusBarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientListPanel getPatientListPanel() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return patientListPanel;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 9,
      "LeeMingDe": 10,
      "chiamyunqing": 12,
      "-": 121,
      "raymondge": 6,
      "itssodium": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * An UI component that displays information of a {@code Patient}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String FXML \u003d \"PatientListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CovigentApp level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label temperature;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code PatientCard} with the given {@code Patient} and index to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientCard(Patient patient, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        name.setText(patient.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        temperature.setText(\"Temperature: \" + patient.getTemperature().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        if (!(other instanceof PatientCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PatientCard card \u003d (PatientCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 13,
      "LeeMingDe": 1,
      "chiamyunqing": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Panel containing the details of the patient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PatientDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String FXML \u003d \"PatientDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public final Patient patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Image imagePatient \u003d new Image(getClass().getResourceAsStream(\"/images/patient_icon.png\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientDetailsPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label patientHeader;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label temperature;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label periodOfStay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private Label comment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Creates a {@code PatientDetailsPanel} with the given {@code Patient}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientDetailsPanel(Patient patient) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        setPatientDetails();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        logger.log(Level.INFO, \"Displayed patient details successfully.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the details of the patient."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private void setPatientDetails() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //sets up the image"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ImageView imageView \u003d new ImageView(imagePatient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        imageView.setFitHeight(30);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        imageView.setFitWidth(30);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        name.setGraphic(imageView);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //fill in the details"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        name.setText(patient.getName().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientHeader.setUnderline(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        temperature.setText(\"Temperature: \" + patient.getTemperature().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        periodOfStay.setText(\"Period of stay: \" + patient.getPeriodOfStay().readerFriendlyString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        phone.setText(\"Phone number: \" + patient.getPhone().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        age.setText(\"Age: \" + patient.getAge().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        comment.setText(\"Comment: \" + patient.getComment().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        if (!(other instanceof PatientDetailsPanel)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientDetailsPanel panel \u003d (PatientDetailsPanel) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patient.equals(panel.patient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PatientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Panel containing the list of patients."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String FXML \u003d \"PatientListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private PatientDetailsPanel patientDetailsPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private ListView\u003cPatient\u003e patientListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private AnchorPane patientDetailsPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code PatientListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        updateDetailsIfChanged(patientList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patientListView.setItems(patientList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Attach listener to {@code patientList} and update details panel."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Fixes issue of editPatient changes not immediately reflected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param patientList to listen for changes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private void updateDetailsIfChanged(ObservableList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientList.addListener(new ListChangeListener\u003cPatient\u003e() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            public void onChanged(Change\u003c? extends Patient\u003e change) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                while (change.next()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    if (change.wasAdded()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        int indexToChange \u003d change.getFrom();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        Patient patientToDisplay \u003d change.getList().get(indexToChange);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        patientListView.scrollTo(indexToChange);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        patientListView.getSelectionModel().select(indexToChange);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        patientListView.getFocusModel().focus(indexToChange);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        patientDetailsPanel \u003d new PatientDetailsPanel(patientToDisplay);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        patientDetailsPanelPlaceholder.getChildren().add(patientDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Handles mouse click event on the patient card."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * @param mouseEvent created by the user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void handleMouseClick(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient patientToDisplay \u003d patientListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientDetailsPanel \u003d new PatientDetailsPanel(patientToDisplay);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientDetailsPanelPlaceholder.getChildren().add(patientDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    class PatientListViewCell extends ListCell\u003cPatient\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        protected void updateItem(Patient patient, boolean empty) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            super.updateItem(patient, empty);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            if (empty || patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 47,
      "chiamyunqing": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * An UI component that displays information of a {@code Room}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String FXML \u003d \"RoomListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CovigentApp level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public final Room room;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image unoccupied \u003d new Image(this.getClass().getResourceAsStream(\"/images/green_circle.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image occupied \u003d new Image(this.getClass().getResourceAsStream(\"/images/red_circle.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label roomNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ImageView showOccupancy;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Label occupancy;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a {@code RoomCode} with the given {@code Room} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public RoomCard(Room room) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //position the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        occupancy.setTranslateX(-70);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        occupancy.setTranslateY(-20);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomNumber.setTranslateX(10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomNumber.setText(String.format(\"Room #%d\", room.getRoomNumber()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        setRoomCard(room);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setRoomCard(Room room) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (room.isOccupied()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Text text \u003d new Text(\"OCCUPIED\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            text.setFill(Color.RED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            occupancy.setGraphic(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            showOccupancy.setImage(occupied);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Text text \u003d new Text(\"UNOCCUPIED\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            text.setFill(Color.GREEN);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            occupancy.setGraphic(text);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            showOccupancy.setImage(unoccupied);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!(other instanceof RoomCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        RoomCard card \u003d (RoomCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return roomNumber.getText().equals(card.roomNumber.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u0026\u0026 room.equals(card.room);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 66,
      "itssodium": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomDetailsPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Panel containing the room details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String FXML \u003d \"RoomDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image imagePatient \u003d new Image(getClass().getResourceAsStream(\"/images/patient_icon.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Image imageTask \u003d new Image(getClass().getResourceAsStream(\"/images/task_icon.png\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomDetailsPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label patientHeader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label taskHeader;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label roomNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label patientDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Label taskDetails;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a {@code RoomDetailsPanel} with the given {@code Room}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public RoomDetailsPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        setIcons();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void setIcons() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ImageView imageView \u003d new ImageView(imagePatient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitHeight(20);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitWidth(20);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        patientHeader.setGraphic(imageView);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView \u003d new ImageView(imageTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitHeight(20);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        imageView.setFitWidth(20);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskHeader.setGraphic(imageView);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the room patient and task details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param room To set the details for."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setRoomDetails(Room room) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (room.getPatient() !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            patientDetails.setText(room.getPatient().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            patientDetails.setText(\"No Patient Present.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomNumber.setText(\"Room #\" + room.getRoomNumber());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskDetails.setText(room.getTaskList().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the details for an empty room."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setEmptyRoomDetails() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomNumber.setText(\"NO ROOM PRESENT\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        patientDetails.setText(\"-\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskDetails.setText(\"-\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoomListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Panel containing the list of rooms."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class RoomListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String FXML \u003d \"RoomListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoomListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private RoomDetailsPanel roomDetailsPanel \u003d new RoomDetailsPanel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ListView\u003cRoom\u003e roomListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private AnchorPane roomDetailsPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a {@code RoomListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public RoomListPanel(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!roomList.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            roomDetailsPanel.setRoomDetails(roomList.get(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            roomDetailsPanel.setEmptyRoomDetails();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomDetailsPanelPlaceholder.getChildren().add(roomDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        updateDetailsIfChanged(roomList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomListView.setItems(roomList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomListView.setCellFactory(listView -\u003e new RoomListViewCell());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles mouse click event on the items."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param mouseEvent Created by the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void handleMouseClick(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Room roomToDisplay \u003d roomListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomDetailsPanel.setRoomDetails(roomToDisplay);;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Attach listener to {@code roomList} and update details panel."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param roomList RoomList to attach listener to."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private void updateDetailsIfChanged(ObservableList\u003cRoom\u003e roomList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        roomList.addListener(new ListChangeListener\u003cRoom\u003e() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            public void onChanged(Change\u003c? extends Room\u003e change) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                while (change.next()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    if (change.wasAdded()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        int indexToChange \u003d change.getFrom();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        Room roomToDisplay \u003d change.getList().get(indexToChange);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomListView.scrollTo(indexToChange);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomListView.getSelectionModel().select(indexToChange);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomListView.getFocusModel().focus(indexToChange);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        roomDetailsPanel.setRoomDetails(roomToDisplay);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Room} using a {@code RoomCard}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    class RoomListViewCell extends ListCell\u003cRoom\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        protected void updateItem(Room room, boolean empty) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            super.updateItem(room, empty);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (empty || room \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                setGraphic(new RoomCard(room).getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 98,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CovigentApp level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Label duedate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Create a Task Card Object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * @param displayedIndex"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        description.setText(task.getDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        duedate.setText(task.getDueAt().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Panel containing the list of task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            mainWindow.displayAppIcon();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"css/MainWindow.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cStackPane styleClass\u003d\"command-box\" stylesheets\u003d\"@../css/CommandBox.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"500.0\" title\u003d\"Covigent\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cURL value\u003d\"@../css/MainWindow.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cURL value\u003d\"@../css/Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cHBox fx:id\u003d\"covigentLogoPlaceholder\" styleClass\u003d\"main-logo-stack-pane\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            \u003cImageView fx:id\u003d\"logoIcon\" fitHeight\u003d\"100.0\" fitWidth\u003d\"200\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \u003cInsets left\u003d\"-10\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cTabPane fx:id\u003d\"covigentTabs\" styleClass\u003d\"main-tab-pane\" rotateGraphic\u003d\"true\" side\u003d\"LEFT\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003ctabs\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003cTab fx:id\u003d\"patientTab\" styleClass\u003d\"main-tab\" text\u003d\"Patients\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003cTab fx:id\u003d\"roomTab\" styleClass\u003d\"main-tab\" text\u003d\"Rooms\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"roomListPanelPlaceHolder\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                 \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003cTab fx:id\u003d\"taskTab\" styleClass\u003d\"main-tab\" text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "          \u003c/tabs\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"main-pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"main-pane-with-border\" VBox.vgrow\u003d\"NEVER\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"200\" maxHeight\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusBarPlaceholder\" alignment\u003d\"BOTTOM_LEFT\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 13,
      "LeeMingDe": 12,
      "chiamyunqing": 15,
      "-": 28,
      "raymondge": 5,
      "itssodium": 6
    }
  },
  {
    "path": "src/main/resources/view/PatientDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c!--emulates room details panel --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cScrollPane fitToWidth\u003d\"true\" styleClass\u003d\"patient-details-panel\" stylesheets\u003d\"@../css/PatientDetailsPanel.css\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cLabel id\u003d\"nameOfPatient\" fx:id\u003d\"name\" text\u003d\"\\$name\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cLabel id\u003d\"detailsHeader\" fx:id\u003d\"patientHeader\" text\u003d\"Patient Details:\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cLabel fx:id\u003d\"temperature\" text\u003d\"\\$temperature\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cLabel fx:id\u003d\"periodOfStay\" text\u003d\"\\$periodOfStay\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$phone\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cLabel fx:id\u003d\"age\" text\u003d\"\\$age\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003cLabel fx:id\u003d\"comment\" text\u003d\"\\$comment\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003ceffect\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003c/effect\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 68
    }
  },
  {
    "path": "src/main/resources/view/PatientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" styleClass\u003d\"card-pane\" stylesheets\u003d\"@../css/ListCard.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"label-big\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"label-big\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cLabel fx:id\u003d\"temperature\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$temperature\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "chiamyunqing": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/PatientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003cHBox stylesheets\u003d\"@../css/ListPanel.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cVBox maxWidth\u003d\"350.0\" minWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "      \u003cListView fx:id\u003d\"patientListView\" onMouseClicked\u003d\"#handleMouseClick\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"patientDetailsPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 10,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\"  stylesheets\u003d\"@../css/ResultDisplay.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" styleClass\u003d\"result-display\" text\u003d\"Welcome to Covigent. Key in any command to get started.\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 6,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/resources/view/RoomDetailsPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cScrollPane styleClass\u003d\"room-details-panel\" stylesheets\u003d\"@../css/RoomDetailsPanel.css\" fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003cLabel id\u003d\"room-number\" fx:id\u003d\"roomNumber\" text\u003d\"Room Number\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003cLabel fx:id\u003d\"patientHeader\" graphicTextGap\u003d\"7.0\" styleClass\u003d\"label-header\" text\u003d\"Patient Details:\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cLabel fx:id\u003d\"patientDetails\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskHeader\" graphicTextGap\u003d\"7.0\" styleClass\u003d\"label-header\" text\u003d\"Tasks:\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskDetails\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003ceffect\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003c/effect\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 13,
      "LeeMingDe": 52
    }
  },
  {
    "path": "src/main/resources/view/RoomListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" styleClass\u003d\"card-pane\" stylesheets\u003d\"@../css/ListCard.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003cImageView fx:id\u003d\"showOccupancy\" fitHeight\u003d\"22.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" translateX\u003d\"-3.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cLabel fx:id\u003d\"roomNumber\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"label-big\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cLabel fx:id\u003d\"occupancy\" alignment\u003d\"TOP_LEFT\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 7,
      "LeeMingDe": 27,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/resources/view/RoomListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cHBox stylesheets\u003d\"@../css/ListPanel.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cVBox maxWidth\u003d\"350.0\" minWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        \u003cListView fx:id\u003d\"roomListView\" onMouseClicked\u003d\"#handleMouseClick\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "      \u003cAnchorPane fx:id\u003d\"roomDetailsPanelPlaceholder\" minWidth\u003d\"300.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 6,
      "LeeMingDe": 9
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" stylesheets\u003d\"@../css/StatusBarFooter.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 10,
      "itssodium": 1
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" styleClass\u003d\"card-pane\" stylesheets\u003d\"@../css/ListCard.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"label-big\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"label-big\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            \u003cLabel fx:id\u003d\"duedate\" styleClass\u003d\"label-small\" text\u003d\"\\$temperature\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "raymondge": 34
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003cVBox stylesheets\u003d\"@../css/ListPanel.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "raymondge": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final Index fifthPatientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(fifthPatientIndex.equals(fifthPatientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(fifthPatientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateTimeUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullText_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                null, LocalDate::from, DateTimeFormatter.ofPattern(\"yyyyMMdd\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullQuery_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", null, DateTimeFormatter.ofPattern(\"yyyyMMdd\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_nullFormatter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, (DateTimeFormatter) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_noFormattersGiven_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateFormatterInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_YEAR_MONTH_DAY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"Dec 30 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"2020/12/30\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateTimeFormatterInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from, DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"Dec 30 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // EP: invalid text for DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"2020/12/30\", LocalDateTime::from,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateFormattersInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"aaa\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateTimeFormattersInvalidText_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30122020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"aaa\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_singleDateTimeFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int hour \u003d 23;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int minute \u003d 59;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (custom time)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultHour \u003d 0;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultMinute \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithDefaultTime \u003d LocalDateTime.of(year, month, day, defaultHour, defaultMinute);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (default time)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDateTime::from,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDateTime::from,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDateTime::from,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_YEAR_MONTH_DAY,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATE_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDate date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(date, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDate::from, formatters));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseFirstMatching_manyDateTimeFormatterValidText_correctObject() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeFormatter[] formatters \u003d {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_YEAR_MONTH_DAY_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_LONG_SPACE_DELIMITED_OPTIONAL_TIME,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            DateTimeUtil.DATETIME_FORMAT_DAY_MONTH_YEAR_SLASH_DELIMITED_OPTIONAL_TIME"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int year \u003d 2020;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int month \u003d 12;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int day \u003d 30;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int hour \u003d 23;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int minute \u003d 59;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithCustomTime \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (custom time)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithCustomTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020 2359\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultHour \u003d 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        int defaultMinute \u003d 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        LocalDateTime dateWithDefaultTime \u003d LocalDateTime.of(year, month, day, defaultHour, defaultMinute);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         * EP: Valid text (default time)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"20201230\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30 Dec 2020\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(dateWithDefaultTime, DateTimeUtil.parseFirstMatching("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                \"30/12/2020\", LocalDateTime::from, formatters));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 246
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.storage.JsonPatientRecordsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.storage.JsonRoomOccupancyStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.storage.JsonTaskOccupancyStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonPatientRecordsStorage covigentAppStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonPatientRecordsStorage(temporaryFolder.resolve(\"covigentApp.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage roomOccupancyStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonRoomOccupancyStorage(temporaryFolder.resolve(\"roomsOccupied\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonTaskOccupancyStorage taskOccupancyStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new JsonTaskOccupancyStorage((temporaryFolder.resolve(\"task\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new StorageManager(covigentAppStorage, userPrefsStorage, roomOccupancyStorage, taskOccupancyStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String deleteCommand \u003d \"deletepatient IDoNotExist\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String listCommand \u003d ListPatientCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(listCommand, ListPatientCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // Setup LogicManager with JsonPatientRecordsIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonPatientRecordsStorage covigentAppStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                new JsonPatientRecordsIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCovigentApp.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage roomOccupancyStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonRoomOccupancyStorage(temporaryFolder.resolve(\"roomsOccupied\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonTaskOccupancyStorage taskOccupancyStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new JsonTaskOccupancyStorage(temporaryFolder.resolve(\"task\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new StorageManager(covigentAppStorage, userPrefsStorage, roomOccupancyStorage, taskOccupancyStorage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String addPatientCommand \u003d AddPatientCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + NAME_DESC_AMY + TEMP_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PERIOD_DESC_AMY + PHONE_DESC_AMY + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.addPatient(expectedPatient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(addPatientCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static class JsonPatientRecordsIoExceptionThrowingStub extends JsonPatientRecordsStorage {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        private JsonPatientRecordsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public void savePatientRecords(ReadOnlyPatientRecords patientRecords, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 13,
      "LeeMingDe": 1,
      "chiamyunqing": 20,
      "-": 128,
      "raymondge": 12,
      "itssodium": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_emptyCovigentApp_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_nonEmptyCovigentApp_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(getTypicalPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.setPatientRecords(new PatientRecords());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "chiamyunqing": 1,
      "-": 24,
      "raymondge": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NewCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class NewCommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // General"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Patients"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_TEMP_AMY \u003d \"36.7\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_TEMP_BOB \u003d \"37.0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_PERIOD_AMY \u003d \"20200912-20200918\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_PERIOD_BOB \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_AGE_AMY \u003d \"22\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String VALID_AGE_BOB \u003d \"45\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMENT_AMY \u003d \"Down with flu\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String TEMP_DESC_AMY \u003d \" \" + PREFIX_TEMP + VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String TEMP_DESC_BOB \u003d \" \" + PREFIX_TEMP + VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String PERIOD_DESC_AMY \u003d \" \" + PREFIX_PERIOD_OF_STAY + VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String PERIOD_DESC_BOB \u003d \" \" + PREFIX_PERIOD_OF_STAY + VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String COMMENT_DESC_AMY \u003d \" \" + PREFIX_COMMENTS + COMMENT_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_TEMP_DESC \u003d \" \" + PREFIX_TEMP + \"36.P\"; //non-numeric not allowed in temperature"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_PERIOD_DESC \u003d \" \" + PREFIX_PERIOD_OF_STAY + \"20200913-20201838\"; //invalid date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"999\"; //cannot be so old"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String NO_COMMENT \u003d \"-\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final String COMMENT \u003d \"History of heart attack\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final EditPatientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final EditPatientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withAge(VALID_AGE_AMY).withComment(COMMENT).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTemperature(VALID_TEMP_BOB).withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withAge(VALID_AGE_BOB).withComment(NO_COMMENT).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Tasks"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_DESCRIPTION_REMIND_PATIENT \u003d \"Remind Alice to change bedsheets.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_DESCRIPTION_ORDER_BEDSHEET \u003d \"Order new bedsheets for Room #3.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_DATETIME_DUE_REMIND_PATIENT \u003d \"20201230 2359\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_DATETIME_DUE_ORDER_BEDSHEET \u003d \"20201023 1930\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index VALID_TASK_INDEX_ONE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index VALID_TASK_INDEX_TWO \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_VALUE \u003d \"aaa\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_FORMAT \u003d \"2020-12-31\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_TASK_NUMBER \u003d \"-1\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DESCRIPTION_DESC_REMIND_PATIENT \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String DESCRIPTION_DESC_ORDER_BEDSHEETS \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + VALID_DATETIME_DUE_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DATETIME_DUE_DESC_REMIND_PATIENT \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + VALID_DATETIME_DUE_REMIND_PATIENT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String DATETIME_DUE_DESC_ORDER_BEDSHEETS \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + VALID_DATETIME_DUE_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String TASK_NUMBER_DESC_ONE \u003d \" \" + PREFIX_TASK_NUMBER + \"1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String TASK_NUMBER_DESC_TWO \u003d \" \" + PREFIX_TASK_NUMBER + \"2\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_VALUE_DESC \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + INVALID_DATETIME_DUE_VALUE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_DATETIME_DUE_FORMAT_DESC \u003d \" \" + PREFIX_DUE_DATE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + INVALID_DATETIME_DUE_FORMAT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_TASK_NUMBER_DESC \u003d \" \" + PREFIX_TASK_NUMBER"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + INVALID_TASK_NUMBER;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    // Rooms"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_ROOM_NUMBER_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final int VALID_ROOM_NUMBER_SEVEN \u003d 7;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final int VALID_ROOM_NUMBER_EIGHT \u003d 8;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index VALID_ROOM_INDEX_ONE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index VALID_ROOM_INDEX_TWO \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_PATIENT_NAME_JAMES \u003d \"james\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_PATIENT_NAME_AMY \u003d \"amy\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_ROOM_NUMBER \u003d \"-1\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NON_NUMBER_ROOM_NUMBER \u003d \"a\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NON_INTEGER_ROOM_NUMBER \u003d \"1.1\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_PATIENT_NAME_JAMES \u003d \"james$\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String ROOM_NUMBER_DESC_ONE \u003d \" \" + PREFIX_ROOM_NUMBER + \"1\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String ROOM_NUMBER_DESC_TWO \u003d \" \" + PREFIX_ROOM_NUMBER + \"2\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String ROOM_NUMBER_SEVEN_DESC \u003d \" \" + PREFIX_ROOM_NUMBER + \"7\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String ROOM_NUMBER_EIGHT_DESC \u003d \" \" + PREFIX_ROOM_NUMBER + \"8\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_NAME_JAMES_DESC \u003d \" \" + PREFIX_PATIENT_NAME + VALID_PATIENT_NAME_JAMES;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String VALID_NAME_AMY_DESC \u003d \" \" + PREFIX_PATIENT_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String INVALID_ROOM_NUMBER_DESC \u003d \" \" + PREFIX_ROOM_NUMBER"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            + INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NON_NUMBER_ROOM_NUMBER_DESC \u003d \" \" + PREFIX_ROOM_NUMBER"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + INVALID_NON_NUMBER_ROOM_NUMBER;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_INTEGER_ROOM_NUMBER_DESC \u003d \" \" + PREFIX_ROOM_NUMBER"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        + INVALID_NON_INTEGER_ROOM_NUMBER;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    //invalid name with symbol"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NAME_JAMES_DESC \u003d \" \" + PREFIX_PATIENT_NAME + INVALID_PATIENT_NAME_JAMES;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static final String INVALID_NAME_AMY_DESC \u003d \" \" + PREFIX_PATIENT_NAME + VALID_NAME_AMY + \"$\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * - the address book, filtered patient list and selected patient in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords expectedCovigentApp \u003d new PatientRecords(actualModel.getPatientRecords());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(expectedCovigentApp, actualModel.getPatientRecords());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the patient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static void showPatientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(1, model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 84,
      "LeeMingDe": 23,
      "chiamyunqing": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/AddPatientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddPatientCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().withName(\"John Doe\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(new AddPatientCommand(validPatient), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patientInList \u003d model.getPatientRecords().getPatientList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(new AddPatientCommand(patientInList), model, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 9,
      "chiamyunqing": 4,
      "-": 26,
      "raymondge": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/AddPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.stubs.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddPatientCommandTest.ModelStubAcceptingPatientAdded modelStub \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new AddPatientCommandTest.ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(validPatient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ModelStub modelStub \u003d new AddPatientCommandTest.ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(CommandException.class, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                addPatientCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private class ModelStubWithPatient extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return this.patient.isSamePatient(patient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return patientsAdded.stream().anyMatch(patient::isSamePatient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        public ReadOnlyPatientRecords getPatientRecords() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            return new PatientRecords();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 39,
      "chiamyunqing": 21,
      "-": 56,
      "itssodium": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/DeletePatientCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code DeletePatientCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class DeletePatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //patient records -\u003e [ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //room list -\u003e [room 7, Alice; room 8, Benson; room 10, null]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), new UserPrefs(), getTypicalRoomList(), new TaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_deletePatientInRoom_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient alice \u003d model.getFilteredPatientList().get(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name aliceName \u003d alice.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(aliceName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, alice);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new UserPrefs(), getTypicalRoomList(), new TaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.clearRoom(aliceName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.deletePatient(alice);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 35,
      "raymondge": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/DeletePatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeletePatientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_validNameUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name patientToDeleteName \u003d patientToDelete.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(patientToDeleteName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePatientCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.deletePatient(patientToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_invalidNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name invalidPatientName \u003d new Name(\"Obviously invalid name\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(invalidPatientName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name jane1 \u003d new Name(\"Jane Doe\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name jane2 \u003d new Name(\"jane doe\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name john \u003d new Name(\"John Doe\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(jane1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deleteSecondCommand \u003d new DeletePatientCommand(john);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same names of patient -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(jane2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 10,
      "chiamyunqing": 19,
      "-": 43,
      "raymondge": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/EditPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Contains integration tests and unit tests for EditPatientCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(new Name(\"Alice Pauline\"), descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()), new UserPrefs(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PatientBuilder patientInList \u003d new PatientBuilder(TypicalPatients.GEORGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(\"George Best\"), descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()), new UserPrefs(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.setPatient(TypicalPatients.GEORGE, editedPatient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(\"Alice Pauline\"), new EditPatientDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()), new UserPrefs(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(\"Alice Pauline\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()), new UserPrefs(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(\"Benson Meier\"), descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_duplicatePatientFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Edit patient in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient patientInList \u003d model.getPatientRecords().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(\"Alice Pauline\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditPatientDescriptorBuilder(patientInList).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void execute_invalidPatientNameUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand editCommand \u003d new EditPatientCommand(new Name(\"Unknown\"), descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        final EditPatientCommand standardCommand \u003d new EditPatientCommand(new Name(\"Amy Bee\"), DESC_AMY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Same values -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(new Name(\"Amy Bee\"), copyDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different index -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(new Name(\"Bob Choo\"), DESC_AMY)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientCommand(new Name(\"Amy Bee\"), DESC_BOB)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 40,
      "LeeMingDe": 105,
      "chiamyunqing": 8,
      "raymondge": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/ListPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.showPatientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListPatientCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ListPatientCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        showPatientAtIndex(model, INDEX_FIRST_PATIENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 7,
      "chiamyunqing": 1,
      "-": 27,
      "raymondge": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patient/SearchPatientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.MESSAGE_NOT_FOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.MESSAGE_PATIENT_NOT_FOUND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.MESSAGE_SEARCH_PATIENT_LIST_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.patient.SearchPatientCommand.SearchPatientDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRangePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.testutil.SearchPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Contains unit tests for SearchPatientCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void execute_searchPatientName_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withName(\"Joe Khan\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Joe Khan\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"Joe Khan\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS, patient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()), new UserPrefs(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandSuccess(searchPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void execute_searchPatientTemperature_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withTemperature(\"40.0\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TemperatureRangePredicate predicate \u003d new TemperatureRangePredicate(39.9, 40.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withTemperatureRange(\"39.9-40.0\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_SEARCH_PATIENT_LIST_SUCCESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PatientRecords(model.getPatientRecords()), new UserPrefs(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandSuccess(searchPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void execute_searchPatientInvalidSearchCriteria_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandFailure(searchPatientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void execute_searchPatientTemperatureRange_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        TemperatureRangePredicate predicate \u003d new TemperatureRangePredicate(36.9, 37.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withTemperature(\"36.0\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withTemperatureRange(\"36.9-37.0\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandFailure(searchPatientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void execute_searchPatientName_throwsCommandException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Patient patient \u003d new PatientBuilder().withName(\"Joe\").build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"koe\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"koe\").build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientCommand searchPatientCommand \u003d new SearchPatientCommand(descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.setPatient(model.getFilteredPatientList().get(0), patient);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model.updateFilteredPatientList(predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PATIENT_NOT_FOUND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandFailure(searchPatientCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor joeDescriptor \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"Joe\").build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final SearchPatientCommand searchCommand \u003d new SearchPatientCommand(joeDescriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchPatientDescriptor amyDescriptor \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new SearchPatientDescriptorBuilder().withName(\"Amy\").build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        final SearchPatientCommand newSearchCommand \u003d new SearchPatientCommand(amyDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(searchCommand.equals(searchCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(searchCommand.equals(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(searchCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertNotEquals(newSearchCommand, searchCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/AddRoomsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_ZERO_CANNOT_BE_AN_INPUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class AddRoomsCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_addRooms_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.addRooms(100);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_SUCCESS, 100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandSuccess(new InitRoomCommand(100), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_addRooms_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.addRooms(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(0), model, MESSAGE_ZERO_CANNOT_BE_AN_INPUT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.addRooms(-100);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertCommandFailure(new InitRoomCommand(-100), model, MESSAGE_NEGATIVE_VALUES_CANNOT_BE_INPUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 6,
      "chiamyunqing": 2,
      "raymondge": 5,
      "itssodium": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/EditRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_ALREADY_ASSIGNED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.room.EditRoomCommand.MESSAGE_DUPLICATE_ROOM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.room.EditRoomCommand.MESSAGE_EDIT_ROOM_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.CARL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.EditRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains integration tests and unit tests for EditRoomCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "class EditRoomCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //patient records -\u003e [ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //room list -\u003e [room 7, Alice; room 8, Benson; room 10, null]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), new UserPrefs(), getTypicalRoomList(), new TaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_nullInputs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditRoomCommand(null, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_invalidRoomNumber_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(-100, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editRoomCommand, model, MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_changeRoomNumber_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToEdit \u003d model.getRoomList().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberToEdit \u003d roomToEdit.getRoomNumber();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder(roomToEdit).withRoomNumber(roomNumberToEdit + 10).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withRoomNumber(roomNumberToEdit + 10).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(roomNumberToEdit, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ROOM_SUCCESS, editedRoom);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(model.getModifiableRoomList()), new TaskList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.setSingleRoom(roomToEdit, editedRoom);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(editRoomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_changePatientInRoom_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToEdit \u003d model.getRoomList().get(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberToEdit \u003d roomToEdit.getRoomNumber();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder(roomToEdit).withPatient(CARL).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(CARL.getName()).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(roomNumberToEdit, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ROOM_SUCCESS, editedRoom);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(model.getModifiableRoomList()), new TaskList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.setSingleRoom(roomToEdit, editedRoom);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(editRoomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_clearRoom_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToEdit \u003d model.getRoomList().get(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberToEdit \u003d roomToEdit.getRoomNumber();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room editedRoom \u003d new RoomBuilder(roomToEdit).withIsOccupied(false).withPatient(null).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withOccupancy(false).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(roomNumberToEdit, descriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EDIT_ROOM_SUCCESS, editedRoom);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new RoomList(model.getModifiableRoomList()), new TaskList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.setSingleRoom(roomToEdit, editedRoom);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(editRoomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_allocatePatientAlreadyInAnotherRoom_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToEdit \u003d model.getRoomList().get(2); //the empty room"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberToEdit \u003d roomToEdit.getRoomNumber();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient patientInAnotherRoom \u003d model.getRoomList().get(0).getPatient();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(patientInAnotherRoom.getName()).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(roomNumberToEdit, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(editRoomCommand, model, MESSAGE_PATIENT_ALREADY_ASSIGNED);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_invalidPatientAllocated_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToEdit \u003d model.getRoomList().get(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberToEdit \u003d roomToEdit.getRoomNumber();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(BOB.getName()).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(roomNumberToEdit, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(editRoomCommand, model, Messages.MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_changeRoomNumberToDuplicateRoomNumber_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room roomToEdit \u003d model.getRoomList().get(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer roomNumberToEdit \u003d roomToEdit.getRoomNumber();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Integer duplicateRoomNumber \u003d model.getRoomList().get(1).getRoomNumber();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withRoomNumber(duplicateRoomNumber).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomCommand \u003d new EditRoomCommand(roomNumberToEdit, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(editRoomCommand, model, MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room editRoom7 \u003d model.getRoomList().get(0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor1 \u003d new EditRoomDescriptorBuilder(editRoom7)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withRoomNumber(20).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomNumberCommand \u003d new EditRoomCommand(editRoom7.getRoomNumber(), descriptor1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Room editRoom8 \u003d model.getRoomList().get(1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor2 \u003d new EditRoomDescriptorBuilder(editRoom8)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .withPatient(CARL.getName()).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editPatientInRoomCommand \u003d new EditRoomCommand(editRoom8.getRoomNumber(), descriptor2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(editRoomNumberCommand.equals(editRoomNumberCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        EditRoomCommand editRoomNumberCommandCopy \u003d new EditRoomCommand(editRoom7.getRoomNumber(), descriptor1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(editRoomNumberCommand.equals(editRoomNumberCommandCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(editRoomNumberCommand.equals(1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(editRoomNumberCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different attributes to edit"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(editRoomNumberCommand.equals(editPatientInRoomCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 5,
      "chiamyunqing": 161,
      "raymondge": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/FindRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class FindRoomCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_numberOfRooms_notDefined() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandFailure(new FindRoomCommand(), model, FindRoomCommand.NUMBER_OF_ROOMS_UNDEFINED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void execute_numberOfRooms_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model model \u003d new ModelManager(new PatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new ModelManager(model.getPatientRecords(), new UserPrefs(), new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e predicate \u003d getFilterByRoomNumberPredicate(new Room(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.updateFilteredRoomList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        model.addRooms(100);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        expectedModel.addRooms(100);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedMessage \u003d String.format(FindRoomCommand.MESSAGE_SUCCESS, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertCommandSuccess(new FindRoomCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Predicate\u003cRoom\u003e getFilterByRoomNumberPredicate(Room room) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Predicate\u003cRoom\u003e filterByRoomNumber \u003d room1 -\u003e room1.getRoomNumber() \u003d\u003d room.getRoomNumber();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return filterByRoomNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 1,
      "chiamyunqing": 2,
      "raymondge": 5,
      "itssodium": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/ListRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListRoomCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class ListRoomCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //note: can\u0027t have empty patient records since the room list contains the patients"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        model \u003d new ModelManager(getTypicalPatientRecords(), new UserPrefs(), getTypicalRoomList(), new TaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPatientRecords(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new UserPrefs(), model.getModifiableRoomList(), new TaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void execute_list_showsEverything() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertCommandSuccess(new ListRoomCommand(), model, ListRoomCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/room/SearchRoomCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.commands.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PATIENT_NO_ROOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.room.SearchRoomCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.FIONA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM7_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM8_PATIENT_BENSON_NO_TASK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NUMBER_7;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.SearchRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Contains unit tests for SearchRoomCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //patient records -\u003e [ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    //room list -\u003e [room 7, Alice; room 8, Benson; room 10, null]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), new UserPrefs(), getTypicalRoomList(), new TaskList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "            new ModelManager(getTypicalPatientRecords(), new UserPrefs(), getTypicalRoomList(), new TaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_nullRoomNumber_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SearchRoomCommand(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findInvalidRoomNumber_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorRoomNum \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorRoomNum.setRoomNumber(9999);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptorRoomNum.build());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(searchRoomCommand, model, MESSAGE_INVALID_ROOM_NUMBER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findInvalidPatientInRoom_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //patient name not in Covigent"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorNameNotInApp \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorNameNotInApp.setPatientName(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand noPatientSearchRoomCommand \u003d new SearchRoomCommand(descriptorNameNotInApp.build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertCommandFailure(noPatientSearchRoomCommand, model, MESSAGE_INVALID_PATIENT_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //patient is not in any room"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorPatientNotInRoom \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorPatientNotInRoom.setPatientName(FIONA.getName().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand patientNotInRoomSearchRoomCommand \u003d new SearchRoomCommand(descriptorPatientNotInRoom.build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandFailure(patientNotInRoomSearchRoomCommand, model, MESSAGE_PATIENT_NO_ROOM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findValidRoomNumber_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorRoomNum \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorRoomNum.setRoomNumber(ROOM_NUMBER_7);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptorRoomNum.build());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.getRoomNumber() \u003d\u003d ROOM_NUMBER_7);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(searchRoomCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(Arrays.asList(ROOM7_PATIENT_ALICE_NO_TASK), model.getFilteredRoomList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void execute_findValidPatientRoom_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorPatientName \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorPatientName.setPatientName(BENSON.getName().toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptorPatientName.build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        expectedModel.updateFilteredRoomList(room -\u003e room.isOccupied()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                \u0026\u0026 room.getPatient().getName().equals(BENSON.getName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertCommandSuccess(searchRoomCommand, model, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(Arrays.asList(ROOM8_PATIENT_BENSON_NO_TASK), model.getFilteredRoomList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptor1 \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor1.setPatientName(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommand \u003d new SearchRoomCommand(descriptor1.build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptor2 \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor2.setRoomNumber(3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(searchRoomCommand.equals(searchRoomCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomCommand searchRoomCommandCopy \u003d new SearchRoomCommand(descriptor1.build());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(searchRoomCommand.equals(searchRoomCommandCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchRoomCommand.equals(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchRoomCommand.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // different attributes to edit"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(searchRoomCommand.equals(new SearchRoomCommand(descriptor2.build())));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "chiamyunqing": 110,
      "raymondge": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/AddTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_EIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTaskCommand(null, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullRoomIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new AddTaskCommand(REMIND_PATIENT, -1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // TODO: set up RoomList and Model stubs for testing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRemindPatientToRoomSeven \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(addRemindPatientToRoomSeven.equals(addRemindPatientToRoomSeven));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRemindPatientToRoomSevenCopy \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(addRemindPatientToRoomSeven.equals(addRemindPatientToRoomSevenCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRestockSupplyToRoomSeven \u003d new AddTaskCommand(RESTOCK_SUPPLY, VALID_ROOM_NUMBER_SEVEN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(addRestockSupplyToRoomSeven));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand addRemindPatientToRoomEight \u003d new AddTaskCommand(REMIND_PATIENT, VALID_ROOM_NUMBER_EIGHT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(addRemindPatientToRoomSeven.equals(addRemindPatientToRoomEight));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/DeleteTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_EIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullTaskIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskOneFromRoomSeven \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(deleteTaskOneFromRoomSeven.equals(deleteTaskOneFromRoomSeven));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskOneFromRoomSevenCopy \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(deleteTaskOneFromRoomSeven.equals(deleteTaskOneFromRoomSevenCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different room index -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskOneFromRoomEight \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_EIGHT, VALID_TASK_INDEX_ONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(deleteTaskOneFromRoomEight));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand deleteTaskTwoFromRoomSeven \u003d new DeleteTaskCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_TWO);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(deleteTaskOneFromRoomSeven.equals(deleteTaskTwoFromRoomSeven));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/EditTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_EIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_TWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullTaskIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, null, descriptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullEditTaskDescriptor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomSeven \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomEight \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_EIGHT, VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskTwoFromRoomSeven \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomSeven));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomSevenCopy \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomSevenCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different room number -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomEight));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task index -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(editTaskTwoFromRoomSeven));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different edit task descriptor -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor modifiedDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modifiedDescriptor.setDescription(new Description(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand editTaskOneFromRoomSevenModifiedDescriptor \u003d new EditTaskCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, modifiedDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(editTaskOneFromRoomSeven.equals(editTaskOneFromRoomSevenModifiedDescriptor));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/task/SearchTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void constructor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SearchTaskCommand(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchTaskCommand searchCommand \u003d new SearchTaskCommand(new DateTimeDue(\"20200105\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchTaskCommand correctSearchCommand \u003d new SearchTaskCommand(new DateTimeDue(\"20200105\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        SearchTaskCommand wrongSearchCommand \u003d new SearchTaskCommand(new DateTimeDue(\"20200106\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(searchCommand.equals(correctSearchCommand));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(searchCommand.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(searchCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // Different due date -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertNotEquals(wrongSearchCommand, searchCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CovigentAppParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TASK_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.ListPatientCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class CovigentAppParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final CovigentAppParser parser \u003d new CovigentAppParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parseCommand_addPatient() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PatientUtil.getAddPatientCommand(patient));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(new AddPatientCommand(patient), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_addTask() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        AddTaskCommand command \u003d (AddTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskUtil.getAddTaskCommand(task, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(new AddTaskCommand(task, VALID_ROOM_NUMBER_SEVEN), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_editPatient() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + patient.getName() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(new EditPatientCommand(patient.getName(), descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_editTask() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(task.getDueAt());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskCommand command \u003d (EditTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskUtil.getEditTaskCommand(task, VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parseCommand_deletePatient() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeletePatientCommand command \u003d (DeletePatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                DeletePatientCommand.COMMAND_WORD + \" \" + \"Alice Pauline\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(new DeletePatientCommand(new Name(\"Alice Pauline\")), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_deleteTask() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DeleteTaskCommand command \u003d (DeleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DeleteTaskCommand.COMMAND_WORD + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD) instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD + \" 3\") instanceof ListPatientCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 59,
      "LeeMingDe": 3,
      "chiamyunqing": 9,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.mock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.mockito.Mockito.when;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_NUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(INDEX_FIRST_PATIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePositiveInteger_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePositiveInteger(\"10 a\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePositiveInteger_negativeInteger_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_NUMBER, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.parsePositiveInteger(\"-1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePositiveInteger_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_NUMBER, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.parsePositiveInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePositiveInteger_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(1, ParserUtil.parsePositiveInteger(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(1, ParserUtil.parsePositiveInteger(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void arePrefixesPresent() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixOnePresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixTwoPresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixThreeMissing \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d mock(ArgumentMultimap.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimap.getValue(prefixOnePresent)).thenReturn(Optional.of(\"one\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimap.getValue(prefixTwoPresent)).thenReturn(Optional.of(\"two\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimap.getValue(prefixThreeMissing)).thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One missing prefix - returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.arePrefixesPresent(argMultimap, prefixThreeMissing));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One present and one missing prefixes - returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.arePrefixesPresent(argMultimap, prefixOnePresent, prefixThreeMissing));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // No prefixes - returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.arePrefixesPresent(argMultimap));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Two present prefixes - returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.arePrefixesPresent(argMultimap, prefixOnePresent, prefixTwoPresent));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isExactlyOnePrefixPresent() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixOnePresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixTwoPresent \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Prefix prefixThreeMissing \u003d mock(Prefix.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d mock(ArgumentMultimap.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimap.getValue(prefixOnePresent)).thenReturn(Optional.of(\"one\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimap.getValue(prefixTwoPresent)).thenReturn(Optional.of(\"two\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        when(argMultimap.getValue(prefixThreeMissing)).thenReturn(Optional.empty());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // No prefixes - returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.isExactlyOnePrefixPresent(argMultimap));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Two present prefixes - returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.isExactlyOnePrefixPresent(argMultimap, prefixOnePresent, prefixTwoPresent));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Two present and one missing prefixes - returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(ParserUtil.isExactlyOnePrefixPresent(argMultimap,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                prefixOnePresent, prefixTwoPresent, prefixThreeMissing));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One present prefix - returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.isExactlyOnePrefixPresent(argMultimap, prefixOnePresent));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // One present and one missing prefixes - returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(ParserUtil.isExactlyOnePrefixPresent(argMultimap, prefixOnePresent, prefixThreeMissing));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 58,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/AddPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_TEMP_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AddPatientCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple temperature - last temp accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_AMY + TEMP_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple period of stay - last period of stay accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + PERIOD_DESC_BOB + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple phone - last phone accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple age - last age accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_AMY + AGE_DESC_BOB, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // no comments"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Patient expectedPatient \u003d new PatientBuilder(AMY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + TEMP_DESC_AMY + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_AMY + AGE_DESC_AMY, new AddPatientCommand(expectedPatient));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + VALID_PHONE_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing temperature prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_TEMP_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing period of stay prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + VALID_PERIOD_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //missing age prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + VALID_AGE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_TEMP_BOB + VALID_PERIOD_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        + VALID_PHONE_BOB + VALID_AGE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + INVALID_PHONE_DESC + AGE_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid temperature"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_TEMP_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Temperature.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid period of stay"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + INVALID_PERIOD_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, PeriodOfStay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid age"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_AGE_DESC, Age.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_TEMP_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 17,
      "chiamyunqing": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/DeletePatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeletePatientCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, \"Mary Doe\", new DeletePatientCommand(new Name(\"Mary Doe\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                DeletePatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 5,
      "chiamyunqing": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/EditPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.COMMENT_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PERIOD_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_TEMP_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.patient.EditPatientCommand.MESSAGE_PATIENT_NOT_EDITED;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.EditPatientDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditPatientCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_PATIENT_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_AGE_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Age.MESSAGE_CONSTRAINTS); // invalid age"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PERIOD_DESC,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                PeriodOfStay.MESSAGE_CONSTRAINTS); // invalid period"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_TEMP_DESC,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Temperature.MESSAGE_CONSTRAINTS); // invalid temperature"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Invalid phone followed by valid age"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + INVALID_PHONE_DESC + AGE_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_AGE_DESC + VALID_PERIOD_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + AGE_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + TEMP_DESC_AMY + PERIOD_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Phone"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Age"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Period"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPeriodOfStay(VALID_PERIOD_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Temperature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withTemperature(VALID_TEMP_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Comment"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + COMMENT_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withComment(COMMENT_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY + AGE_DESC_AMY + TEMP_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PERIOD_DESC_AMY + PHONE_DESC_AMY + AGE_DESC_AMY + TEMP_DESC_AMY + PERIOD_DESC_AMY"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PHONE_DESC_BOB + AGE_DESC_BOB + TEMP_DESC_BOB + PERIOD_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withAge(VALID_AGE_BOB).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_NAME_AMY + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditPatientCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditPatientCommand expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_NAME_AMY + TEMP_DESC_BOB + INVALID_PHONE_DESC + PERIOD_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditPatientCommand(new Name(VALID_NAME_AMY), descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 19,
      "LeeMingDe": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/PatientParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_AGE \u003d \"twenty-two\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_TEMPERATURE \u003d \"37.h\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_PERIOD_OF_STAY \u003d \"20201919-20191817\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String INVALID_TEMP_RANGE \u003d \"37.x-3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_AGE \u003d \"22\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_TEMPERATURE \u003d \"36.7\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_PERIOD_OF_STAY \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String VALID_TEMP_RANGE \u003d \"36.7-37.0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String COMMENT \u003d \"Is asthmatic\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedName, PatientParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedName, PatientParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseAge((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseAge(INVALID_AGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_validValueWithoutWhitespace_returnsAge() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Age expectedAge \u003d new Age(VALID_AGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedAge, PatientParserUtil.parseAge(VALID_AGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseAge_validValueWithWhitespace_returnsTrimmedAge() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String ageWithWhitespace \u003d WHITESPACE + VALID_AGE + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Age expectedAge \u003d new Age(VALID_AGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedAge, PatientParserUtil.parseAge(ageWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseTemperatureRange((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseTemperatureRange(INVALID_TEMP_RANGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_validValueWithoutWhitespace_returnsTempRange() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TemperatureRange expectedTempRange \u003d new TemperatureRange(VALID_TEMP_RANGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTempRange, PatientParserUtil.parseTemperatureRange(VALID_TEMP_RANGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTempRange_validValueWithWhitespace_returnsTrimmedTempRange() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String tempRangeWithWhitespace \u003d WHITESPACE + VALID_TEMP_RANGE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TemperatureRange expectedTempRange \u003d new TemperatureRange(VALID_TEMP_RANGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTempRange, PatientParserUtil.parseTemperatureRange(tempRangeWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parseTemperature(INVALID_TEMPERATURE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_validValueWithoutWhitespace_returnsTemperature() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Temperature expectedTemperature \u003d new Temperature(VALID_TEMPERATURE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTemperature, PatientParserUtil.parseTemperature(VALID_TEMPERATURE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_validValueWithWhitespace_returnsTrimmedTemperature() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String tempWithWhitespace \u003d WHITESPACE + VALID_TEMPERATURE + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Temperature expectedTemperature \u003d new Temperature(VALID_TEMPERATURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTemperature, PatientParserUtil.parseTemperature(tempWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseTemperature_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parseTemperature((String) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPhone, PatientParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPhone, PatientParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PatientParserUtil.parsePeriodOfStay((String) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e PatientParserUtil.parsePeriodOfStay(INVALID_PERIOD_OF_STAY));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_validValueWithoutWhitespace_returnsPeriodOfStay() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PeriodOfStay expectedPeriodOfStay \u003d new PeriodOfStay(VALID_PERIOD_OF_STAY);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPeriodOfStay, PatientParserUtil.parsePeriodOfStay(VALID_PERIOD_OF_STAY));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parsePeriodOfStay_validValueWithWhitespace_returnsTrimmedPeriodOfStay() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String periodOfStayWithWhitespace \u003d WHITESPACE + VALID_PERIOD_OF_STAY + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        PeriodOfStay expectedPeriodOfStay \u003d new PeriodOfStay(VALID_PERIOD_OF_STAY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedPeriodOfStay, PatientParserUtil.parsePeriodOfStay(periodOfStayWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseComment_null_returnsEmptyComment() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Comment emptyComment \u003d new Comment(\"-\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(emptyComment, PatientParserUtil.parseComment(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseComment_validComment_returnsComment() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Comment expectedComment \u003d new Comment(COMMENT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedComment, PatientParserUtil.parseComment(COMMENT));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patient/SearchPatientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.parser.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PERIOD_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP_RANGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private SearchPatientCommandParser parser \u003d new SearchPatientCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void parseError_empty_input() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String invalidTempearature \u003d \" \" + PREFIX_TEMP_RANGE + \"36.0-37\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid temperatureRange"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, invalidTempearature, TemperatureRange.MESSAGE_CONSTRAINTS_TEMPERATURERANGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_invalidPrefix_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid temperature Prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, TEMP_DESC_AMY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid period of stay Prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, PERIOD_DESC_AMY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        //invalid phone Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, PHONE_DESC_AMY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/room/AddRoomsParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.commons.core.Messages.NUMBER_OF_ROOMS_GIVEN_IN_DIGITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.InitRoomCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.InitRoomCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class AddRoomsParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private InitRoomCommandParser parser \u003d new InitRoomCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String input \u003d \"123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, input, new InitRoomCommand(123));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void parseError_empty_input() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void parse_error() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertParseFailure(parser, \"two hundred\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NUMBER_OF_ROOMS_GIVEN_IN_DIGITS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertParseFailure(parser, \"twelve\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NUMBER_OF_ROOMS_GIVEN_IN_DIGITS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 6,
      "itssodium": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/room/EditRoomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_INTEGER_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NAME_JAMES_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NON_NUMBER_ROOM_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NON_NUMBER_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_ROOM_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_DESC_TWO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_JAMES_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PATIENT_NAME_JAMES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_ONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_TWO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.room.EditRoomCommand.MESSAGE_ROOM_NOT_EDITED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_NUMBER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.model.patient.Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.EditRoomCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.testutil.EditRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditRoomCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRoomCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private EditRoomCommandParser parser \u003d new EditRoomCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE, MESSAGE_ROOM_NOT_EDITED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Negative integer input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, INVALID_ROOM_NUMBER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Non-integer input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, INVALID_NON_NUMBER_ROOM_NUMBER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Non-number input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, INVALID_NON_NUMBER_ROOM_NUMBER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No index and no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidRoomNumber_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + INVALID_ROOM_NUMBER_DESC,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                MESSAGE_INVALID_NUMBER); // negative room number"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + INVALID_INTEGER_ROOM_NUMBER_DESC,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                MESSAGE_INVALID_NUMBER); // non integer room number"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + INVALID_NON_NUMBER_ROOM_NUMBER_DESC,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                MESSAGE_INVALID_NUMBER); // room number is not number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidPatientName_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + INVALID_NAME_JAMES_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                MESSAGE_CONSTRAINTS); // invalid patient name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidFieldsValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Invalid room number followed by valid patient name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + INVALID_ROOM_NUMBER_DESC"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + VALID_NAME_JAMES_DESC, MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Valid room number followed by invalid patient name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + INVALID_NAME_JAMES_DESC, MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseFailure(parser, VALID_ROOM_NUMBER_ONE + INVALID_ROOM_NUMBER_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + INVALID_NAME_JAMES_DESC, MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_ROOM_NUMBER_ONE + ROOM_NUMBER_DESC_TWO + VALID_NAME_JAMES_DESC;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_TWO))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withPatient(new Name(VALID_PATIENT_NAME_JAMES))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand expectedCommand \u003d new EditRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE), descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // only valid room number"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_ROOM_NUMBER_ONE + ROOM_NUMBER_DESC_TWO;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_TWO)).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand expectedCommand \u003d new EditRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE), descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // only valid patient"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_ROOM_NUMBER_ONE + VALID_NAME_JAMES_DESC;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_PATIENT_NAME_JAMES)).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE), descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_ROOM_NUMBER_ONE + VALID_NAME_JAMES_DESC + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + VALID_NAME_AMY_DESC + ROOM_NUMBER_DESC_TWO;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_TWO))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_NAME_AMY))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand expectedCommand \u003d new EditRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_ONE), descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // No other valid values specified"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String userInput \u003d VALID_ROOM_NUMBER_TWO + INVALID_ROOM_NUMBER_DESC + ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand.EditRoomDescriptor descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        EditRoomCommand expectedCommand \u003d new EditRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_TWO), descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Other valid values specified"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userInput \u003d VALID_ROOM_NUMBER_TWO + INVALID_ROOM_NUMBER_DESC + VALID_NAME_JAMES_DESC + ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditRoomDescriptorBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withRoomNumber(Integer.valueOf(VALID_ROOM_NUMBER_ONE))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .withPatient(new Name(VALID_PATIENT_NAME_JAMES)).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedCommand \u003d new EditRoomCommand(Integer.valueOf(VALID_ROOM_NUMBER_TWO), descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "LeeMingDe": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/room/SearchRoomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.logic.parser.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_NON_NUMBER_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TEMP_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_NUMBER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.testutil.SearchRoomDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private SearchRoomCommandParser parser \u003d new SearchRoomCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //empty input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //name and room number prefixes not found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, TEMP_DESC_AMY, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //multiple prefixes found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY_DESC + ROOM_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_DESC_ONE + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, TEMP_DESC_AMY + ROOM_NUMBER_DESC_ONE + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_invalidPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid patient name prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //invalid room number prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseFailure(parser, INVALID_NON_NUMBER_ROOM_NUMBER_DESC, MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void parse_validInput_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorName \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorName.setPatientName(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, new SearchRoomCommand(descriptorName.build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        SearchRoomDescriptorBuilder descriptorRoomNum \u003d new SearchRoomDescriptorBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptorRoomNum.setRoomNumber(Integer.parseInt(VALID_ROOM_NUMBER_ONE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_DESC_ONE, new SearchRoomCommand(descriptorRoomNum.build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/AddTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DATETIME_DUE_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DATETIME_DUE_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESCRIPTION_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESCRIPTION_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_FORMAT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_VALUE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_EIGHT_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class AddTaskCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private AddTaskCommandParser parser \u003d new AddTaskCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, new AddTaskCommand(expectedTask, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ORDER_BEDSHEETS + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + ROOM_NUMBER_SEVEN_DESC + DATETIME_DUE_DESC_REMIND_PATIENT, new AddTaskCommand(expectedTask,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple room numbers - last room number accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_EIGHT_DESC"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + ROOM_NUMBER_SEVEN_DESC + DATETIME_DUE_DESC_REMIND_PATIENT, new AddTaskCommand(expectedTask,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple due dates - last due date accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + DATETIME_DUE_DESC_ORDER_BEDSHEETS + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new AddTaskCommand(expectedTask, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no due date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(REMIND_PATIENT).withDateTimeDue(Optional.empty()).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new AddTaskCommand(expectedTask, VALID_ROOM_NUMBER_SEVEN));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DATETIME_DUE_DESC_REMIND_PATIENT + ROOM_NUMBER_SEVEN_DESC, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing room number prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date value"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date format"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + ROOM_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_FORMAT_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid room number"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + INVALID_ROOM_NUMBER_DESC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT, ParserUtil.MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT + INVALID_ROOM_NUMBER_DESC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, ParserUtil.MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + ROOM_NUMBER_DESC_ONE + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 98,
      "LeeMingDe": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/DeleteTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_TASK_NUMBER_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_EIGHT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TASK_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TASK_NUMBER_DESC_TWO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple room numbers - last room number accepted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_EIGHT_DESC + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple task numbers - last task number accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_TWO + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new DeleteTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing room number prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, TASK_NUMBER_DESC_ONE, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing task number prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid room number"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, INVALID_ROOM_NUMBER_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid task number"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + INVALID_TASK_NUMBER_DESC,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/EditTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DATETIME_DUE_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DATETIME_DUE_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESCRIPTION_DESC_ORDER_BEDSHEETS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESCRIPTION_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_FORMAT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_VALUE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_ROOM_NUMBER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_TASK_NUMBER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_EIGHT_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_SEVEN_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TASK_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.TASK_NUMBER_DESC_TWO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_DATETIME_DUE_REMIND_PATIENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_INDEX_ONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_ROOM_NUMBER_SEVEN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditTaskCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private EditTaskCommandParser parser \u003d new EditTaskCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(new Description(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple room numbers - last room number accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_EIGHT_DESC + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple task indexes - last task number accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_TWO + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_ORDER_BEDSHEETS"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // multiple due dates - last due date accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_ORDER_BEDSHEETS + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_TASK_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no description"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDateTimeDue(new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_ROOM_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no due date"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setDescription(new Description(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseSuccess(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new EditTaskCommand(VALID_ROOM_NUMBER_SEVEN, VALID_ROOM_INDEX_ONE, descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_allOptionalFieldsMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // no description or due date"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE, Messages.MESSAGE_TASK_NOT_EDITED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing room number prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // missing task index prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DATETIME_DUE_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date value"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid due date format"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_FORMAT_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid room number"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, INVALID_ROOM_NUMBER_DESC + TASK_NUMBER_DESC_ONE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_NUMBER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid task number"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + INVALID_TASK_NUMBER_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_SEVEN_DESC + INVALID_TASK_NUMBER_DESC + DESCRIPTION_DESC_REMIND_PATIENT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + INVALID_DATETIME_DUE_VALUE_DESC, ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROOM_NUMBER_SEVEN_DESC + TASK_NUMBER_DESC_ONE"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + DESCRIPTION_DESC_REMIND_PATIENT + DATETIME_DUE_DESC_REMIND_PATIENT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/SearchTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.DESCRIPTION_DESC_REMIND_PATIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_FORMAT_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_VALUE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.ROOM_NUMBER_DESC_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.logic.commands.task.SearchTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchTaskCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private SearchTaskCommandParser parser \u003d new SearchTaskCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    void parseError_empty_input() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, \" \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // wrong prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, ROOM_NUMBER_DESC_ONE, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // wrong prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_REMIND_PATIENT, expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid due date value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, INVALID_DATETIME_DUE_VALUE_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid due date format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertParseFailure(parser, INVALID_DATETIME_DUE_FORMAT_DESC, DateTimeDue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raymondge": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/task/TaskParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.INVALID_DATETIME_DUE_VALUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_DATETIME_DUE_REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_DESCRIPTION_REMIND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TaskParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION_REMIND_PATIENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDescription, TaskParserUtil.parseDescription(VALID_DESCRIPTION_REMIND_PATIENT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String descriptionWithWhitespace \u003d PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + VALID_DESCRIPTION_REMIND_PATIENT + PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION_REMIND_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDescription, TaskParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TaskParserUtil.parseDateTimeDue((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(INVALID_DATETIME_DUE_VALUE)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_dateTimeFormatNotAllowed_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(INVALID_DATETIME_DUE_FORMAT)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_validValueWithoutWhitespace_returnsDateTimeDue() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue expectedDateTimeDue \u003d new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDateTimeDue,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(VALID_DATETIME_DUE_REMIND_PATIENT)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void parseDateTimeDue_validValueWithWhitespace_returnsDateTimeDue() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String dateTimeDueWithWhitespace \u003d PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                + VALID_DATETIME_DUE_REMIND_PATIENT + PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        DateTimeDue expectedDateTimeDue \u003d new DateTimeDue(VALID_DATETIME_DUE_REMIND_PATIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedDateTimeDue,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                TaskParserUtil.parseDateTimeDue(Optional.of(dateTimeDueWithWhitespace)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.testutil.PatientRecordsBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertEquals(new PatientRecords(), new PatientRecords(modelManager.getPatientRecords()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCovigentAppFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath_validPath_setsCovigentAppFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        modelManager.setCovigentAppFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(path, modelManager.getCovigentAppFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPerson_personNotInCovigentApp_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPerson_personInCovigentApp_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modelManager.addPatient(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(modelManager.hasPatient(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getRoomList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getRoomList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecords patientRecords \u003d new PatientRecordsBuilder().withPatient(ALICE).withPatient(BENSON).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecords differentPatientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        modelManager \u003d new ModelManager(patientRecords, userPrefs, new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(patientRecords, userPrefs, new RoomList(), new TaskList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // different covigentApp -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(modelManager"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                .equals(new ModelManager(differentPatientRecords, userPrefs, new RoomList(), new TaskList())));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(patientRecords, userPrefs, new RoomList(), new TaskList())));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        differentUserPrefs.setCovigentAppFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(modelManager"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                .equals(new ModelManager(patientRecords, differentUserPrefs, new RoomList(), new TaskList())));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 14,
      "LeeMingDe": 11,
      "-": 103,
      "raymondge": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PatientRecordsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PatientRecordsTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private final PatientRecords patientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(Collections.emptyList(), patientRecords.getPatientList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientRecords.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void resetData_withValidReadOnlyCovigentApp_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords newData \u003d getTypicalPatientRecords();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(newData, patientRecords);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Two patients with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecordsStub newData \u003d new PatientRecordsStub(newPatients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e patientRecords.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPatient_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e patientRecords.hasPatient(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPatient_patientNotInCovigentApp_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(patientRecords.hasPatient(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPatient_patientInCovigentApp_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.addPatient(ALICE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(patientRecords.hasPatient(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void hasPatient_patientWithSameIdentityFieldsInCovigentApp_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.addPatient(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(patientRecords.hasPatient(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void getPatientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e patientRecords.getPatientList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * A stub ReadOnlyPatientRecords whose patients list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static class PatientRecordsStub implements ReadOnlyPatientRecords {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecordsStub(Collection\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            this.patients.setAll(patients);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        public ObservableList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            return patients;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 11,
      "LeeMingDe": 8,
      "chiamyunqing": 20,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM7_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "class RoomListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getRoomWithRoomNumber_roomNotInList_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Positive room number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d roomList.getRoomWithRoomNumber(20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(optionalRoom.isEmpty());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Negative room number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        optionalRoom \u003d roomList.getRoomWithRoomNumber(-20);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(optionalRoom.isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getRoomWithRoomNumber_roomInList_returnsRoom() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.addRooms(ROOM7_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cRoom\u003e optionalRoom \u003d roomList.getRoomWithRoomNumber(7);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(optionalRoom.map(room -\u003e room.getRoomNumber() \u003d\u003d 7).orElse(false));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room[] arrayOfRooms \u003d new Room[10];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList1 \u003d new RoomList(rooms, 10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList2 \u003d new RoomList(rooms, 10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList1.equals(roomList1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //diff object, but same fields -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList1.equals(roomList2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //null object -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(roomList1.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList2 \u003d new RoomList(rooms, 10);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms1 \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms1.add(new Room(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList2.setRooms(rooms1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //different Priority Queue of rooms -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(roomList1.equals(roomList2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList2 \u003d new RoomList(rooms, 10);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomList2.setNumOfRooms(100);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //different number of rooms -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(roomList1.equals(roomList2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void testPriorityQueueEquals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms1 \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        PriorityQueue\u003cRoom\u003e rooms2 \u003d new PriorityQueue\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //same PriorityQueue -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList.equals(rooms1, rooms1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 empty PriorityQueue of rooms -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d new Room(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms1.add(room);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms2.add(room);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 PriorityQueue of rooms with same content -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room room \u003d new Room(i);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms1.add(room);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms2.add(room);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room \u003d rooms2.poll();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 PriorityQueue of different size -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Room r \u003d new Room(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms1.add(r);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            rooms2.add(r);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms2.add(room);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms1.poll();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        rooms1.add(new Room(100));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //2 PriorityQueue of different content -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(roomList.equals(rooms1, rooms2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 23,
      "chiamyunqing": 12,
      "itssodium": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCovigentAppFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/AgeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidAge \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null age"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid age"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"twenty\")); //non-numeric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Age.isValidAge(\"1200\")); //impossible to be so old"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //valid age"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Age.isValidAge(\"30\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Age.isValidAge(\"101\")); //still possible"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 9,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //names are equal as long as they have the same spelling"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary1 \u003d new Name(\"Mary Ann\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary2 \u003d new Name(\"mARy aNn\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary3 \u003d new Name(\"mary ann\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name mary4 \u003d new Name(\"MARY ANN\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Name notMaryAnn \u003d new Name(\"Mary Anne\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(mary1.equals(mary2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(mary1.equals(mary3));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(mary1.equals(mary4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(mary1.equals(notMaryAnn));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 15,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.COMMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isSamePatient() { //patient is same as long as they have same name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(ALICE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.isSamePatient(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same name, different phone and temp -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withTemperature(VALID_TEMP_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //different period of stay but same name, phone and age -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTemperature(VALID_TEMP_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                .withAge(VALID_AGE_BOB).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        //same name, same phone, same age, same period of stay, diff temp -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withTemperature(VALID_TEMP_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        //diff comments but all attributes same -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withComment(COMMENT).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertTrue(ALICE.isSamePatient(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different period of stay -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withPeriodOfStay(VALID_PERIOD_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedAlice \u003d new PatientBuilder(ALICE).withAge(VALID_AGE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Assertions.assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 82,
      "chiamyunqing": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PeriodOfStayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PeriodOfStayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PeriodOfStay(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidPeriodOfStay_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidPeriodOfStay \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PeriodOfStay(invalidPeriodOfStay));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidPeriodOfStay() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null period of stay"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PeriodOfStay.isValidPeriodOfStay(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid period of stay"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"stay\")); //non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200709\")); //no end date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"2020090p-20201009\")); //alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200101 - 20200202\")); //spaces in input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"2020090120201009\")); //missing dash"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200901-20201038\")); //no such date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20201801-20201001\")); //no such month"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(PeriodOfStay.isValidPeriodOfStay(\"20200901-20200801\")); //end date before start date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        //valid period of stay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(PeriodOfStay.isValidPeriodOfStay(\"20190308-20190506\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(PeriodOfStay.isValidPeriodOfStay(\"20200913-20200914\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/TemperatureRangeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class TemperatureRangeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Temperature(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void constructor_invalidTemperature_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        String invalidTemperatureRange \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TemperatureRange(invalidTemperatureRange));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void isValidTemperatureRange() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // null temperatureRange"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TemperatureRange.isValidTemperatureRange(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // invalid temperatureRange"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\"\")); //empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\"37.0\")); //only 1 temperature"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertFalse(TemperatureRange.isValidTemperatureRange(\"37.8-37\")); //second temperature invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        // valid temperatureRange"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(TemperatureRange.isValidTemperatureRange(\"36.7-37.0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertTrue(TemperatureRange.isValidTemperatureRange(\"36.0-38.0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "raymondge": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/TemperatureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class TemperatureTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Temperature(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void constructor_invalidTemperature_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String invalidTemperature \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Temperature(invalidTemperature));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void isValidTemperature() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // null temperature"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Temperature.isValidTemperature(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // invalid temperature"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"\")); //empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37\")); //not 1 decimal place"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"temp\")); //non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37.a\")); //alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"37.\")); //no digit after decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertFalse(Temperature.isValidTemperature(\"3 7.6\")); //spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        // valid temperature"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Temperature.isValidTemperature(\"36.7\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(Temperature.isValidTemperature(\"36.0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 1,
      "chiamyunqing": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/UniquePatientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.DuplicatePatientException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.exceptions.PatientNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class UniquePatientListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_patientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_patientInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(uniquePatientList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_patientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(uniquePatientList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.getPatientWithName(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_patientInList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cPatient\u003e expectedPatient \u003d uniquePatientList.getPatientWithName(ALICE.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(expectedPatient.isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(ALICE, expectedPatient.get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void getPatientWithName_patientNotInList_returnsNull() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        Optional\u003cPatient\u003e expectedPatient \u003d uniquePatientList.getPatientWithName(BOB.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertTrue(expectedPatient.isEmpty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_duplicatePatient_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_nullTargetPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_nullEditedPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientIsSamePatient_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatient(ALICE, ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Patient editedAlice \u003d new PatientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(editedAlice);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatient(ALICE, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient_editedPatientHasNonUniqueIdentity_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALICE, BOB));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_existingPatient_removesPatient() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.remove(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_nullUniquePatientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatients(expectedUniquePatientList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.add(ALICE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        uniquePatientList.setPatients(patientList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedUniquePatientList.add(BOB);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedUniquePatientList, uniquePatientList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 166,
      "chiamyunqing": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains integration tests for the interactions between {@code Room} and {@code Task}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Room room;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.addTask(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTask_validTask_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.addTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT, room);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.deleteTask(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask_taskNotInTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e room.deleteTask(REMIND_PATIENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTask_taskInTaskList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.deleteTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(ROOM_PATIENT_ALICE_NO_TASK, room);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.setTask(REMIND_PATIENT, null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullTarget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e room.setTask(null, REMIND_PATIENT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_taskNotInTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e room.setTask(REMIND_PATIENT, RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_taskInTaskList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        room.setTask(REMIND_PATIENT, RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room expectedRoom \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).withTasks(RESTOCK_SUPPLY).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedRoom, room);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomListIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TASK_INDEX_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.exceptions.RoomNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * Contains integration tests for the interactions between {@code RoomList}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * and its dependencies ({@code Room} and {@code Task})."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class RoomListIntegrationTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private RoomList roomList; // note that this is mutable"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getTaskFromRoomWithTaskIndex_nullTaskIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomList.getTaskFromRoomWithTaskIndex(null, room));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getTaskFromRoomWithTaskIndex_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomList.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getTaskFromRoomWithTaskIndex_taskNotInRoom_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d roomList.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, room);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(optionalTask.isEmpty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getTaskFromRoomWithTaskIndex_taskInRoom_returnsTask() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cTask\u003e optionalTask \u003d roomList.getTaskFromRoomWithTaskIndex(VALID_TASK_INDEX_ONE, room);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(optionalTask.map(task -\u003e task.equals(REMIND_PATIENT)).orElse(false));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTaskToRoom_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.addTaskToRoom(REMIND_PATIENT, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTaskToRoom_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.addTaskToRoom(null, room));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTaskToRoom_roomNotInRoomList_throwsRoomNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(RoomNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomList.addTaskToRoom(RESTOCK_SUPPLY, room));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTaskToRoom_validTaskValidRoom_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.addRooms(room);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.addTaskToRoom(REMIND_PATIENT, room);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomList expectedRoomList \u003d new RoomList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedRoomList.addRooms(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedRoomList, roomList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.deleteTaskFromRoom(REMIND_PATIENT, null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.deleteTaskFromRoom(null, room));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom_roomNotInRoomList_throwsRoomNotFoundException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(RoomNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomList.deleteTaskFromRoom(REMIND_PATIENT, room));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom_taskNotInTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.addRooms(room);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomList.deleteTaskFromRoom(REMIND_PATIENT, room));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom_validTaskValidRoom_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.addRooms(room);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.deleteTaskFromRoom(REMIND_PATIENT, room);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomList expectedRoomList \u003d new RoomList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedRoomList.addRooms(ROOM_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedRoomList, roomList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom_nullRoom_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.setTaskToRoom(REMIND_PATIENT, RESTOCK_SUPPLY, null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.setTaskToRoom(REMIND_PATIENT, null, room));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom_nullTarget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder().build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e roomList.setTaskToRoom(null, RESTOCK_SUPPLY, room));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom_roomNotInRoomList_throwsRoomNotFoundException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(RoomNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomList.setTaskToRoom(REMIND_PATIENT, RESTOCK_SUPPLY, room));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom_taskNotInTaskList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.addRooms(room);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                roomList.setTaskToRoom(REMIND_PATIENT, RESTOCK_SUPPLY, room));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom_validTaskValidEditedTaskValidRoom_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room room \u003d new RoomBuilder(ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.addRooms(room);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        roomList.setTaskToRoom(REMIND_PATIENT, RESTOCK_SUPPLY, room);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        RoomList expectedRoomList \u003d new RoomList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Room expectedRoom \u003d new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).withTasks(RESTOCK_SUPPLY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedRoomList.addRooms(expectedRoom);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedRoomList, roomList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 175,
      "chiamyunqing": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/room/RoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.room;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class RoomTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isOccupied() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room1 \u003d new Room(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //default value of room1 is false -\u003e returns false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.isOccupied());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //change value of isOccupied to true -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        room1.setOccupied(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(room1.isOccupied());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room1 \u003d new Room(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room2 \u003d new Room(2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Room room1Copy \u003d new Room(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(room1.equals(room1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different object, same fields -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertTrue(room1.equals(room1Copy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // different patient -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(room2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // different isOccupied value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        room1Copy.setOccupied(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(room1.equals(room1Copy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 2,
      "LeeMingDe": 1,
      "itssodium": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DateTimeDueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DateTimeDueTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTimeDue((String) null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_nullOptional_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTimeDue((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_emptyString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(emptyString));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_emptyStringOptional_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cString\u003e emptyStringOptional \u003d Optional.of(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(emptyStringOptional));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_invalidDateTimeString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String invalidDateTimeString \u003d \"aaa\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(invalidDateTimeString));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_invalidDateTimeStringOptional_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Optional\u003cString\u003e invalidDateTimeStringOptional \u003d Optional.of(\"aaa\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeDue(invalidDateTimeStringOptional));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void getValue_emptyOptional_returnEmptyOptional() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(Optional.empty(), new DateTimeDue(Optional.empty()).getValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void isValidDateTimeDue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null date-time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeDue.isValidDateTimeDue(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // blank date-time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"\")); // empty string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\" \")); // spaces only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // invalid date-time"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"//\")); // only hyphens"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"2345 Oct 2020\")); // invalid day"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"aa\")); // gibberish text"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // non-conforming date-time (i.e. not in allowed formats)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"5-1-2020\")); // d-M-yyyy"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(DateTimeDue.isValidDateTimeDue(\"05-01-2020 2359\")); // dd-MM-yyyy HHmm"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // valid and conforming date-time (i.e. in allowed formats)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"20200105\")); // yyyyMMdd"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"20200105\")); // yyyyMMdd HHmm"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"5/1/2020\")); // d/M/yyyy"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"05/01/2020\")); // dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"5/1/2020 2359\")); // d/M/yyyy HHmm"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(DateTimeDue.isValidDateTimeDue(\"05/01/2020 2359\")); // dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.contains(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(taskList.contains(REMIND_PATIENT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(taskList.contains(REMIND_PATIENT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void contains_sameTaskInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedRemindPatient \u003d new TaskBuilder(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(taskList.contains(editedRemindPatient));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.add(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(null, REMIND_PATIENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(REMIND_PATIENT, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.setTask(REMIND_PATIENT, REMIND_PATIENT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTask(REMIND_PATIENT, REMIND_PATIENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTask_editedTaskIsDifferentTask_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTask(REMIND_PATIENT, RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.remove(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.remove(REMIND_PATIENT));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.remove(REMIND_PATIENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((TaskList) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_taskList_replacesOwnListWithProvidedTaskList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTasks(expectedTaskList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        List\u003cTask\u003e singleTaskList \u003d Collections.singletonList(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTasks(singleTaskList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedTaskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            -\u003e taskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toString_emptyTaskList_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String expectedString \u003d \"-\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(taskList.toString(), expectedString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toString_taskListWithTasks_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(REMIND_PATIENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.add(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        String expectedString \u003d \"1. \" + REMIND_PATIENT.toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        expectedString +\u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        expectedString +\u003d \"2. \" + RESTOCK_SUPPLY.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(taskList.toString(), expectedString);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 150,
      "LeeMingDe": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task remindPatientCopy \u003d new TaskBuilder(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(REMIND_PATIENT.equals(remindPatientCopy));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertTrue(REMIND_PATIENT.equals(REMIND_PATIENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        Task editedRemindPatient \u003d new TaskBuilder(REMIND_PATIENT).withDescription(\"hi\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(editedRemindPatient));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // different date-time due -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        editedRemindPatient \u003d new TaskBuilder(REMIND_PATIENT).withDateTimeDue(Optional.of(\"20200101\")).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertFalse(REMIND_PATIENT.equals(editedRemindPatient));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class JsonAdaptedPatientTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_TEMP \u003d \"39.p\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_PERIOD \u003d \"20200011-20209900\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String INVALID_AGE \u003d \"1000\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_TEMP \u003d BENSON.getTemperature().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_PERIOD \u003d BENSON.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String VALID_AGE \u003d BENSON.getAge().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final String COMMENT \u003d \"Vegan\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(BENSON, patient.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidTemp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, INVALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Temperature.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullTemp_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_PERIOD,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Temperature.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, INVALID_PERIOD,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d PeriodOfStay.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullPeriod_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PeriodOfStay.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        INVALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                null, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_invalidAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                        VALID_PHONE, INVALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d Age.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void toModelType_nullAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                VALID_PHONE, null, COMMENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 36,
      "chiamyunqing": 46,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRoomTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_NO_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_NO_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.RoomBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Test cases for JsonAdaptedRoom"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonAdaptedRoomTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d REMIND_PATIENT.getDescription().value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_DUE_DATE \u003d REMIND_PATIENT.getDueAt().getVal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_DUE_DATE \u003d \"two thirty\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_TEMP \u003d \"39.p\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_PERIOD \u003d \"20200011-20209900\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String INVALID_AGE \u003d \"1000\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_TEMP \u003d BENSON.getTemperature().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_PERIOD \u003d BENSON.getPeriodOfStay().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String VALID_AGE \u003d BENSON.getAge().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final String COMMENT \u003d \"Vegan\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final int VALID_ROOM_NUM \u003d ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT.getRoomNumber();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final boolean VALID_IS_OCCUPIED \u003d ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT.isOccupied();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Room ROOM_INVALID_PATIENT_PRESENT_OCCUPIED_FALSE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            new RoomBuilder(ROOM_PATIENT_ALICE_NO_TASK).withIsOccupied(false).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Room ROOM_INVALID_PATIENT_ABSENT_OCCUPIED_TRUE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            new RoomBuilder(ROOM_NO_PATIENT_NO_TASK).withIsOccupied(true).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsEmptyRoom() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        JsonAdaptedRoom room1 \u003d new JsonAdaptedRoom(ROOM_NO_PATIENT_NO_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        assertEquals(ROOM_NO_PATIENT_NO_TASK, room1.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsOccupiedRoom_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(ROOM_PATIENT_ALICE_NO_TASK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(ROOM_PATIENT_ALICE_NO_TASK, room.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_invalidDueDate_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_DESCRIPTION, INVALID_DUE_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableTaskList taskList \u003d new JsonSerializableTaskList(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonAdaptedPatient(VALID_NAME, VALID_TEMP, VALID_PERIOD, VALID_PHONE, VALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(VALID_ROOM_NUM, VALID_IS_OCCUPIED, patient, taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.DATE_WRONG_FORMAT_IN_TASKS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_invalidPatient_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_DESCRIPTION, VALID_DUE_DATE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableTaskList taskList \u003d new JsonSerializableTaskList(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedPatient patient \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                new JsonAdaptedPatient(INVALID_NAME, INVALID_TEMP, INVALID_PERIOD, INVALID_PHONE, INVALID_AGE, COMMENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(VALID_ROOM_NUM, VALID_IS_OCCUPIED, patient, taskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.PATIENT_WRONG_FORMAT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsOccupiedRoom_error() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(ROOM_INVALID_PATIENT_PRESENT_OCCUPIED_FALSE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.PATIENT_PRESENT_IS_OCCUPIED_FALSE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_returnsNotOccupiedRoom_error() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedRoom room \u003d new JsonAdaptedRoom(ROOM_INVALID_PATIENT_ABSENT_OCCUPIED_TRUE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedRoom.PATIENT_ABSENT_IS_OCCUPIED_TRUE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, room::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "itssodium": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CALL_EMBASSY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Test cases for JsonAdaptedTask"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d REMIND_PATIENT.getDescription().value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final String INVALID_DUE_DATE \u003d \"two thirty\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_success_remindPatient() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(REMIND_PATIENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        task.toModelType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(REMIND_PATIENT, task.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_success_restockSupply() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(RESTOCK_SUPPLY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(RESTOCK_SUPPLY, task.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_success_callEmbassy() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(CALL_EMBASSY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(CALL_EMBASSY, task.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_invalidDueDate_throwsIllegalValueException() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(VALID_DESCRIPTION, INVALID_DUE_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedTask.DATE_WRONG_FORMAT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPatientRecordsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class JsonPatientRecordsStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPatientRecordsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readCovigentApp_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCovigentApp(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPatientRecords\u003e readCovigentApp(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new JsonPatientRecordsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                .readPatientRecords(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertFalse(readCovigentApp(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCovigentApp(\"notJsonFormatPatientRecords.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readCovigentApp_invalidPatientCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCovigentApp(\"invalidPatientPatientRecords.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readCovigentApp_invalidAndValidPatientCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCovigentApp(\"invalidAndValidPatientPatientRecords.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readAndSaveCovigentApp_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCovigentApp.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords original \u003d getTypicalPatientRecords();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonPatientRecordsStorage jsonPatientRecordsStorage \u003d new JsonPatientRecordsStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        jsonPatientRecordsStorage.savePatientRecords(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        ReadOnlyPatientRecords readBack \u003d jsonPatientRecordsStorage.readPatientRecords(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(original, new PatientRecords(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        original.addPatient(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        original.removePatient(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        jsonPatientRecordsStorage.savePatientRecords(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        readBack \u003d jsonPatientRecordsStorage.readPatientRecords(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(original, new PatientRecords(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        original.addPatient(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        jsonPatientRecordsStorage.savePatientRecords(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        readBack \u003d jsonPatientRecordsStorage.readPatientRecords().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(original, new PatientRecords(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void saveCovigentApp_nullCovigentApp_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCovigentApp(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Saves {@code covigentApp} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private void saveCovigentApp(ReadOnlyPatientRecords covigentApp, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            new JsonPatientRecordsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                    .savePatientRecords(covigentApp, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void saveCovigentApp_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCovigentApp(new PatientRecords(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 85,
      "chiamyunqing": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonRoomOccupancyStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.ROOM_NO_PATIENT_NO_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonRoomOccupancyStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            \"JsonRoomOccupancyStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void readRoomList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRoomList(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRoomList\u003e readRoomList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new JsonRoomOccupancyStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                .readOnlyRoomOccupancy(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertFalse(readRoomList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readCovigentApp_invalidRoomCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRoomList(\"invalidRoomInRoomList.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readCovigentApp_invalidAndValidRoomCovigentApp_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRoomList(\"invalidAndValidRoomInRoomList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void saveRoomList_nullCovigentApp_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRoomListRoomsOccupied(null,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"roomsOccupied.jason\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRoomListRoomsOccupied(new RoomList(), null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Saves {@code covigentApp} at the specified {@code filePath}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void saveRoomListRoomsOccupied(RoomList roomList, String roomsOccupied) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            new JsonRoomOccupancyStorage(Paths.get(roomsOccupied))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    .saveOccupiedRooms(roomList, addToTestDataPathIfNotNull(roomsOccupied));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void readAndSaveCovigentApp_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCovigentApp.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList original \u003d getTypicalRoomList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage jsonRoomOccupancyStorage \u003d new JsonRoomOccupancyStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        jsonRoomOccupancyStorage.saveOccupiedRooms(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ReadOnlyRoomList readBack \u003d jsonRoomOccupancyStorage.readOnlyRoomOccupancy(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList(readBack);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertEquals(original, roomList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        original.addRooms(ROOM_NO_PATIENT_NO_TASK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        jsonRoomOccupancyStorage.saveOccupiedRooms(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        readBack \u003d jsonRoomOccupancyStorage.readOnlyRoomOccupancy(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(original, new RoomList(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        original.addRooms(ROOM_NO_PATIENT_NO_TASK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        jsonRoomOccupancyStorage.saveOccupiedRooms(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        readBack \u003d jsonRoomOccupancyStorage.readOnlyRoomOccupancy().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(original, new RoomList(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void saveCovigentApp_nullCovigentApp_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRoomListRoomsOccupied(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "LeeMingDe": 7,
      "chiamyunqing": 4,
      "itssodium": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePatientRecordsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.testutil.TypicalPatients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class JsonSerializablePatientRecordsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePatientRecordsTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsPatientRecords.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientPatientRecords.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientPatientRecords.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toModelType_typicalPatientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                JsonSerializablePatientRecords.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords covigentAppFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords typicalPatientsCovigentApp \u003d TypicalPatients.getTypicalPatientRecords();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(covigentAppFromFile, typicalPatientsCovigentApp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                JsonSerializablePatientRecords.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                JsonSerializablePatientRecords.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePatientRecords.MESSAGE_DUPLICATE_PATIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 4,
      "LeeMingDe": 1,
      "chiamyunqing": 15,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableRoomListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.TypicalRooms;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonSerializableRoomListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRoomListTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TYPICAL_ROOM_LIST \u003d TEST_DATA_FOLDER.resolve(\"typicalRoomsInRoomList.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_typicalRoomFile_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableRoomList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ROOM_LIST,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                JsonSerializableRoomList.class).get();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        RoomList covigentAppFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList typicalRoomList \u003d TypicalRooms.getTypicalRoomList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(covigentAppFromFile, typicalRoomList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "chiamyunqing": 3,
      "itssodium": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "class JsonSerializableTaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskListTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static final Path TYPICAL_TASk_LIST \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksInTaskList.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void toModelType_typicalRoomFile_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASk_LIST,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        TaskList covigentAppFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        TaskList typicalRoomList \u003d TypicalTasks.getTypicalTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(covigentAppFromFile, typicalRoomList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        userPrefs.setCovigentAppFilePath(Paths.get(\"covigentapp.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.getTypicalPatientRecords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static seedu.address.testutil.TypicalRooms.getTypicalRoomList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonPatientRecordsStorage covigentAppStorage \u003d new JsonPatientRecordsStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        JsonRoomOccupancyStorage roomOccupancyStorage \u003d new JsonRoomOccupancyStorage(getTempFilePath(\"ro\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        JsonTaskOccupancyStorage taskOccupancyStorage \u003d new JsonTaskOccupancyStorage(getTempFilePath(\"tk\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //files nr short for numberOfRooms and ro is short form for roomsOccupied."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        storageManager \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "                new StorageManager(covigentAppStorage, userPrefsStorage, roomOccupancyStorage, taskOccupancyStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void covigentAppReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raymondge"
        },
        "content": "         * {@link JsonPatientRecordsStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raymondge"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPatientRecordsStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        PatientRecords original \u003d getTypicalPatientRecords();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        storageManager.savePatientRecords(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        ReadOnlyPatientRecords retrieved \u003d storageManager.readPatientRecords().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertEquals(original, new PatientRecords(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        assertNotNull(storageManager.getPatientRecordsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void saveRoomOccupancyStorage() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList original \u003d getTypicalRoomList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        storageManager.saveRoomList(original);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ReadOnlyRoomList readOnlyRoomList \u003d storageManager.readRoomOccupancyStorage().get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assertEquals(original, readOnlyRoomList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 2,
      "-": 54,
      "raymondge": 16,
      "itssodium": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class to help with building EditPatientDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class EditPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private EditPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.descriptor \u003d new EditPatientDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder(Patient patient) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor \u003d new EditPatientDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setName(patient.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPhone(patient.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setAge(patient.getAge());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPeriodOfStay(patient.getPeriodOfStay());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setComment(patient.getComment());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setTemperature(patient.getTemperature());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code name} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code phone} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code age} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withAge(String age) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setAge(new Age(age));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code periodOfStay} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withPeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setPeriodOfStay(new PeriodOfStay(periodOfStay));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code comment} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setComment(new Comment(comment));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code temperature} of the {@code EditPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptorBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.setTemperature(new Temperature(temperature));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public EditPatientDescriptor build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 84,
      "LeeMingDe": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditRoomDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.logic.commands.room.EditRoomCommand.EditRoomDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EditRoomDescriptorBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private EditRoomDescriptor descriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomDescriptorBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditRoomDescriptor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomDescriptorBuilder(EditRoomDescriptor descriptor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.descriptor \u003d new EditRoomDescriptor(descriptor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns an {@code EditRoomDescriptor} with fields containing {@code room}\u0027s details"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomDescriptorBuilder(Room room) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor \u003d new EditRoomDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setRoomNumber(room.getRoomNumber());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setOccupied(room.isOccupied());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setPatientName(room.getPatient().getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code roomNumber} of the {@code EditRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomDescriptorBuilder withRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code isOccupied} of the {@code EditRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomDescriptorBuilder withOccupancy(Boolean isOccupied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setOccupied(isOccupied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Sets the {@code patient} of the {@code EditRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomDescriptorBuilder withPatient(Name name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        descriptor.setPatientName(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EditRoomDescriptor build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"EditRoomDescriptorBuilder{\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \"descriptor\u003d\" + descriptor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            + \u0027}\u0027;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Age;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Comment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.PeriodOfStay;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Temperature;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_TEMPERATURE \u003d \"36.8\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_PERIOD \u003d \"20201001-20201014\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"37\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_COMMENT \u003d \"-\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Temperature temperature;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private PeriodOfStay periodOfStay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Comment comment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        temperature \u003d new Temperature(DEFAULT_TEMPERATURE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        periodOfStay \u003d new PeriodOfStay(DEFAULT_PERIOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        comment \u003d new Comment(DEFAULT_COMMENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code patientToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        temperature \u003d patientToCopy.getTemperature();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        periodOfStay \u003d patientToCopy.getPeriodOfStay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        age \u003d patientToCopy.getAge();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        comment \u003d patientToCopy.getComment();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Temperature} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.temperature \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code PeriodOfStay} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withPeriodOfStay(String periodOfStay) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.periodOfStay \u003d new PeriodOfStay(periodOfStay);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Age} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withAge(String age) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Comment} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PatientBuilder withComment(String comment) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.comment \u003d new Comment(comment);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Patient(name, temperature, periodOfStay, phone, age, comment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientRecordsBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * A utility class to help with building CovigentApp objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " *     {@code CovigentApp ab \u003d new PatientRecordsBuilder().withPatient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class PatientRecordsBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private PatientRecords patientRecords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecordsBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords \u003d new PatientRecords();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecordsBuilder(PatientRecords covigentApp) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        this.patientRecords \u003d covigentApp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Adds a new {@code Patient} to the {@code CovigentApp} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecordsBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        patientRecords.addPatient(patient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public PatientRecords build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return patientRecords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_COMMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PERIOD_OF_STAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.patient.PatientCliSyntax.PREFIX_TEMP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class for Patient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class PatientUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an add command string for adding the {@code Patient}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getAddPatientCommand(Patient patient) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Patient}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getPatientDetails(Patient patient) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_TEMP + patient.getTemperature().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_PERIOD_OF_STAY + patient.getPeriodOfStay().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        sb.append(PREFIX_AGE + patient.getAge().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getTemperature().ifPresent(temperature -\u003e sb.append(PREFIX_TEMP).append(temperature.value)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                    .append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getPeriodOfStay().ifPresent(periodOfStay -\u003e sb.append(PREFIX_PERIOD_OF_STAY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                                    .append(periodOfStay.toString()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getAge().ifPresent(age -\u003e sb.append(PREFIX_AGE).append(age.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.getComment().ifPresent(comment -\u003e sb.append(PREFIX_COMMENTS).append(comment.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 42,
      "chiamyunqing": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoomBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class RoomBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final int DEFAULT_ROOM_NUMBER \u003d 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final boolean DEFAULT_IS_OCCUPIED \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static final Patient DEFAULT_PATIENT \u003d TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private int roomNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isOccupied;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates a {@code PatientBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomNumber \u003d DEFAULT_ROOM_NUMBER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        isOccupied \u003d DEFAULT_IS_OCCUPIED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        patient \u003d DEFAULT_PATIENT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Initializes the RoomBuilder with the data of {@code roomToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * The {@code TaskList} is a shallow copy of the original (i.e. the {@code Task} within"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * the list are not copied)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder(Room roomToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        roomNumber \u003d roomToCopy.getRoomNumber();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        isOccupied \u003d roomToCopy.isOccupied();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        patient \u003d roomToCopy.getPatient();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTasks(roomToCopy.getTaskList().asUnmodifiableObservableList()); // shallow copy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Sets the {@code roomNumber} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder withRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.roomNumber \u003d roomNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Sets the {@code isOccupied} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder withIsOccupied(boolean isOccupied) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isOccupied \u003d isOccupied;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Sets the {@code patient} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RoomBuilder withPatient(Patient patient) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code taskList} of the {@code Room} that we are building"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * with the provided tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomBuilder withTasks(Task... tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        taskList.setTasks(Arrays.asList(tasks));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code taskList} of the {@code Room} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomBuilder withTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Room build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Room(roomNumber, isOccupied, patient, taskList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 28,
      "itssodium": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SearchPatientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raymondge"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.patient.SearchPatientCommand.SearchPatientDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.TemperatureRange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raymondge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raymondge"
        },
        "content": " * A utility class to help with building SearchPatientDescriptor objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raymondge"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raymondge"
        },
        "content": "public class SearchPatientDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    private SearchPatientDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor \u003d new SearchPatientDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Sets the {@code Name} of the {@code SearchPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor.setStringName(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     * Sets the {@code Temperature} of the {@code SearchPatientDescriptor} that we are building."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raymondge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptorBuilder withTemperatureRange(String temperatureRange) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        descriptor.setTemperatureRange(new TemperatureRange(temperatureRange));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public SearchPatientDescriptor build() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raymondge"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raymondge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "raymondge": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SearchRoomDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.logic.commands.room.SearchRoomCommand.SearchRoomDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "public class SearchRoomDescriptorBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    private SearchRoomDescriptor descriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptorBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor \u003d new SearchRoomDescriptor();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Name} of the {@code SearchRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptorBuilder setPatientName(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.setPatientName(new Name(name));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Sets the {@code Room Number} of the {@code SearchRoomDescriptor} that we are building."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptorBuilder setRoomNumber(Integer roomNumber) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        descriptor.setRoomNumber(roomNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public SearchRoomDescriptor build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiamyunqing": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.DateTimeDue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Remind John to clean bedsheets.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final String DEFAULT_DATETIME_DUE \u003d \"20201014 2359\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private DateTimeDue dueAt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Creates a {@code TaskBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        dueAt \u003d new DateTimeDue(DEFAULT_DATETIME_DUE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        dueAt \u003d taskToCopy.getDueAt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Sets the {@code DateTimeDue} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public TaskBuilder withDateTimeDue(Optional\u003cString\u003e optionalDueAt) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        this.dueAt \u003d new DateTimeDue(optionalDueAt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new Task(description, dueAt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.room.RoomCliSyntax.PREFIX_ROOM_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_DUE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.parser.task.TaskCliSyntax.PREFIX_TASK_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.model.task.DateTimeDue.ALLOWED_DATETIME_FORMATS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.logic.commands.task.EditTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an add command string for adding the {@code Task}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getAddTaskCommand(Task task, int roomNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return AddTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task, roomNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns an edit command string for editing the {@code Task}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getEditTaskCommand(Task task, int roomNumber, Index taskIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return EditTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task, roomNumber, taskIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Task}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(PREFIX_DESCRIPTION + task.getDescription().toString() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        task.getDueAt().getValue().ifPresent((dueAt) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // DateTimeDue.toString() may return a different string that does not correspond to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // an allowed date-time format. Here, dueAt is formatted with the first allowed date-time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // format to obtain a proper command string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            // ALLOWED_DATETIME_FORMATS.length \u003e 0 or a compiler-time error will occur."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            String formattedDueAt \u003d dueAt.format(ALLOWED_DATETIME_FORMATS[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            builder.append(PREFIX_DUE_DATE + formattedDueAt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Task}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Includes a valid room number given by {@code roomIndex} in the command string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getTaskDetails(Task task, int roomNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(getTaskDetails(task));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Use any valid room number as room number not stored in task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\" \" + PREFIX_ROOM_NUMBER + roomNumber);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the part of command string for the given {@code Task}\u0027s details."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Includes a valid room number given by {@code roomIndex} and a valid task number"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * given by {@code taskIndex} in the command string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static String getTaskDetails(Task task, int roomNumber, Index taskIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(getTaskDetails(task, roomNumber));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        // Use any valid task number as task number not stored in task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        builder.append(\" \" + PREFIX_TASK_NUMBER + String.valueOf(taskIndex.getOneBased()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the middle index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the last index of the patient in the {@code model}\u0027s patient list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPatientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "     * Returns the patient in the {@code model}\u0027s patient list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static Patient getPatient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return model.getFilteredPatientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.COMMENT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PERIOD_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_TEMP_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.PatientRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * A utility class containing a list of {@code Patient} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TypicalPatients {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.8\").withPeriodOfStay(\"20200911-20200918\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"94351253\").withAge(\"31\").withComment(\"Vegan\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"38.0\").withPeriodOfStay(\"20200810-20200824\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"98765432\").withAge(\"67\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"38.3\").withPeriodOfStay(\"20200910-20200917\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"95352563\").withAge(\"17\").withComment(\"asthmatic\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.3\").withPeriodOfStay(\"20200808-20200809\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"87652533\").withAge(\"55\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.4\").withPeriodOfStay(\"20200707-20200719\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482224\").withAge(\"81\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.1\").withPeriodOfStay(\"20201004-20201019\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482427\").withAge(\"11\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"36.4\").withPeriodOfStay(\"20201101-20201114\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"9482442\").withAge(\"28\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.0\").withPeriodOfStay(\"20200913-20200920\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"8482424\").withAge(\"90\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(\"37.6\").withPeriodOfStay(\"20200404-20200414\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withPhone(\"8482131\").withAge(\"54\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(VALID_TEMP_AMY).withPeriodOfStay(VALID_PERIOD_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withAge(VALID_AGE_AMY).withComment(COMMENT_AMY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTemperature(VALID_TEMP_BOB).withPeriodOfStay(VALID_PERIOD_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withAge(VALID_AGE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TypicalPatients() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "     * Returns an {@code PatientRecords} with all the typical patients."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static PatientRecords getTypicalPatientRecords() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        PatientRecords ab \u003d new PatientRecords();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Patient patient : getTypicalPatients()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            ab.addPatient(patient);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static List\u003cPatient\u003e getTypicalPatients() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 15,
      "LeeMingDe": 4,
      "chiamyunqing": 37,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRooms.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import static seedu.address.testutil.TypicalPatients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REMIND_PATIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RESTOCK_SUPPLY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * A utility class containing a list of {@code Room} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * The patients present in getTypicalRooms() of TypicalRooms class must be present"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " * in getTypicalPatientRecords() of TypicalPatients class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TypicalRooms {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Integer ROOM_NUMBER_7 \u003d 7;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Integer ROOM_NUMBER_8 \u003d 8;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Integer ROOM_NUMBER_11 \u003d 11;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Room ROOM_NO_PATIENT_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withIsOccupied(false).withPatient(null).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Room ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withIsOccupied(false).withPatient(null).withRoomNumber(ROOM_NUMBER_11)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withTasks(RESTOCK_SUPPLY).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Room ROOM_PATIENT_ALICE_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withIsOccupied(true).withPatient(ALICE).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Room ROOM_PATIENT_ALICE_TASK_REMIND_PATIENT \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withIsOccupied(true).withPatient(ALICE).withTasks(REMIND_PATIENT).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Room ROOM7_PATIENT_ALICE_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withIsOccupied(true).withPatient(ALICE).withRoomNumber(ROOM_NUMBER_7).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public static final Room ROOM8_PATIENT_BENSON_NO_TASK \u003d new RoomBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "            .withIsOccupied(true).withPatient(BENSON).withRoomNumber(ROOM_NUMBER_8).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TypicalRooms() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static RoomList getTypicalRoomList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        RoomList roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (Room room : getTypicalRooms()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            roomList.addRooms(room);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return roomList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static List\u003cRoom\u003e getTypicalRooms() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ROOM7_PATIENT_ALICE_NO_TASK, ROOM8_PATIENT_BENSON_NO_TASK,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "                ROOM_NO_PATIENT_NO_TASK, ROOM_NO_PATIENT_TASK_RESTOCK_SUPPLY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 14,
      "chiamyunqing": 18,
      "itssodium": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_DATETIME_DUE_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import static seedu.address.logic.commands.NewCommandTestUtil.VALID_DESCRIPTION_ORDER_BEDSHEET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task REMIND_PATIENT \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Remind Alice to change bedsheets.\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20201230 2359\")).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task RESTOCK_SUPPLY \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Room #1 is running low on masks and needs to be restocked.\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20200925\")).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task CALL_EMBASSY \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Call the U.S. embassy for Bob.\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20201014 1800\")).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task FIX_SHOWER \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(\"Fix the shower in Room #4.\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(\"20201212 2359\")).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static final Task ORDER_BEDSHEET \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_ORDER_BEDSHEET)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "            .withDateTimeDue(Optional.of(VALID_DATETIME_DUE_ORDER_BEDSHEET)).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static TaskList getTypicalTaskList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(REMIND_PATIENT, RESTOCK_SUPPLY, CALL_EMBASSY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 43,
      "itssodium": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/stubs/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "package seedu.address.testutil.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyPatientRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.ReadOnlyRoomList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import seedu.address.model.patient.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.room.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " * A default model stub that has all of the methods failing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Path getCovigentAppFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setCovigentAppFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setPatientRecords(ReadOnlyPatientRecords newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public ReadOnlyPatientRecords getPatientRecords() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasPatient(Patient patient) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public Optional\u003cPatient\u003e getPatientWithName(Name nameOfPatient) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deletePatient(Patient target) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setPatient(Patient target, Patient editedPatient) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isPatientAssignedToRoom(Name name) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cPatient\u003e getFilteredPatientList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void setRoomList(ReadOnlyRoomList rooms) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public int getNumOfRooms() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addRooms(int num) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cRoom\u003e getRoomWithRoomNumber(int roomNumber) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setSingleRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    public void clearRoom(Name patientName) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Index checkIfRoomPresent(Integer roomNumber) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void updateRoomListWhenPatientsChanges(Patient patientToEdit, Patient editedPatient) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public RoomList getModifiableRoomList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public PriorityQueue\u003cRoom\u003e getRooms() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ObservableList\u003cRoom\u003e getFilteredRoomList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void updateFilteredRoomList(Predicate\u003cRoom\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public Optional\u003cTask\u003e getTaskFromRoomWithTaskIndex(Index taskIndex, Room room) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void addTaskToRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiamyunqing"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void deleteTaskFromRoom(Task task, Room room) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "    public void setTaskToRoom(Task target, Task taskToEdit, Room room) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void deleteTask(Task taskToDelete) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    public void setTask(Task taskToEdit, Task editedTask) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raymondge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raymondge"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "w-yeehong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "w-yeehong": 131,
      "LeeMingDe": 29,
      "chiamyunqing": 34,
      "raymondge": 21,
      "itssodium": 4
    }
  }
]
