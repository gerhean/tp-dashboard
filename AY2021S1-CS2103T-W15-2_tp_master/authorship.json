[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W15-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W15-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "## Reeve"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**Reeve** is a desktop application for **private tutors to better manage both administrative and academic details of their students**, optimised for use via a **Command Line Interface (CLI)** for receiving inputs while still having the benefits of a **Graphical User Interface (GUI)** for displaying information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* Interested in using Reeve? Head over to the [_Quick Start_ section of the **User Guide**](https://github.com/AY2021S1-CS2103T-W15-2/tp/blob/master/docs/UserGuide.md)!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* Interested in developing Reeve? The [**Developer Guide**](https://github.com/AY2021S1-CS2103T-W15-2/tp/blob/master/docs/DeveloperGuide.md) is a good place to start!"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 4,
      "StopTakingAllTheNames": 1,
      "-": 3,
      "hogantan": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "run {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    archiveName \u003d \u0027Reeve.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 5,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "### Ong Ying Gao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cimg src\u003d\"images/stoptakingallthenames.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[[github](https://github.com/StopTakingAllTheNames)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "### Vaishak Anand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "\u003cimg src\u003d\"images/vaishakanand.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "[[github](http://github.com/VaishakAnand)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "### Alex Chua"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003cimg src\u003d\"images/alexcqy.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "[[github](https://github.com/AlexCQY)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### Ng Choon Siong"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cimg src\u003d\"images/csiongn.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "[[github](http://github.com/csiongn)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Hogan Tan"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cimg src\u003d\"images/hogantan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "[[github](http://github.com/hogantan)]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 3,
      "VaishakAnand": 4,
      "StopTakingAllTheNames": 4,
      "-": 34,
      "csiongn": 2,
      "hogantan": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Reeve - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Welcome to Reeve!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Reeve is an integrated platform specifically catered to Primary, Secondary and Tertiary education private tutors to better manage their students\u0027 individual needs. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "It contains  students\u0027 particulars, administrative and academic details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Reeve is optimized for users that are very comfortable with typing as it works on a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Students\u0027 details are displayed in a neat and organized manner through the use of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "If you are looking for an application to better allow you to track your students\u0027 administrative and academic details so that you can better meet their needs? Look no further!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 1. About"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 2. Understanding the Guide"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 3. **Getting started**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 4. **Design**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 4.1 Architecture"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 4.2 UI component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 4.3 Logic component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a student)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 4.4 Model component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 4.5 Storage component"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 4.6 Common classes"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 5. **Implementation**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 5.1 Student administrative details features"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The student administrative details feature keeps track of essential administrative student details. The feature comprises of the following commands,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `AddCommand` - Adds a student into the student list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `EditCommand` - Edits the details of a particular student"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `DeleteCommand` - Deletes a particular student"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `FindCommand` - Finds students matching certain parameters"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `OverdueCommand` - Finds students who have overdue payments"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `ClearCommand` - Deletes all students in the student list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 5.1.1 Add Student Command"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The following describes the flow of how `AddCommand` is performed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1. Upon successfully parsing the user input, the `AddCommand#execute(Model model)` is called which checks whether "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hogantan"
        },
        "content": "the added student already exists in the `UniqueStudentList`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2. A unique student is defined by `Name`, `Phone`, `School` and `Year`. If a duplicate student is defined, "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "a `CommandException` is thrown and the student will not be added."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "3. If the added student is not a duplicate, then the `Model#addStudent(Student student)` is called to add the student. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "A new `CommandResult` is returned with a success message and the added student."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hogantan"
        },
        "content": "4. The student is be added into `UniqueStudentList` and a success message is shown in the result display."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The following activity diagram summarizes the flow of events when the `AddCommand` is being executed:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hogantan"
        },
        "content": "![Flow of Add Student Command](images/AddStudentActivityDiagram.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Figure ___. Activity Diagram for AddStudentCommand"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "#### 5.1.2 Edit Student Command"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "The edit student feature allows the tutor to edit a particular student within **Reeve**."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "It is handled by the `EditCommand`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "The following describes the flow of how `EditCommand` is executed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "1. Upon successfully parsing the user input, `EditCommand#execute(Model model)` is called to edit the existing student to the new edited student."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "2. `Model#setStudent(Student student)` is called to replace the student with edited student within the model."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "3. `Model#updateFilteredStudentsList(Predicate\u003cStudent\u003e predicate)` is then called to update the student list with the new edited student."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "4. A new `CommandResult` is returned with a successful message indicating that the student has been edited."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "5. The edited student is now shown on the student list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "The following sequence diagram shows how the `EditCommand` execution works."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "![EditSequence](images/EditStudentSequenceDiagram.png)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Figure \\___. Sequence diagram for `EditCommand` execution"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "The following activity diagram summarises the flow of events when `EditCommand` is executed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "![EditActivity](images/EditStudentActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Figure \\___. Activity diagram for `EditCommand` execution"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "#### 5.1.5 Overdue Command"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The overdue payment filter feature allows the tutor to find all students who have not paid their tuition fees in the past month. It is handled by the `OverdueCommand`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following describes the flow of how `OverdueCommand` is executed."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. Upon successfully parsing the user input, `OverdueCommand#execute(Model model)` is called to filter all students in Reeve whose last date of payment was more than a month ago."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. `Model#updateFilteredStudentsList(Predicate\u003cStudent\u003e predicate)` is called to find only students that match the above condition. A new `CommandResult` is returned with a successful message indicating the number of matching students."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. The filtered student list replaces the displayed list on the GUI and a success message is shown in the result display."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "The following sequence diagram shows how the `OverdueCommand` execution works."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![OverdueSequence](images/OverdueSequenceDiagram.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Sequence diagram for `OverdueCommand` execution"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following activity diagram summarises the flow of events when `OverdueCommand` is executed."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![OverdueActivity](images/OverdueActivityDiagram.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Activity diagram for `OverdueCommand` execution"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "#### 5.1.6 Schedule Command"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "This section describes the operations that `ScheduleCommand` performs."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. Upon successful parsing of the user input date into `LocalDate` , the `ScheduleCommand#execute(Model model)` method is called."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. The method `LocalDate#getDayOfWeek()` is then called on the `LocalDate` that is parsed from the user input to get the `dayOfWeek`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. The `dayOfWeek` is then used to create a `Predicate\u003cStudent\u003e` to check if the student has the same day as the date."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "4. Then the method `Model#updateFilteredPersonList(Predicate\u003cStudent\u003e)` is then called to filter students based on predicate created in **Step 3**."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "5. The StudentListPanel is then populated with the students that have lesson on the day."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "The following activity diagram summarizes the flow of events when the `ScheduleCommand` is being executed:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "![ScheduleActivity](images/ScheduleActivityDiagram.png)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Activity diagram for `ScheduleCommand` execution"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "### 5.2 Student questions features"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The student questions feature keeps track of questions raised by a student to his tutor. The features comprises of the following commands:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* `AddQuestionCommand` - Adds a question to a specified student"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* `SolveQuestionCommand` - Marks a specified question from a specified student as solved"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* `DeleteQuestionCommand` - Deletes a specified question from a specified student"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "#### 5.2.1 Add question command"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following describes the flow of how `AddQuestionCommand` is performed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. Upon successfully parsing the user input, `AddQuestionCommand#execute(Model model)` is called to check if the student at the specified position exists."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. If there is no student at the specified position,  a `CommandException` is thrown and the question will not be added."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. If the student exists, `AddQuestionCommand#execute(Model model)` checks if the student already has a similar question recorded."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "4. A unique question is defined solely by its `question` and does not take into account if the question has been solved. If a duplicate question is found, a `CommandException` is thrown and the question will not be added."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "5. If the question is not a duplicate, `Student#addQuestion(Question question)` is called to create a modified copy of the student with a newly added question."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "6. `Model#setPerson(Student target, Student editedStudent)` is called to replace the student with the modified copy. A new `CommandResult` is returned with a success message showing the affected student and the question added."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "7. The modified student replaces the outdated student in the `UniqueStudentList` and a success message is shown in the result display."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following sequence diagram shows how the question adding operation works."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![AddQuestionSequence](images/AddQuestionSequenceDiagram.png)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Sequence diagram for `AddQuestionCommand` execution"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following activity diagram summarises the flow of events when `AddQuestionCommand` is executed."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![AddQuestionActivity](images/AddQuestionActivityDiagram.png)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Activity diagram for `AddQuestionCommand` execution"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "#### 5.2.2 Solve question command"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following describes the flow of how `SolveQuestionCommand` is performed."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. Upon successfully parsing the user input, `SolveQuestionCommand#execute(Model model)` is called to check if the student at the specified position exists."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. If there is no student at the specified position,  a `CommandException` is thrown and the question will not be added."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. If the student exists, `SolveQuestionCommand#execute(Model model)` checks if there is a question at the specified position."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "4. If the question does not exist, a `CommandException` is thrown and the question will not be resolved."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "5. If the question exists, `Student#setQuestion(Question target, Question newQuestion)` is called to create a modified copy of the student where the specified question has been replaced with a solved version."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "6. `Model#setPerson(Student target, Student editedStudent)` is called to replace the student with the modified copy. A new `CommandResult` is returned with a success message showing the affected student and the question solved."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "7. The modified student replaces the outdated student in the `UniqueStudentList` and a success message is shown in the result display."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following sequence diagram shows how the question solving operation works."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![SolveQuestionSequence](images/SolveQuestionSequenceDiagram.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Sequence diagram for `SolveQuestionCommand` execution"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following activity diagram summarises the flow of events when `SolveQuestionCommand` is executed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![SolveQuestionActivity](images/SolveQuestionActivityDiagram.png)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Activity diagram for `SolveQuestionCommand` execution"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "#### 5.2.3 Delete question command"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following describes the flow of how `DeleteQuestionCommand` is performed."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. Upon successfully parsing the user input, `DeleteQuestionCommand#execute(Model model)` is called to check if the student at the specified position exists."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. If there is no student at the specified position,  a `CommandException` is thrown and the question will not be added."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. If the student exists, `DeleteQuestionCommand#execute(Model model)` checks if there is a question at the specified position."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "4. If the question does not exist, a `CommandException` is thrown and the question will not be resolved."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "5. If the question exists, `Student#deleteQuestion(Question target)` is called to create a modified copy of the student without the specified question."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "6. `Model#setPerson(Student target, Student editedStudent)` is called to replace the student with the modified copy. A new `CommandResult` is returned with a success message showing the affected student and the question removed."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "7. The modified student replaces the outdated student in the `UniqueStudentList` and a success message is shown in the result display."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following sequence diagram shows how the question deletion operation works."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![DeleteQuestionSequence](images/DeleteQuestionSequenceDiagram.png)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Sequence diagram for `DeleteQuestionCommand` execution"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The following activity diagram summarises the flow of events when `DeleteQuestionCommand` is executed."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "![DeleteQuestionActivity](images/DeleteQuestionActivityDiagram.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Figure \\___. Activity diagram for `DeleteQuestionCommand` execution"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "### 5.3 Student Find Command"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "csiongn"
        },
        "content": "This is an explanation of how `FindCommand` works."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "csiongn"
        },
        "content": "This is an activity diagram showing the high level idea of how `FindCommand` is executed."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "csiongn"
        },
        "content": "![FindCommandActivityDiagram](images/FindCommandActivityDiagram.png)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "csiongn"
        },
        "content": "This is a sequence diagram together with an explanation of the implementation."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "csiongn"
        },
        "content": "![FindCommandSequenceDiagram](images/FindCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "csiongn"
        },
        "content": " 1. After the `FindCommand`  is created by parsing user input, `FindCommand::execute` is called."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "csiongn"
        },
        "content": " 2. The method then calls `getPredicates()` of the `FindStudentDescriptor` stored within `FindCommand` to obtain a `List\u003cPredicate\u003e` to search with."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "csiongn"
        },
        "content": " 3. The predicates within `List\u003cPredicate\u003e`are then combined into `consolidatedPredicate`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "csiongn"
        },
        "content": " 4. The `FilteredList\u003cStudent\u003e` within the `Model` is then updated using `Model#updateFilteredPersonList(Predicate predicate)` for display."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "csiongn"
        },
        "content": " 5. A new `CommandResult` will be returned with the success message."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* is a Singapore primary/secondary/junior college private tutors"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* has a need to manage a significant number of student contacts"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* has a need to manage administrative details of students"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* has a need to manage administrative details of lessons"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "**Value proposition**: Helps tutors organise administrative details of their students and lesson with ease and manage student needs better."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                   | I want to …​                                          | So that I can…​                                                                     |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| -------- | --------------------------| ----------------------------------------------------- | ----------------------------------------------------------------------              |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | user ready to use Reeve   | input my student’s details (Admin)                    | refer to instructions when I forget how to use the App                              |"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | novice user               | be able to save meeting links for online lessons      | keep track of meeting links when my student cannot make it for a physical lesson    |                                                                       |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | expert user               | view my students\u0027 preferred tutoring location         | figure out how to get that location                                                 |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | expert user               | edit my students\u0027 personal details                    | get rid of outdated data                                                            |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | expert user               | view my student\u0027s details                             | refer to them when needed                                                           |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | expert user               | add additional details to each student                | add other miscellaneous details which can allow me to better cater to student needs |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | long-time user            | delete students\u0027 data                                 | remove irrelevant data of students who are no longer my tutees                      |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "| `* * *`  | expert user               | find a student\u0027s record                               | retrieve students\u0027 data with ease                                                   |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "csiongn"
        },
        "content": "(For all use cases below, the **System** is `Reeve` and the **Actor** is the `Tutor (User)`, unless specified otherwise)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC01: Adding a student**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1.  User enters a command to add a student with student details."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2.  Reeve saves student data into the students list and displays a success message."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* 1a. User provides input with missing compulsory fields."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    * 1a1. Reeve requests for appropriate input."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes from step 1."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* 1b. User provides input with invalid format."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    * 1b1. Reeve requests for appropriate input with valid format."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes from step 1."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC02: Searching for a student**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "csiongn"
        },
        "content": "1.  User enters a command to find all students that match the given search parameter (name, school, year or subject)."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "csiongn"
        },
        "content": "2.  Reeve displays all students matching the criteria."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1a. User provides input with invalid data into the search parameter."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 1a1. Reeve displays erroneous field and expected format."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1b. User provides input without a search parameter."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 1a1. Reeve displays a message indicating a search parameter was not provided."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1c. No students match the given criteria."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 1c1. Reeve displays a message indicating no match found."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC03: Editing a student\u0027s details**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1.  User enters a command to list students."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "2.  Reeve shows the list of students."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "3.  User enters command to edit a specific student in the list and provides needed parameters."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "4.  Reeve updates the specified student with the input parameters and displays a success message."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* 3a. User provides input with invalid index."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    * 3a1. Reeve requests for input with valid index."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* 3b. User provides input without any parameters."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    * 3b1. Reeve requests for input with parameters."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* 3c. User provides input with invalid format."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "\t* 3c1. Reeve requests for input with valid format."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "\t  Use case resumes at step 2."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**UC04: Deleting a student**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "1.  User enters a command to list students."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "2.  Reeve displays a list of students."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "3.  User enters a command to delete a specific student in the list."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "4.  Reeve deletes the student and displays a success message."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* 3a. User provides input with invalid index."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    * 3a1. Reeve displays an error message."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC05: Listing all students**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. User enters a command to list students."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "2. Reeve displays the students list with student details."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC06: Clearing all student records**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "1. User enters a command to clear the students list."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "2. Reeve displays a success message."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC07: Adding a question to a student**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. User enters a command to list students."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. Reeve displays a list of students."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. User enters a command to add an unresolved question to a specific student in the list."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "4. Reeve updates the specified student in the list with the newly added question."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "5. Reeve displays a success message."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3a. User provides input with an invalid student index."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3a1. Reeve displays an error message."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3b. User inputs a question in an invalid format."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3b1. Reeve displays an error message."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC07: Resolving a question from a student**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. User enters a command to list students."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. Reeve displays a list of students."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. User enters a command to resolve a question from a specific student in the list with a solution."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "4. Reeve updates the specified student in the list with the updated question."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "5. Reeve displays a success message."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3a. User provides input with an invalid student."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3a1. Reeve displays an error message."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3b. User provides input with an invalid question."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3b1. Reeve displays an error message."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3c. User inputs the solution in an invalid format."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3c1. Reeve displays an error message."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3d. User specifies a question that has already been solved."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3d1. Reeve displays an error message."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**UC07: Deleting a question from a student**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. User enters a command to list students."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. Reeve displays a list of students."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "3. User enters a command to delete a question from a specific student in the list."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "4. Reeve updates the specified student in the list with the removed question."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "5. Reeve displays a success message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3a. User provides input with an invalid student."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3a1. Reeve displays an error message."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 3b. User provides input with an invalid question."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    * 3b1. Reeve displays an error message."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "csiongn"
        },
        "content": "**UC07: Finding all students with overdue tuition fees**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "1. User enter command to filter all students by those who have not paid their fees in the past month."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "2. Reeve displays all students that match the above criteria."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* 1b. All students have paid their fees in the past month."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  * 1b1. Reeve displays an empty list."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "2.  The response to any use action should become visible within 5 seconds."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "3.  The program should be able to handle at least 100 students."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "4.  The graphical user interface should be easy to use for non-IT savvy users."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Deleting a student"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1. Deleting a student while all students are being shown"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   1. Prerequisites: List all students using the `list` command. Multiple students in the list."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 25,
      "VaishakAnand": 62,
      "StopTakingAllTheNames": 215,
      "-": 305,
      "csiongn": 15,
      "hogantan": 63
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   1. Run the `seedu.classVenue.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "hogantan": 1
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   e.g. `seedu.classVenue.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   e.g. `seedu.classVenue.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   e.g. `seedu.classVenue.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "hogantan": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## Reeve - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Table of Contents**  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  * [1.1 About Reeve](#11-about-reeve)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  * [1.2 Understanding the User Guide](#12-understanding-the-user-guide)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "- [2. Quick start](#2-quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  * [2.1 Setting Up Reeve](#21-setting-up-reeve)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  * [2.2 Making sense of **Reeve**\u0027s layout](#22-making-sense-of-reeves-layout)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  * [3.1 Understanding the command format](#31-understanding-the-command-format)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  * [3.2 Student Administrative Features](#32-student-administrative-features)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.1 Adding a student: `add` (By: Alex and Hogan)](#321-adding-a-student-add-by-alex-and-hogan)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.2 Editing a student: `edit` (By: Vaishak)](#322-editing-a-student-edit-by-vaishak)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.3 Locating students: `find` (By: Choon Siong)](#323-locating-students-find-by-choon-siong)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.4 Listing all students: `list`](#324-listing-all-students-list)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.5 Deleting a student: `delete`](#325-deleting-a-student-delete)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.6 Sorting the list of students: `sort` (By: Choon Siong)](#326-sorting-the-list-of-students-sort-by-choon-siong)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.7 Finding students with overdue fees: `overdue` (By: Ying Gao)](#327-finding-students-with-overdue-fees-overdue-by-ying-gao)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.8 Managing details for a student: `detail` (By: Vaishak)](#328-managing-additional-details-for-a-student-detail-by-vaishak)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.2.8.1 Adding a detail: `detail add`](#3281-adding-a-detail-detail-add)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.2.8.2 Editing a detail: `detail edit`](#3282-editing-a-detail-detail-edit)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.2.8.3 Deleting a detail: `detail delete`](#3283-deleting-a-detail-detail-delete)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.2.9 Clearing all entries: `clear`](#329-clearing-all-entries-clear)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "  * [3.3 Student Academics Features](#33-student-academics-features)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.3.1 Recording questions from a student: `question` (By: Ying Gao)](#331-recording-questions-from-a-student-question-by-ying-gao)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.3.1.1 Adding a question: `question add`](#3311-adding-a-question-question-add)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.3.1.2 Resolving a question: `question solve`](#3312-resolving-a-question-question-solve)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.3.1.3 Deleting a question: `question delete`](#3313-deleting-a-question-question-delete)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.3.2 Recording exams of a student: `exam` (By: Hogan)](#332-recording-exams-of-a-student-exam-by-hogan)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.3.2.1 Adding an exam record to a student: `exam add`](#3321-adding-an-exam-record-to-a-student-exam-add)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.3.2.2 Deleting an exam record for a student: `exam delete`](#3322-deleting-an-exam-record-for-a-student-exam-delete)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.3.3 Recording attendance of a student: `attendance` (By: Vaishak)](#333-recording-attendance-of-a-student-attendance-by-vaishak)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.3.3.1 Adding an attendance record to a student: `attendance add`](#3331-adding-an-attendance-record-to-a-student-attendance-add)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        + [3.3.3.2 Deleting an attendance record for a student: `attendance delete`](#3332-deleting-an-attendance-record-for-a-student-attendance-delete)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  * [3.4 Miscellaneous Features](#34-miscellaneous-features)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    + [3.4.1 Scheduling: `schedule`](#341-scheduling-schedule-coming-soon)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        + [3.4.1.1. Viewing personal schedule on a Timetable: `schedule view`  (By: Alex)](#3411-viewing-personal-schedule-on-a-timetable-schedule-view--by-alex-coming-soon)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        + [3.4.1.2. Adding events to the schedule: `schedule add`](#3412-adding-events-to-the-schedule-schedule-add-coming-soon)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        + [3.4.1.3. Delete events on the schedule: `schedule delete`](#3413-delete-events-on-the-schedule-schedule-delete-coming-soon)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.4.2 Toggling between academic and administrative details: `toggle` (By: Hogan)](#342-toggling-between-academic-and-administrative-details-toggle-by-hogan)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.4.3 Viewing help: `help`](#343-viewing-help-help)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    + [3.4.4 Exiting the program: `exit`](#344-exiting-the-program-exit)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "- [4. Command summary](#4-command-summary)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "- [5. Glossary](#5-glossary)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "- [6. FAQ](#6-faq)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**Welcome to Reeve!** "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "### 1.1 About Reeve"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Are you looking for a one-stop application that can handle all your private tutoring needs? Then you are in luck!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**Reeve** is a desktop application for **private tutors to to better manage both administrative and academic details of their students**, optimised for use via a"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**Command Line Interface (CLI)** for receiving inputs while still having the benefits of a **Graphical User Interface (GUI)** for displaying information. In addition, **Reeve** comes with a customisable personal scheduler to assist you keeping track of your classes. **Reeve** also allows you to set timely reminders for yourself. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Get to experience all the above without even having to move your mouse at all! "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": " "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Also, did we mention that you are able to achieve all the above **without internet access at all**?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "If you are a private tutor that wants to not only manage your students\u0027 administrative details with ease but to also better meet their needs, then **Reeve** is made for you!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Let\u0027s dive into the User Guide to find out more!"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 1.2 Understanding the User Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The goal of this User Guide is to provide you with the information on how to utilise **Reeve** to its fullest. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "For those who are unfamiliar with what a CLI is, no worries! This User Guide will ensure that you will be able to understand how to use a CLI by the end of it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Here is a summary (Table 1) of the symbols that are used in this User Guide:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Table 1: Summary of symbols"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Symbol | Meaning "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------|-------- "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "`command` | A grey highlight indicates a command that can be executed by **Reeve**."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":information_source: | Indicates important information. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 2. Quick start"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "This section serves to explain how to set up **Reeve** on your computer and how to make sense of the visual layout of the application. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 2.1 Setting Up Reeve"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2. Download the latest `jar` file from [here](https://github.com/AY2021S1-CS2103T-W15-2/tp/releases)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for **Reeve**."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   * **`list`** : Lists all students."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   * **`add`**`add n/Alex p/93211234 s/Commonwealth Secondary School y/Primary 6 v/Blk 33 West Coast Rd #21-214"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "   t/1 1430-1630 f/25 d/12/12/2020` : Adds a student named `Alex` to **Reeve**."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd student shown in the current list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "   * **`clear`** : Deletes all students."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "   * **`exit`** : Exits **Reeve**."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "1. Refer to the [Features](#3-features) section below for details of each command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "### 2.2 Making sense of **Reeve**\u0027s layout"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "(to be added when GUI is finalised)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "This section serves to provide you a detailed explanation of how the various features of **Reeve** work and how to use these features."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 3.1 Understanding the command format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The following points explain how to make sense of the command format:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  e.g `n/NAME [a/DETAIL_TEXT]` can be used as `n/John Doe a/Likes to read books` or as `n/John Doe`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  e.g. `[a/DETAIL_TEXT]…​` can be used as ` ` (i.e. 0 times), `a/Likes to read books`, `a/Likes sweets a/Needs help with Algebra` etc."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 3.2 Student Administrative Features"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Reeve\u0027s student administrative features allows you to keep track of key administrative details of each of your students such as phone number, class venue, tuition fee, etc. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Thereafter, you will be able to view, edit find or delete these students."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.2.1 Adding a student: `add` (By: Alex and Hogan)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "You can add a student together with his/her individual administrative details into **Reeve\u0027s** student list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `add n/NAME p/PHONE s/SCHOOL y/YEAR v/CLASS_VENUE t/CLASS_TIME [f/FEE] [d/LAST_PAYMENT_DATE] [a/ADDITIONAL_DETAILS]…​`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":information_source: The format of TIME is as follows:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* {int: day_of_week} {int: start_time}-{int: end_time}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* day_of_week is any number from 1 to 7, where 1 refers to Monday while 7 refers to Sunday."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* start_time and end_time follows the 24-hr clock format (e.g. 1pm refers to 1300)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":information_source: The format of LAST_PAYMENT_DATE is as follows:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* d/m/yyyy or dd/mm/yyyy (e.g. both 03/02/2020 and 3/2/2020 are acceptable)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":information_source: The format of YEAR is as follows:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* TYPE_OF_SCHOOL LEVEL (e.g. y/primary 2 and y/p 2 are the same and both acceptable)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* TYPE_OF_SCHOOL can be primary(pri, p), secondary(sec, s) or jc. "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* LEVEL has to correspond with the TYPE_OF_SCHOOL (e.g. primary 1 - primary 6, secondary 1 - secondary 5, jc 1 - jc 2)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* `FEE` defaults to $0.00 if not included."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* `LAST_PAYMENT_DATE` defaults to today\u0027s date if not included."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `add n/Alex p/93211234 s/Commonwealth Secondary School y/pri 6 v/Blk 33 West Coast Rd #21-214"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "t/1 1430-1630 f/25 d/12/12/2020`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `add n/John Doe p/98765432 s/Woodlands Secondary School y/s 2 v/347 Woodlands Ave 3, Singapore 730347"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "t/1 1200-1400 f/30 d/24/09/2020 a/Likes chocolates a/Needs help with Algebra`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.2.2 Editing a student: `edit` (By: Vaishak)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Edits an existing student in **Reeve**."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `edit STUDENT_INDEX [n/NAME] [p/PHONE] [s/SCHOOL] [y/YEAR] [v/CLASS_VENUE] [t/CLASS_TIME] [f/FEE] [d/PAYMENT_DATE] `"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ":information_source: The format of TIME is {int: Day_of_week} {int: Start_time}-{int: End_time}\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Day_of_week refers to an Integer value from 1 - 7, with 1, 3 and 7 representing Monday, Wednesday and Sunday respectively.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Start_time and End_time refer to time values in 24hr format (1200-1700)\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "E.g. \"4 0900-1700\" means a class time of Thursday, 9am to 5pm.  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Edits the student at the specified `STUDENT_INDEX`. The index refers to the index number shown in the displayed student list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Start time has to be before end time."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hogantan"
        },
        "content": "*  `edit 1 n/Alex p/99999999 s/Meridian Junior College` Edits the name, phone number and school of the 1st student to be `Alex`, `99999999` and `Meridian Junior College` respectively."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "*  `edit 3 sb/Mathematics v/Blk 33 West Coast Rd #21-214 t/1 1430-1630` Edits the subject, venue and time of the third student to be `Mathematics`, `Blk 33 West Coast Rd #21-214` and `1 1430-1630` respectively."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.2.3 Locating students: `find` (By: Choon Siong)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Finds students who satisfy the given search criteria."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `find [n/NAME] [s/SCHOOL] [y/YEAR]`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* The order of the optional fields do not matter. e.g `n/Hans s/River Valley` will match `s/River Valley n/Hans`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* Only full words will be matched. e.g `han` will not match `hans`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* For the name, students with a name that matches any whole keyword specified for the name will be considered to match for the name."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* For the school, students with a school that contains any keyword specified for the school will be considered to match for the school."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* Only students matching all criteria specified will be returned (i.e `AND` search)."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* `find n/Alex david` matches `Alex David`, `alex david` and `Alex david`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* `find n/Alex david` does not match `Alexis Davinder`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* `find s/yishun sec` matches `Yishun Secondary School` and `Yishun Town Secondary School`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* `find s/yishun secondary` does not match `Yishun Sec`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* `find n/alex s/yishun y/sec 3` searches for all students who match all of `n/alex`, `s/yishun` and `y/sec 3`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.2.4 Listing all students: `list`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "You can view the list of all students in **Reeve**."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":information source: You will need to use this if you wish to view the full student list after using commands such as `find`, `overdue` and `schedule`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.2.5 Deleting a student: `delete`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "You can delete a specified student from **Reeve**."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `delete STUDENT_INDEX`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Deletes the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* The index refers to the index number shown in the displayed students list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ":information_source: `STUDENT_INDEX` **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":information_source: You will need to use this if you wish to view the full student list after using commands such as `find`, `overdue` and `schedule`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd student in **Reeve**."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `find n/Betsy` followed by `delete 1` deletes the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "csiongn"
        },
        "content": "#### 3.2.6 Sorting the list of students: `sort` (By: Choon Siong)  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "csiongn"
        },
        "content": "  "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Sorts the list of students by a specified comparison means. The comparison means must be their name, class time or year."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `sort COMPARISON_MEANS`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* The valid options for the sorting method `COMPARISON_MEANS` are `name`, `classTime` or `year`. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* Only one option for the sorting method can be specified."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* The sorting method is case sensitive when being specified"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* Sorting methods:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\t* `name`: Sorts students by their name in alphabetical order. This is case insensitive."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\t* `classTime`: Sorts students by the the time of their class first by the day than the time."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\t* `year` Sorts students by the school year they are in with `Primary` type years coming before `Secondary` type coming before `JC` type. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* `sort year` to sort students by their year"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "csiongn"
        },
        "content": "#### 3.2.7 Finding students with overdue fees: `overdue` (By: Ying Gao)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "You can find all students whose date of last payment is more than a month ago."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Format: `overdue`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* Students tutored for free (i.e. `FEE` \u003d $0.00) will not be displayed."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* If all students have paid their fees within the past month, no students will be displayed."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "csiongn"
        },
        "content": "#### 3.2.8 Managing additional details for a student: `detail` (By: Vaishak) "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can add, edit or delete a detail for a specified student."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "General Format: `detail COMMAND_WORD STUDENT_INDEX PARAMETERS`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The `COMMAND_WORD` field accepts either `add`, `edit` or `delete`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The command affects the student at the specified `STUDENT_INDEX`. "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `STUDENT_INDEX` **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The format of `PARAMETERS` varies with each `COMMAND_WORD` as explained below."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "csiongn"
        },
        "content": "#### 3.2.8.1 Adding a detail: `detail add`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can add a detail to a specified student in **Reeve**."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `detail add STUDENT_INDEX t/DETAIL_TEXT`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Adds the detail to the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `detail add 1 t/Smart` adds the \"Smart\" detail to the 1st student in **Reeve**."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `detail add 3 t/Punctual` adds the \"Punctual\" detail to the 3rd student in **Reeve**."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "csiongn"
        },
        "content": "#### 3.2.8.2 Editing a detail: `detail edit`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can edit an existing detail to a specified student in **Reeve**."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `detail edit STUDENT_INDEX i/DETAIL_INDEX t/DETAIL_TEXT`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Edits the detail at the specified `DETAIL_INDEX` for the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `detail edit 1 i/2 t/Handsome` edits the 2nd detail for the 1st student in **Reeve**, to \"Handsome\"."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `detail edit 5 i/8 t/Smart` edits the 8th detail for the 5th student in **Reeve**, to \"Smart\"."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "csiongn"
        },
        "content": "#### 3.2.8.3 Deleting a detail: `detail delete`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can delete an existing detail to a specified student in **Reeve**."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `detail delete STUDENT_INDEX i/DETAIL_INDEX`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Deletes the detail at the specified `DETAIL_INDEX` for the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `detail delete 1 i/3` deletes the 3rd detail for the 1st student in **Reeve**."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `detail delete 4 i/1` deletes the 1st detail for the 4th student in **Reeve**."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "csiongn"
        },
        "content": "#### 3.2.9 Clearing all entries: `clear`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "You can clear all student data from **Reeve**."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 3.3 Student Academics Features"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Reeve\u0027s student academics features allows you to keep track of key academic details of each of your students such as questions, exams and etc. "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Thereafter, you will be able to view, edit or delete these details of each student. "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.3.1 Recording questions from a student: `question` (By: Ying Gao) "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "You can add, resolve or remove questions from a specified student in **Reeve**."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "General Format: `question COMMAND_WORD STUDENT_INDEX DETAILS`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* The `COMMAND_WORD` field accepts either `add`, `solve` or `delete`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The command affects the student at the specified `STUDENT_INDEX`, which is his/her position on the list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* The format of `DETAILS` varies with each command word as explained below."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ":information_source: `STUDENT_INDEX` **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hogantan"
        },
        "content": "##### 3.3.1.1 Adding a question: `question add`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Adds a new question to the student."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `question add STUDENT_INDEX t/QUESTION`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* This records a new unresolved question to the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":information_source: `QUESTION` must not be empty."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `question add 1 t/How do birds fly?` records \"How do birds fly?\" as a question from the 1st student in **Reeve**."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hogantan"
        },
        "content": "##### 3.3.1.2 Resolving a question: `question solve`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Marks a student\u0027s question as resolved."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `question solve STUDENT_INDEX i/QUESTION_INDEX t/SOLUTION`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* This resolves the question from the student at the specified `STUDENT_INDEX`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* This resolves the question at the `QUESTION_INDEX`. The `QUESTION_INDEX` refers to the position of the question in the student\u0027s list of questions."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":information_source: `QUESTION_INDEX` **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":information_source: `SOLUTION` must not be empty."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":information_source: You can only resolve unanswered questions (i.e. questions with a cross symbol next to it)."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `question solve 1 i/1 t/Read a book.` marks the 1st question of the 1st student in **Reeve** as answered."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hogantan"
        },
        "content": "##### 3.3.1.3 Deleting a question: `question delete`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Deletes a student\u0027s question."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `question delete STUDENT_INDEX i/QUESTION_INDEX`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* This deletes the question at the specified `QUESTION_INDEX`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "* `QUESTION_INDEX` **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `question delete 1 i/1` deletes the 1st question of the 1st student in **Reeve**."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.3.2 Recording exams of a student: `exam` (By: Hogan)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hogantan"
        },
        "content": "You can add or delete an exam to/from a specified student."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "General Format: `exam COMMAND_WORD_EXAM STUDENT_INDEX PARAMETERS`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* The `COMMAND_WORD_EXAM` field accepts either `add` or `delete`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The command affects the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* The format of `PARAMETERS` varies with each command word as explained below."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hogantan"
        },
        "content": "##### 3.3.2.1 Adding an exam record to a student: `exam add`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can add an exam record to a specified student in **Reeve**."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `exam add STUDENT_INDEX n/EXAM_NAME d/EXAM_DATE s/EXAM_SCORE`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Adds the given exam to the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":information_source: The format of EXAM_DATE is as follows:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* dd/mm/yyyy or d/m/yyyy (e.g. 08/12/2020)."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":information_source: The format of EXAM_SCORE is as follows:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* x/y where x and y are non-negative integers. "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* x has to be less than or equal to y (e.g. 30/50)."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `exam add 1 n/Mid Year 2020 d/08/12/2020 s/40/60` adds the \"Mid Year 2020\" exam with date 8 Dec 2020 and "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "score 40/60 to the first student in **Reeve**."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `exam add 5 n/End of Year 2020 d/12/05/2020 s/67/100` adds the \"End of Year 2020\" exam with date 12 May 2020 and "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "score 67/100 to the fifth student in **Reeve**."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hogantan"
        },
        "content": "##### 3.3.2.2 Deleting an exam record for a student: `exam delete`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can delete a specific exam from a specified student in **Reeve**."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `exam delete STUDENT_INDEX i/EXAM_INDEX`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Deletes the exam at `EXAM_INDEX` in the specified student\u0027s exam list."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The specified student is chosen based on `STUDENT_INDEX` of **Reeve**. "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* The `STUDENT_INDEX` refers to the index number shown in the displayed students list."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `exam delete 1 i/1` deletes the first exam from the first student in the displayed students list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* `exam delete 2 i/5` deletes the fifth exam from the second student in the displayed students list."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "#### 3.3.3 Recording attendance of a student: `attendance` (By: Vaishak)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can add or delete an attendance record to/from a specified student."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "General Format: `attendance COMMAND_WORD STUDENT_INDEX PARAMETERS`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The `COMMAND_WORD` field accepts either `add` or `delete`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The command affects the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `STUDENT_INDEX` **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The format of `PARAMETERS` varies with each command word as explained below."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "##### 3.3.3.1 Adding an attendance record to a student: `attendance add`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can add an attendance record to a specified student in **Reeve**."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `attendance add STUDENT_INDEX d/LESSON_DATE a/ATTENDANCE_STATUS f/FEEDBACK`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Adds the given attendance record to the student at the specified `STUDENT_INDEX`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* There can only be one attendance record for every `LESSON_DATE`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ":information_source: The format of ATTENDANCE_DATE is as follows:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* dd/mm/yyyy or d/m/yyyy (e.g. 08/12/2020)."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ":information_source: The format of FEEDBACK is as follows:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* present or absent."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `attendance add 2 d/08/12/2020 s/present f/attentive` adds the attendance record with the date 8 Dec 2020,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "status of present and feedback of attentive, to the 2nd student in **Reeve**."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "##### 3.3.3.2 Deleting an attendance record for a student: `attendance delete`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "You can delete a specific attendance record from a specified student in **Reeve**."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `attendance delete STUDENT_INDEX d/ATTENDANCE_DATE`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* Deletes the attendance record with the given `ATTENDANCE_DATE` in the specified student."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The specified student is chosen based on `STUDENT_INDEX` of **Reeve**. "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* The `STUDENT_INDEX` refers to the index number shown in the displayed students list."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "* `attendance delete 1 d/19/04/2020` deletes the attendance with the date 19 Apr 2020 from the 1st student in the displayed students list in **Reeve**."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### 3.4 Miscellaneous Features"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "#### 3.4.1 Scheduling: `schedule` (COMING SOON)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "##### 3.4.1.1 Viewing personal schedule on a Timetable: `schedule view`  (By: Alex) (COMING SOON)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "List the events that the user has on a timetable. The classes that user has with students will also be included."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Format: `schedule view [mode/VIEW_MODE] [date/DATE_TO_VIEW]`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* mode can be either **weekly** or **daily**. The case of the letters does not matter."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* Date must be in the format of **yyyy-mm-dd**."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* Both mode and date are optional. If it is not provided, the timetable would be default in the weekly mode and showing the current date."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "Example: `schedule view mode/weekly date/2020-11-25` Shows the schedule in the week of 2020-11-25 (To include screenshot)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "##### 3.4.1.2 Adding events to the schedule: `schedule add` (COMING SOON)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "Adds a new event to the schedule."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "Format: `schedule add [n/Event_Name] [startDateTime/Start_Date_Time] [endDateTime/End_Date_Time] [r/Event_recurrence]`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* All fields are compulsory."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* Event_Name has no restriction and can be of any form."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* Start_Date_Time and End_Date_Time must be of the format yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* The Time portion HH:mm must be in 24-hr format."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* Event_recurrence can only be one of these cases: `none`, `daily`, or `weekly`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "`schedule add n/Meeting startDateTime/2020-10-25T10:00 endDateTime/2020-10-25T11:00 r/none`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "creates a meeting event from 10am - 11am on 25th October 2020, this is a non-recurring event."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "##### 3.4.1.3 Delete events on the schedule: `schedule delete` (COMING SOON)"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "Deletes an event on the schedule."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "Format: `schedule delete n/eventName start/eventStartDateTime end/eventEndDateTime`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "* The event\u0027s name, start date time and end date time identifies an event to be deleted"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.4.2 Toggling between academic and administrative details: `toggle` (By: Hogan)"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hogantan"
        },
        "content": "You can toggle between viewing your students\u0027 academic and administrative details to allow you to focus on the type of details that you are currently interested in."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hogantan"
        },
        "content": "By default, the administrative details of students are shown upon starting the application."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `toggle`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.4.3 Viewing help: `help`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hogantan"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hogantan"
        },
        "content": "#### 3.4.4 Exiting the program: `exit`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "You can exit the program. Any changes you have made to **Reeve** is automatically saved to your drive, hence you do not have to worry about losing data."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 4. Command summary"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "This following table (Table 2) provides a summary of all the commands in **Reeve**."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Table 2: Summary of commands in **Reeve**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Add Student** | `add n/NAME p/PHONE s/SCHOOL y/YEAR v/CLASS_VENUE t/CLASS_TIME f/FEE d/LAST_PAYMENT_DATE [a/ADDITIONAL_DETAILS]...​` \u003cbr\u003e e.g., `add n/John Doe p/98765432 s/Woodlands Secondary School y/Secondary 2 v/347 Woodlands Ave 3, Singapore 730347 t/1 1200-1400 f/30 d/24/09/2020 a/Likes chocolates a/Needs help with Algebra`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Edit Student** | `edit STUDENT_INDEX [n/NAME] [p/PHONE] [n/NAME] [p/PHONE] [v/CLASS_VENUE] [s/SCHOOL] [sb/SUBJECT] [y/YEAR] [t/CLASS_TIME]`\u003cbr\u003e e.g.,`edit 1 n/Alex p/99999999 s/Meridian Junior College`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Find Student** | `find [n/NAME] [s/SCHOOL] [y/YEAR] [sb/SUBJECT]`\u003cbr\u003e e.g., `find n/alex s/yishun`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**List Students** | `list`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Delete Student** | `delete STUDENT_INDEX`\u003cbr\u003e e.g. `delete 3`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Sort Students** | `sort COMPARISON_MEANS`\u003cbr\u003e e.g. `sort year`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Overdue** | `overdue unpaid`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Add Detail** | `detail add STUDENT_INDEX t/DETAIL_TEXT`\u003cbr\u003e e.g. `detail add 1 t/Smart`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Edit Detail** | `detail edit STUDENT_INDEX i/DETAIL_INDEX t/DETAIL_TEXT`\u003cbr\u003e e.g. `detail edit 1 i/2 t/Handsome`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Delete Detail** | `detail delete STUDENT_INDEX i/DETAIL_INDEX`\u003cbr\u003e e.g. `detail delete 1 i/3`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Add Question** | `question add STUDENT_INDEX t/QUESTION`\u003cbr\u003e e.g. `question add 1 t/How do birds fly?`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Resolve Question** | `question solve STUDENT_INDEX i/QUESTION_INDEX t/SOLUTION`\u003cbr\u003e e.g. `question solve 1 i/1 t/Read a book.`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Delete Question** | `question delete STUDENT_INDEX i/QUESTION_INDEX`\u003cbr\u003e e.g. `question delete 1 i/1`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Add Exam** | `exam add STUDENT_INDEX n/EXAM_NAME d/EXAM_DATE s/EXAM_SCORE`\u003cbr\u003e e.g. `exam add 1 n/Mid Year 2020 d/08/12/2020 s/40/60`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Delete Exam** | `exam delete STUDENT_INDEX i/EXAM_INDEX`\u003cbr\u003e e.g. `exam delete 2 i/5`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Add Attendance** | `attendance add STUDENT_INDEX d/LESSON_DATE a/ATTENDANCE_STATUS f/FEEDBACK`\u003cbr\u003e e.g. `attendance add 2 d/08/12/2020 s/present f/attentive`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Delete Attendance** | `attendance delete STUDENT_INDEX d/ATTENDANCE_DATE`\u003cbr\u003e e.g. `attendance delete 1 d/19/04/2020`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Toggle View** | `toggle`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 5. Glossary"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The following table provides the definitions of the various terms used in this User Guide."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Term | Definition"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hogantan"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hogantan"
        },
        "content": "This section provides the answers to Frequently Asked Questions (FAQ) by users."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1. How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous **Reeve** home folder."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2. Do I have to manually save my data?\u003cbr\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Reeve data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 37,
      "VaishakAnand": 163,
      "StopTakingAllTheNames": 106,
      "-": 109,
      "csiongn": 33,
      "hogantan": 145
    }
  },
  {
    "path": "docs/diagrams/AddQuestionActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":User executes add question command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":Parses the command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    :AddQuestionCommand is executed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if () then ([student exists])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            if () then ([no duplicate question])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Create student copy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Add question to student copy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Replace student with modified copy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Display success message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Display duplicate question error message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            :Display invalid student error message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "else ([command is invalid - missing or invalid arguments])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    :Display parse error message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 23
    }
  },
  {
    "path": "docs/diagrams/AddQuestionSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":ReeveParser\" as ReeveParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":QuestionCommandParser\" as QuestionCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"a:AddQuestionCommand\" as AddQuestionCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"q:UnsolvedQuestion\" as Question MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"student:Student\" as Student MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[-\u003e LogicManager : execute(\"question add 1 t/something\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e ReeveParser : parseCommand(\"question add 1 t/something\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate ReeveParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create QuestionCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser -\u003e QuestionCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate QuestionCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser --\u003e ReeveParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate QuestionCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser -\u003e QuestionCommandParser : parse(\"add 1 t/something\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate QuestionCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create Question"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser -\u003e Question : UnsolvedQuestion(\"something\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Question"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Question --\u003e QuestionCommandParser : q"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Question"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create AddQuestionCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser -\u003e AddQuestionCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate AddQuestionCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "AddQuestionCommand --\u003e QuestionCommandParser : a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate AddQuestionCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser --\u003e ReeveParser : a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate QuestionCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser -[hidden]-\u003e ReeveParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy QuestionCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate ReeveParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e AddQuestionCommand : execute()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate AddQuestionCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "AddQuestionCommand -\u003e Model : getStudent(1)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Model --\u003e AddQuestionCommand : student"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "AddQuestionCommand -\u003e Student : addQuestion(q)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Student"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Student --\u003e AddQuestionCommand : copy"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Student"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "AddQuestionCommand -\u003e Model : setStudent(student, copy)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Student -[hidden]-\u003e Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy Student"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Model --\u003e AddQuestionCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "AddQuestionCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate AddQuestionCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "AddQuestionCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy AddQuestionCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 88
    }
  },
  {
    "path": "docs/diagrams/AddStudentActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":User executes add student command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ":Parses the command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    :Add command is executed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    if() then ([student already exists])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        :Display duplicate student error message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    else ([student is unique])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        :Add student into student list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        :Display add student success message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "else ([command is invalid - missing or invalid arguments])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    :Display parse error message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hogantan": 17
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(reeve)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "hogantan": 1
    }
  },
  {
    "path": "docs/diagrams/DeleteQuestionActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":User executes delete question command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":Parses the command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    :DeleteQuestionCommand is executed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if () then ([student exists])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            if () then ([question does not exist])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Display invalid question error message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Create student copy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Delete question from student copy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Replace student with modified copy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Display success message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            :Display invalid student error message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "else ([command is invalid - missing or invalid arguments])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    :Display parse error message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 23
    }
  },
  {
    "path": "docs/diagrams/DeleteQuestionSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":ReeveParser\" as ReeveParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":QuestionCommandParser\" as QuestionCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"d:DeleteQuestionCommand\" as DeleteQuestionCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"student:Student\" as Student MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[-\u003e LogicManager : execute(\"question delete 1 i/1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e ReeveParser : parseCommand(\"question delete 1 i/1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate ReeveParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create QuestionCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser -\u003e QuestionCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate QuestionCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser --\u003e ReeveParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate QuestionCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser -\u003e QuestionCommandParser : parse(\"delete 1 i/1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate QuestionCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create DeleteQuestionCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser -\u003e DeleteQuestionCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate DeleteQuestionCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "DeleteQuestionCommand --\u003e QuestionCommandParser : s"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate DeleteQuestionCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser --\u003e ReeveParser : s"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate QuestionCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser -[hidden]-\u003e ReeveParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy QuestionCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate ReeveParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e DeleteQuestionCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate DeleteQuestionCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "DeleteQuestionCommand -\u003e Model : getStudent(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Model --\u003e DeleteQuestionCommand : student"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "DeleteQuestionCommand -\u003e Student : deleteQuestion(1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Student"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Student --\u003e DeleteQuestionCommand : copy"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Student"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "DeleteQuestionCommand -\u003e Model : setStudent(student, copy)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Model --\u003e DeleteQuestionCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Student -[hidden]-\u003e Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy Student"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "DeleteQuestionCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate DeleteQuestionCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "DeleteQuestionCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy DeleteQuestionCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 80
    }
  },
  {
    "path": "docs/diagrams/EditStudentActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ":User executes edit student command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ":Parses the command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "if() then ([command is valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    if() then ([there are edited student fields])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    :Edit command is executed;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if() then ([student index is invalid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            :Display invalid student index error message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        else ([student index is valid])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            if() then ([edited student is unique])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            :Replace student with edited student in student list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            :Display edit student success message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            else ([edited student already exists])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            :Display duplicate student error message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    else ([there are no edited student fields])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    :Display no edits made message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "else ([command is invalid - missing or invalid parameters])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    :Display parse error message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "stop"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 25
    }
  },
  {
    "path": "docs/diagrams/EditStudentSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "participant \":ReeveParser\" as ReeveParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "participant \"command:EditCommand\" as Command LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "[-\u003e LogicManager : execute(\"edit\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "LogicManager -\u003e ReeveParser : parseCommand(\"edit\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate ReeveParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "ReeveParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "EditCommandParser -\u003e ReeveParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "ReeveParser -\u003e EditCommandParser : parse()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parseStudent()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "EditCommandParser -\u003e EditCommandParser : parseAdmin()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "create Command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "EditCommandParser -\u003e Command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Command --\u003e EditCommandParser : command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "EditCommandParser --\u003e ReeveParser : command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "ReeveParser --\u003e LogicManager : command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate ReeveParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "LogicManager -\u003e Command : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Command -\u003e Model : setStudent()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Model --\u003e Command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Command -\u003e Model : updateFilteredStudentList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Model --\u003e Command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Command --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "Command -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "destroy Command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 72
    }
  },
  {
    "path": "docs/diagrams/FindCommandActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ":User executes find command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ":Parses the command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    :Obtain list of predicates;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    :Combines predicates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    :Update Reeve model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "else ([command has no or invalid parameters])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    :Show parse error message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "end"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "csiongn": 15
    }
  },
  {
    "path": "docs/diagrams/FindCommandFullSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "!include ./style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "box \"Logic\" #LightBlue"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":ReeveParser\" as rp LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":FindCommandParser\" as fcp LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":FindStudentDescriptor\" as fcd LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":NameContainsKeywordsPredicate\" as namePredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":SchoolContainsKeywordsPredicate\" as schoolPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \"command:FindCommand\" as fc LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":CommandResult\" as res LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "logic -\u003e rp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "create fcp"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "rp -\u003e fcp"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "rp -\u003e fcp ++: parse(args)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "create fcd"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fcp -\u003e fcd"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "opt If finding by name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    create namePredicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    fcp -\u003e namePredicate: nameKeywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    fcp -\u003e fcd: setNamePredicate(NameContainsKeywordsPredicate)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    end"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "opt If finding by school"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    create schoolPredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    fcp -\u003e schoolPredicate: schoolKeywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    fcp -\u003e fcd: setSchoolPredicate(SchoolContainsKeywordsPredicate)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    end"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fcp -\u003e fcd: isAnyPredicatePresent()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "create fc"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fcp -\u003e fc ++: findStudentDescriptor"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "logic -\u003e fc ++: execute(model)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fc -\u003e fcd++: getPredicates()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fcd -\u003e fcd: getNamePredicate()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fcd -\u003e fcd: getSchoolPredicate()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fcd -\u003e fcd: getYearPredicate()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return predicates"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "box \"Model\" #Green"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Participant \":Model\" as model #77dd77"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fc -\u003e model++: updateFilteredPersonList(consolidatedPredicates)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fc -\u003e model: getFilteredPersonList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "create res"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fc -\u003e res ++"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return commandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return commandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "end box"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "csiongn": 67
    }
  },
  {
    "path": "docs/diagrams/OverdueActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":User executes overdue command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":Parse the command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":Filter list of students by those who have not paid their fees in the past month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":Display filtered list;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "stop"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 8
    }
  },
  {
    "path": "docs/diagrams/OverdueSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":ReeveParser\" as ReeveParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"o:OverdueCommand\" as Command LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[-\u003e LogicManager : execute(\"overdue\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e ReeveParser : parseCommand(\"overdue\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate ReeveParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser -\u003e Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Command --\u003e ReeveParser : o"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser --\u003e LogicManager : o"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate ReeveParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e Command : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Command -\u003e Model : updateFilteredStudentList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Model --\u003e Command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Command --\u003e LogicManager : result"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Command -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy Command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 47
    }
  },
  {
    "path": "docs/diagrams/ScheduleActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "(*) --\u003e \"user calls schedule command with date\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\"user calls schedule command with date\" --\u003e \"Parses date\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\"Parses date\" --\u003e \"get the dayOfWeek\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\"get the dayOfWeek\" --\u003e \"creates a Predicate\u003cStudent\u003e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\"creates a Predicate\u003cStudent\u003e\" --\u003e \"filter student list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\"filter student list\" --\u003e \"display result\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\"display result\" --\u003e (*)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 9
    }
  },
  {
    "path": "docs/diagrams/SolveQuestionActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":User executes solve question command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ":Parses the command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "if () then ([command is valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    :SolveQuestionCommand is executed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if () then ([student exists])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            if () then ([question does not exist])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Display invalid question error message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Create student copy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Create solved version of question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Set the student copy\u0027s question to the solved version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Replace student with modified copy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                :Display success message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            :Display invalid student error message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "else ([command is invalid - missing or invalid arguments])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    :Display parse error message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 24
    }
  },
  {
    "path": "docs/diagrams/SolveQuestionSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":ReeveParser\" as ReeveParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":QuestionCommandParser\" as QuestionCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"s:SolveQuestionCommand\" as SolveQuestionCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"q:SolvedQuestion\" as Question MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "participant \"student:Student\" as Student MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[-\u003e LogicManager : execute(\"question solve 1 i/1 s/solution\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e ReeveParser : parseCommand(\"question solve 1 i/1 s/solution\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate ReeveParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create QuestionCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser -\u003e QuestionCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate QuestionCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser --\u003e ReeveParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate QuestionCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser -\u003e QuestionCommandParser : parse(\"solve 1 i/1 s/solution\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate QuestionCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create SolveQuestionCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser -\u003e SolveQuestionCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate SolveQuestionCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "SolveQuestionCommand --\u003e QuestionCommandParser : s"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate SolveQuestionCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser --\u003e ReeveParser : s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate QuestionCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "QuestionCommandParser -[hidden]-\u003e ReeveParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy QuestionCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "ReeveParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate ReeveParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "LogicManager -\u003e SolveQuestionCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate SolveQuestionCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "SolveQuestionCommand -\u003e Model : getStudent(1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Model --\u003e SolveQuestionCommand : student"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "create Question"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "SolveQuestionCommand -\u003e Question"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Question"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Question --\u003e SolveQuestionCommand : q"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Question"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "SolveQuestionCommand -\u003e Student : setQuestion(q)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Student"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Student --\u003e SolveQuestionCommand : copy"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Student"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "SolveQuestionCommand -\u003e Model : setStudent(student, copy)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Model --\u003e SolveQuestionCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Student -[hidden]-\u003e Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy Student"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "SolveQuestionCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate SolveQuestionCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "SolveQuestionCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "destroy SolveQuestionCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 88
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "ecp -\u003e ec ++: index, editStudentDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "hogantan": 1
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "title: Reeve"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W15-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W15-2/tp)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W15-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W15-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "**Reeve** is a desktop application for **private tutors to better manage both administrative and academic details of their students**, optimised for use via a **Command Line Interface (CLI)** for receiving inputs while still having the benefits of a **Graphical User Interface (GUI)** for displaying information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* Interested in using Reeve? Head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* Interested in developing Reeve? The [**Developer Guide**](DeveloperGuide.html) is a good place to start!"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "-": 13,
      "hogantan": 6
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Changes the remark of an existing student in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the student identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"by the index number used in the last student listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param index of the student in the filtered student list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param remark of the student to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of student data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the student’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a student."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "Create a new `Remark` in `seedu.address.model.student`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each student."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public PersonCard(Person student, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    remark.setText(student.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Person studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Person editedStudent \u003d new Person(studentToEdit.getName(), studentToEdit.getPhone(), studentToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                studentToEdit.getAddress(), remark, studentToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * {@code studentToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String generateSuccessMessage(Person studentToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return String.format(message, studentToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 2,
      "-": 376,
      "hogantan": 16
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.student.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cLabel fx:id\u003d\"meetingLink\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$meetingLink\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \"meetingLink\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 1,
      "-": 99,
      "hogantan": 3
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hogantan"
        },
        "content": "       Person studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "       Person editedStudent \u003d createEditedPerson(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hogantan"
        },
        "content": "       if (!studentToEdit.isSamePerson(editedStudent) \u0026\u0026 model.hasPerson(editedStudent)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hogantan"
        },
        "content": "       model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hogantan"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hogantan"
        },
        "content": "       students.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 244,
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.storage.JsonReeveStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.ReeveStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Reeve ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ReeveStorage reeveStorage \u003d new JsonReeveStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage \u003d new StorageManager(reeveStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Optional\u003cReadOnlyReeve\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ReadOnlyReeve initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            initialData \u003d new Reeve();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            initialData \u003d new Reeve();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        logger.info(\"Starting Reeve \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Reeve ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 172,
      "hogantan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String MESSAGE_STUDENTS_SORTED \u003d \"Students sorted by %s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "csiongn": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   Ignores case and doesn\u0027t require a full word match."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *       containsIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *       containsIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *       containsIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static boolean containsIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (wordsInPreppedSentence.length \u003d\u003d 0 || preppedSentence.equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .anyMatch(sentenceWord -\u003e sentenceWord.contains(preppedWord));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "csiongn": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @see seedu.address.model.Model#getReeve()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    ReadOnlyReeve getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /** Returns an unmodifiable view of the sorted list of students */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    ObservableList\u003cStudent\u003e getSortedStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "csiongn": 2,
      "hogantan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ReeveParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReeveParser reeveParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        reeveParser \u003d new ReeveParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d reeveParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            storage.saveAddressBook(model.getReeve());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ReadOnlyReeve getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return model.getReeve();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return model.getSortedStudentList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public ObservableList\u003cStudent\u003e getSortedStudentList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return model.getSortedStudentList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "csiongn": 4,
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_FEEDBACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class AddAttendanceCommand extends AttendanceCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AttendanceCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \": adds an Attendance to the student identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"by the index number used in the displayed student list. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"Parameters: STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_DATE + \"LESSON_DATE \" + PREFIX_ATTENDANCE_STATUS + \"ATTENDANCE_STATUS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_FEEDBACK + \"FEEDBACK\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"Example: \" + AttendanceCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_DATE + \"14/02/2020 \" + PREFIX_ATTENDANCE_STATUS + \"present \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_FEEDBACK + \"attentive\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance added for %s: %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_INVALID_ATTENDANCE_DATE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            \"There is already an existing attendance for the entered date! Please use another date, or delete the \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"existing attendance before adding a new one.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Add Attendance Log\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Attendance attendanceToAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Creates an AddAdditionalDetailCommand to add the specified {@code AdditionalDetail} to the student"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * at the specified {@code Index}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public AddAttendanceCommand(Index index, Attendance attendanceToAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(index, attendanceToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.attendanceToAdd \u003d attendanceToAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid student index input error\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student studentToAddAttendance \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e(studentToAddAttendance.getAttendance());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.updateAttendanceList(attendanceList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student updatedStudent \u003d super.updateStudentAttendance(studentToAddAttendance, attendanceList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(studentToAddAttendance, updatedStudent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedStudent.getName(), attendanceToAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private List\u003cAttendance\u003e updateAttendanceList(List\u003cAttendance\u003e attendanceList) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        boolean containsAttendanceAtDate \u003d attendanceList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .anyMatch(attendance -\u003e attendance.getLessonDate().equals(attendanceToAdd.getLessonDate()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (containsAttendanceAtDate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ATTENDANCE_DATE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        attendanceList.add(attendanceToAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!(obj instanceof AddAttendanceCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddAttendanceCommand other \u003d (AddAttendanceCommand) obj;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return index.equals(other.index) \u0026\u0026 attendanceToAdd.equals(other.attendanceToAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to Reeve.\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SCHOOL + \"SCHOOL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_VENUE + \"CLASS_VENUE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_TIME + \"CLASS_TIME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"[\" + PREFIX_FEE + \"FEE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"[\" + PREFIX_PAYMENT + \"LAST_PAYMENT_DATE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"[\" + PREFIX_DETAILS + \"ADDITIONAL_DETAILS]\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCHOOL + \"Woodlands Secondary School \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_YEAR + \"Secondary 2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_VENUE + \"347 Woodlands Ave 3, Singapore 730347 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_TIME + \"1 1200-1400 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_FEE + \"30 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_PAYMENT + \"24/09/2020 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_DETAILS + \"Additional details here \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added:\\n%1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in Reeve\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 4,
      "-": 47,
      "hogantan": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDetailCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class AddDetailCommand extends DetailCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d DetailCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \": adds an Additional Detail to the student identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"by the index number used in the displayed student list. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"Parameters: STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_TEXT + \"DETAIL\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"Example: \" + DetailCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_TEXT + \"Eats sweets in class\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New detail added to %s: %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Add Additional Detail Log\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final Detail detailToAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Creates an AddAdditionalDetailCommand to add the specified {@code AdditionalDetail} to the student"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * at the specified {@code Index}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public AddDetailCommand(Index index, Detail detailToAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(index, detailToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.detailToAdd \u003d detailToAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assert(index !\u003d null \u0026\u0026 detailToAdd !\u003d null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid student index input error\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student studentToAddDetail \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cDetail\u003e details \u003d new ArrayList\u003c\u003e(studentToAddDetail.getDetails());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        details.add(detailToAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student updatedStudent \u003d super.updateStudentDetail(studentToAddDetail, details);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(studentToAddDetail, updatedStudent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedStudent.getName(), detailToAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!(obj instanceof AddDetailCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        AddDetailCommand other \u003d (AddDetailCommand) obj;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return index.equals(other.index) \u0026\u0026 detailToAdd.equals(other.detailToAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 77,
      "StopTakingAllTheNames": 12,
      "csiongn": 1,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExamCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Adds an exam to a student."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class AddExamCommand extends ExamCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExamCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \": Adds an exam to a student.\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_NAME + \"EXAM_NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + \"EXAM_DATE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + \"SCORE \\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + ExamCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_NAME"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \" End of Year Examination 2020 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + \"7/11/2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + \"50/100 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_EXAM_ADDED_SUCCESS \u003d \"New exam added to %1$s: %2$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXAM \u003d \"%1$s already exists under %2$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_EXAM_INVALID_NAME \u003d \"Exam names should be should only contain \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_EXAM_INVALID_DATE \u003d \"Exam dates should be in the form dd/mm/yy, \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"and should not be blank\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Exam toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Creates an AddExamCommand to add the specified {@code Exam} to a specified student based on index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public AddExamCommand(Index index, Exam exam) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireAllNonNull(index, exam);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        toAdd \u003d exam;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student selectedStudent \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (selectedStudent.getExams().contains(toAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_EXAM,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    toAdd.getName(), selectedStudent.getName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e(selectedStudent.getExams());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        exams.add(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student updatedStudent \u003d new Student(selectedStudent.getName(), selectedStudent.getPhone(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                selectedStudent.getSchool(), selectedStudent.getYear(), selectedStudent.getAdmin(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                selectedStudent.getQuestions(), exams, selectedStudent.getAcademic());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(selectedStudent, updatedStudent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXAM_ADDED_SUCCESS, updatedStudent.getName(), toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!(obj instanceof AddExamCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddExamCommand other \u003d (AddExamCommand) obj;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return index.equals(other.index) \u0026\u0026 toAdd.equals(other.toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 1,
      "csiongn": 1,
      "hogantan": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds an unresolved question to a student at the displayed index in Reeve."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddQuestionCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added to student %1$s: %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_QUESTION \u003d \"This student has already asked this question\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Add Question Log\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final UnsolvedQuestion questionToAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddQuestionCommand to add the specified {@code Question} to the student"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * at the specified {@code Index}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public AddQuestionCommand(Index index, UnsolvedQuestion questionToAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, questionToAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.questionToAdd \u003d questionToAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assert (index !\u003d null) \u0026\u0026 (questionToAdd !\u003d null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            logger.log(Level.WARNING, \"Handling non-existent student error\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Student asker \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (asker.containsQuestion(questionToAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            logger.log(Level.WARNING, \"Handling duplicate question error\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student replacement \u003d asker.addQuestion(questionToAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, replacement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, replacement.getName(), questionToAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof AddQuestionCommand)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddQuestionCommand other \u003d (AddQuestionCommand) obj;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(other.index) \u0026\u0026 questionToAdd.equals(other.questionToAdd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "StopTakingAllTheNames": 16,
      "-": 61,
      "csiongn": 1,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public abstract class AttendanceCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attendance\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds or deletes an Attendance from a student in \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "             + \" Reeve. \\n\" + \"SUPPORTED COMMANDS: add, delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Creates a new Student, with the provided attendance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param studentToAddAttendance student to add attendance to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param attendanceList new list of additional attendanceList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return updated Student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Student updateStudentAttendance(Student studentToAddAttendance, List\u003cAttendance\u003e attendanceList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic academicToAddAttendance \u003d studentToAddAttendance.getAcademic();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic updatedAcademic \u003d new Academic(attendanceList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student updatedStudent \u003d new Student(studentToAddAttendance.getName(), studentToAddAttendance.getPhone(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                studentToAddAttendance.getSchool(), studentToAddAttendance.getYear(), studentToAddAttendance.getAdmin(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                studentToAddAttendance.getQuestions(), studentToAddAttendance.getExams(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                updatedAcademic);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return updatedStudent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setReeve(new Reeve());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 2,
      "-": 21,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /** The application should toggle between admin and academic student cards. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final boolean toggleStudentCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean toggleStudentCard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.toggleStudentCard \u003d toggleStudentCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean isToggleStudentCard() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return toggleStudentCard;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 toggleStudentCard \u003d\u003d otherCommandResult.toggleStudentCard;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, toggleStudentCard);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return this.feedbackToUser;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 4,
      "-": 67,
      "hogantan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class DeleteAttendanceCommand extends AttendanceCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AttendanceCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \": deletes an Attendance from the student identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"by the date of the lesson. \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"Parameters: STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_DATE + \"LESSON_DATE\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"Example: \" + AttendanceCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_DATE + \"14/02/2020\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Attendance deleted for %s for the date of %s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_INVALID_ATTENDANCE_DATE \u003d \"There is no existing attendance for the entered date\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Delete Attendance Log\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final LocalDate attendanceDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Creates an EditAdditionalDetailCommand to add the specified {@code AdditionalDetail} to the student"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * at the specified {@code Index}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public DeleteAttendanceCommand(Index index, LocalDate attendanceDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(index, attendanceDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.attendanceDate \u003d attendanceDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid student index input error\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student studentToDeleteAttendance \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e(studentToDeleteAttendance.getAttendance());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cAttendance\u003e updatedAttendanceList \u003d this.updateAttendanceList(attendanceList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student updatedStudent \u003d super.updateStudentAttendance(studentToDeleteAttendance, updatedAttendanceList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(studentToDeleteAttendance, updatedStudent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedStudent.getName(), getUserInputDateString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private List\u003cAttendance\u003e updateAttendanceList(List\u003cAttendance\u003e attendanceList) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        boolean containsAttendanceAtDate \u003d attendanceList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .anyMatch(attendance -\u003e attendance.getLessonDate().equals(attendanceDate));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!containsAttendanceAtDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ATTENDANCE_DATE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Stream\u003cAttendance\u003e matchingAttendance \u003d attendanceList.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .filter(attendance -\u003e attendance.getLessonDate().equals(attendanceDate));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Attendance attendanceToDelete \u003d matchingAttendance.findFirst().get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        attendanceList.remove(attendanceToDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private String getUserInputDateString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return attendanceDate.format(formatter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!(obj instanceof DeleteAttendanceCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand other \u003d (DeleteAttendanceCommand) obj;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return index.equals(other.index) \u0026\u0026 attendanceDate.equals(other.attendanceDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from Reeve."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 5,
      "-": 44,
      "csiongn": 1,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteDetailCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class DeleteDetailCommand extends DetailCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d DetailCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \": deletes an Additional Detail in the student identified\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \" by the index number used in the displayed student list. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"Parameters: STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_INDEX + \"DETAIL_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"Example: \" + DetailCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Detail removed from %s: %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_BAD_DETAIL_INDEX \u003d \"There is no detail at this index\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Delete Additional Detail Log\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Index detailIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a DeleteQuestionCommand to remove a specified {@code Question} from a {@code Student}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param studentIndex"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param detailIndex"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public DeleteDetailCommand(Index studentIndex, Index detailIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(studentIndex, detailIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.detailIndex \u003d detailIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assert(studentIndex !\u003d null \u0026\u0026 detailIndex !\u003d null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid student index input error\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student studentToAddDetail \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (detailIndex.getZeroBased() \u003e\u003d studentToAddDetail.getDetails().size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid detail index input error\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(MESSAGE_BAD_DETAIL_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cDetail\u003e details \u003d new ArrayList\u003c\u003e(studentToAddDetail.getDetails());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Detail removedDetail \u003d details.remove(detailIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student updatedStudent \u003d super.updateStudentDetail(studentToAddDetail, details);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(studentToAddDetail, updatedStudent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedStudent.getName(), removedDetail));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!(obj instanceof DeleteDetailCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        DeleteDetailCommand other \u003d (DeleteDetailCommand) obj;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return studentIndex.equals(other.studentIndex) \u0026\u0026 detailIndex.equals(other.detailIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 83,
      "StopTakingAllTheNames": 12,
      "csiongn": 1,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExamCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Deletes an exam from a student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeleteExamCommand extends ExamCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExamCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \": Deletes an exam from a student.\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_INDEX"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"EXAM_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + ExamCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_INDEX"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_EXAM_DELETED_SUCCESS \u003d \"Exam deleted from %1$s: %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_MISSING_EXAM_INDEX \u003d \"There is no exam at this index\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Index examIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Creates an AddExamCommand to delete the specified {@code Exam} of a specified student based on index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DeleteExamCommand(Index studentIndex, Index examIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireAllNonNull(studentIndex, examIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.examIndex \u003d examIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert(studentIndex !\u003d null \u0026\u0026 examIndex !\u003d null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student studentToDeleteExam \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (examIndex.getZeroBased() \u003e\u003d studentToDeleteExam.getExams().size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_EXAM_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e(studentToDeleteExam.getExams());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Exam removedExam \u003d exams.remove(examIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student updatedStudent \u003d super.updateStudentExam(studentToDeleteExam, exams);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(studentToDeleteExam, updatedStudent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXAM_DELETED_SUCCESS, updatedStudent.getName(), removedExam));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!(obj instanceof DeleteExamCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand other \u003d (DeleteExamCommand) obj;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return studentIndex.equals(other.studentIndex) \u0026\u0026 examIndex.equals(other.examIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 1,
      "hogantan": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a specified question of a student at the displayed index in Reeve."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteQuestionCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Question removed from %1$s: %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_BAD_QUESTION_INDEX \u003d \"There is no question at this index\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Delete Question Log\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index questionIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a DeleteQuestionCommand to remove a specified {@code Question} from a {@code Student}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteQuestionCommand(Index studentIndex, Index questionIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(studentIndex, questionIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assert (studentIndex !\u003d null) \u0026\u0026 (questionIndex !\u003d null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            logger.log(Level.WARNING, \"Handling non-existent student error\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Student asker \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (questionIndex.getZeroBased() \u003e\u003d asker.getQuestions().size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            logger.log(Level.WARNING, \"Handling non-existent question error\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_BAD_QUESTION_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question deleted \u003d asker.getQuestions().get(questionIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student replacement \u003d asker.deleteQuestion(deleted);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, replacement);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, replacement.getName(), deleted));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof DeleteQuestionCommand)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand other \u003d (DeleteQuestionCommand) obj;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentIndex.equals(other.studentIndex)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 questionIndex.equals(other.questionIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "StopTakingAllTheNames": 15,
      "-": 63,
      "csiongn": 1,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DetailCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public abstract class DetailCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"detail\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds, edits or deletes a Detail \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"from a student in Reeve. \\n\" + \"SUPPORTED COMMANDS: add, edit, delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Creates a new Student, with the provided additional detail."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param studentToAddDetail student to add detail to."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param details new list of additional details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return updated Student."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public Student updateStudentDetail(Student studentToAddDetail, List\u003cDetail\u003e details) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Admin adminToAddDetail \u003d studentToAddDetail.getAdmin();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Admin updatedAdmin \u003d new Admin(adminToAddDetail.getClassVenue(), adminToAddDetail.getClassTime(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                adminToAddDetail.getFee(), adminToAddDetail.getPaymentDate(), details);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student updatedStudent \u003d new Student(studentToAddDetail.getName(), studentToAddDetail.getPhone(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                studentToAddDetail.getSchool(), studentToAddDetail.getYear(), updatedAdmin,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                studentToAddDetail.getQuestions(), studentToAddDetail.getExams(), studentToAddDetail.getAcademic());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return updatedStudent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 28,
      "StopTakingAllTheNames": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Edits the details of an existing student in Reeve."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_SCHOOL + \"SCHOOL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"[\" + PREFIX_YEAR + \"YEAR]\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"[\" + PREFIX_VENUE + \"CLASS_VENUE]\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"CLASS_TIME]\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"[\" + PREFIX_FEE + \"FEE]\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"[\" + PREFIX_PAYMENT + \"PAYMENT_DATE]\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_VENUE + \"Anderson Junior College\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_TIME + \"2 1300-1400\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Student:\\n%1$s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in Reeve.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final EditAdminDescriptor editAdminDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param index of the student in the sorted student list to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param editAdminDescriptor admin details to edit the student with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                       EditAdminDescriptor editAdminDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.editAdminDescriptor \u003d new EditAdminDescriptor(editAdminDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studenttoEdit}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * edited with {@code editStudentDescriptor} and {@code editAdminDescriptor}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                               EditAdminDescriptor editAdminDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        School updatedSchool \u003d editStudentDescriptor.getSchool().orElse(studentToEdit.getSchool());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Year updatedYear \u003d editStudentDescriptor.getYear().orElse(studentToEdit.getYear());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Admin updatedAdmin;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (editAdminDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            ClassTime updatedClassTime \u003d editAdminDescriptor.getClassTime()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    .orElse(studentToEdit.getAdmin().getClassTime());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            ClassVenue updatedClassVenue \u003d editAdminDescriptor.getClassVenue()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    .orElse(studentToEdit.getAdmin().getClassVenue());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            Fee updatedFee \u003d editAdminDescriptor.getFee()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    .orElse(studentToEdit.getAdmin().getFee());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            PaymentDate updatedPaymentDate \u003d editAdminDescriptor.getPaymentDate()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    .orElse(studentToEdit.getAdmin().getPaymentDate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            // Additional Details cannot be edited through this channel"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            updatedAdmin \u003d new Admin(updatedClassVenue, updatedClassTime, updatedFee, updatedPaymentDate,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    studentToEdit.getAdmin().getDetails());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            updatedAdmin \u003d studentToEdit.getAdmin();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Questions should not be edited through this command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d studentToEdit.getQuestions();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // Exams should not be edited through this command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cExam\u003e exams \u003d studentToEdit.getExams();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Academic should not be edited through this command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic academic \u003d studentToEdit.getAcademic();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new Student(updatedName, updatedPhone, updatedSchool, updatedYear, updatedAdmin, questions, exams,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                academic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        private School school;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        private Year year;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            setSchool(toCopy.school);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            setYear(toCopy.year);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, school, year);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        public void setSchool(School school) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            this.school \u003d school;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        public Optional\u003cSchool\u003e getSchool() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return Optional.ofNullable(school);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        public void setYear(Year year) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            this.year \u003d year;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        public Optional\u003cYear\u003e getYear() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return Optional.ofNullable(year);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    \u0026\u0026 getSchool().equals(e.getSchool())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    \u0026\u0026 getYear().equals(e.getYear());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static class EditAdminDescriptor {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        private ClassTime time;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        private ClassVenue venue;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        private Fee fee;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        private PaymentDate paymentDate;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public EditAdminDescriptor() {}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "         * A defensive copy of {@code details} is used internally."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public EditAdminDescriptor(EditAdminDescriptor toCopy) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            setFee(toCopy.fee);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            setPaymentDate(toCopy.paymentDate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return CollectionUtil.isAnyNonNull(time, venue, fee, paymentDate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public void setTime(ClassTime time) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public Optional\u003cClassTime\u003e getClassTime() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public void setVenue(ClassVenue venue) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public Optional\u003cClassVenue\u003e getClassVenue() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public void setFee(Fee fee) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            this.fee \u003d fee;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public Optional\u003cFee\u003e getFee() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return Optional.ofNullable(fee);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public void setPaymentDate(PaymentDate paymentDate) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            this.paymentDate \u003d paymentDate;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        public Optional\u003cPaymentDate\u003e getPaymentDate() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return Optional.ofNullable(paymentDate);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            if (!(other instanceof EditAdminDescriptor)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            EditAdminDescriptor e \u003d (EditAdminDescriptor) other;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return getClassVenue().equals(e.getClassVenue())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    \u0026\u0026 getClassTime().equals(e.getClassTime())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    \u0026\u0026 getFee().equals(e.getFee())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    \u0026\u0026 getPaymentDate().equals(e.getPaymentDate());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 20,
      "VaishakAnand": 106,
      "StopTakingAllTheNames": 5,
      "-": 168,
      "csiongn": 9,
      "hogantan": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditDetailCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class EditDetailCommand extends DetailCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d DetailCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \": edits an Additional Detail in the student identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"by the index number used in the displayed student list. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + \"Parameters: STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_INDEX + \"DETAIL_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_TEXT + \"DETAIL\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"Example: \" + DetailCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_TEXT + \"Eats sweets in class\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Detail edited for %s: %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_BAD_DETAIL_INDEX \u003d \"There is no detail at this index\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Edit Additional Detail Log\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Index detailIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final Detail detailToAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a DeleteQuestionCommand to remove a specified {@code Question} from a {@code Student}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param studentIndex"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param detailIndex"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param detailToAdd"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public EditDetailCommand(Index studentIndex, Index detailIndex, Detail detailToAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(studentIndex, detailIndex, detailToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.detailIndex \u003d detailIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.detailToAdd \u003d detailToAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assert(studentIndex !\u003d null \u0026\u0026 detailIndex !\u003d null \u0026\u0026 detailToAdd !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid student index input error\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student studentToAddDetail \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (detailIndex.getZeroBased() \u003e\u003d studentToAddDetail.getDetails().size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            logger.log(Level.WARNING, \"Invalid detail index input error\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new CommandException(MESSAGE_BAD_DETAIL_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cDetail\u003e details \u003d new ArrayList\u003c\u003e(studentToAddDetail.getDetails());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        details.set(detailIndex.getZeroBased(), detailToAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student updatedStudent \u003d super.updateStudentDetail(studentToAddDetail, details);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(studentToAddDetail, updatedStudent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedStudent.getName(), detailToAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!(obj instanceof EditDetailCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        EditDetailCommand other \u003d (EditDetailCommand) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return studentIndex.equals(other.studentIndex) \u0026\u0026 detailIndex.equals(other.detailIndex)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 detailToAdd.equals(other.detailToAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 88,
      "StopTakingAllTheNames": 15,
      "csiongn": 1,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExamCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Abstract class of exam commands such as AddExam and DeleteExam."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public abstract class ExamCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exam\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds or deletes an Exam \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"to/from a student in Reeve.\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"To add an exam (adds an exam to the first student in the list):\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + ExamCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \" add\" + \" 1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_NAME"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \" End of Year Examination 2020 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + \"7/11/2020 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + \"50/100 \\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \"To delete an exam (deletes the first exam of the second student in the list):\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + ExamCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + \" delete\" + \" 2 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_INDEX + \"1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Updates a specific students exam list when an exam is being added or deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param studentToUpdate selected student to be be updated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param exams the updated array list of exams."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return selected student with the updated exams."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Student updateStudentExam(Student studentToUpdate, ArrayList\u003cExam\u003e exams) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Student(studentToUpdate.getName(), studentToUpdate.getPhone(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                studentToUpdate.getSchool(), studentToUpdate.getYear(), studentToUpdate.getAdmin(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                studentToUpdate.getQuestions(), exams, studentToUpdate.getAcademic());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 1,
      "hogantan": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.YearMatchPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Finds and lists all persons in Reeve by a certain criteria."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Given a non-empty list of filter criteria, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"finds all persons whose fields match or contain keywords (if applicable, case-insensitive) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"of each of the filter criteria and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"Parameters: [n/NAME] [s/SCHOOL] [y/YEAR]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Alex david s/yishun\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String FIELD_NOT_GIVEN \u003d \"At least one field to search by must be provided.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final FindStudentDescriptor findStudentDescriptor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param findStudentDescriptor Details we use to filter Reeve with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindCommand(FindStudentDescriptor findStudentDescriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(findStudentDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.findStudentDescriptor \u003d findStudentDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cPredicate\u003cStudent\u003e\u003e predicates \u003d findStudentDescriptor.getPredicates();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert predicates.size() \u003e 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Predicate\u003cStudent\u003e consolidatedPredicate \u003d student -\u003e true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        for (Predicate \u003cStudent\u003e currentPredicate : predicates) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            consolidatedPredicate \u003d consolidatedPredicate.and(currentPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(consolidatedPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getSortedStudentList().size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \u0026\u0026 findStudentDescriptor.equals(((FindCommand) other).findStudentDescriptor)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Stores the details to find students with. Each non-empty field will be used to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * filter the list of students in Reeve."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static class FindStudentDescriptor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        private NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        private SchoolContainsKeywordsPredicate schoolPredicate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        private YearMatchPredicate yearPredicate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public FindStudentDescriptor() {}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public FindStudentDescriptor(FindCommand.FindStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            setNamePredicate(toCopy.namePredicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            setSchoolPredicate(toCopy.schoolPredicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            setYearPredicate(toCopy.yearPredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         * Returns true if at least one predicate is present."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public boolean isAnyPredicatePresent() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return CollectionUtil.isAnyNonNull(namePredicate, schoolPredicate, yearPredicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         * Returns list of available predicates"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public List\u003cPredicate\u003cStudent\u003e\u003e getPredicates() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assert isAnyPredicatePresent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            List\u003cPredicate\u003cStudent\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            getNamePredicate().ifPresent(predicates::add);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            getSchoolPredicate().ifPresent(predicates::add);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            getYearPredicate().ifPresent(predicates::add);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return predicates;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public Optional\u003cNameContainsKeywordsPredicate\u003e getNamePredicate() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return Optional.ofNullable(namePredicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public void setNamePredicate(NameContainsKeywordsPredicate namePredicate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public Optional\u003cSchoolContainsKeywordsPredicate\u003e getSchoolPredicate() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return Optional.ofNullable(schoolPredicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public void setSchoolPredicate(SchoolContainsKeywordsPredicate schoolPredicate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.schoolPredicate \u003d schoolPredicate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public Optional\u003cYearMatchPredicate\u003e getYearPredicate() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return Optional.ofNullable(yearPredicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public void setYearPredicate(YearMatchPredicate yearPredicate) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.yearPredicate \u003d yearPredicate;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (!(other instanceof FindCommand.FindStudentDescriptor)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            FindCommand.FindStudentDescriptor e \u003d (FindCommand.FindStudentDescriptor) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return getNamePredicate().equals(e.getNamePredicate())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    \u0026\u0026 getSchoolPredicate().equals(e.getSchoolPredicate())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    \u0026\u0026 getYearPredicate().equals(e.getYearPredicate());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "csiongn": 119,
      "hogantan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.model.Model.COMPARATOR_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all students in Reeve to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        model.updateSortedStudentList(COMPARATOR_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "csiongn": 3,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OverdueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.OverdueFeePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Finds and lists all students who have not paid their fees in more than a month."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class OverdueCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"overdue\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(new OverdueFeePredicate());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                model.getSortedStudentList().size()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 2,
      "StopTakingAllTheNames": 19,
      "csiongn": 1,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/QuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class QuestionCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds, resolves or deletes a question \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"from a student in Reeve. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Supported actions: \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"add INDEX \" + PREFIX_TEXT + \"QUESTION: adds an unresolved question.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" add 1 \" + PREFIX_TEXT + \"How do birds fly\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"solve INDEX \" + PREFIX_INDEX + \"QUESTION_INDEX \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_TEXT + \"SOLUTION: marks a question as solved.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" solve 1 \" + PREFIX_INDEX + \" 1 \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + PREFIX_TEXT + \"Read your textbook.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"delete INDEX \" + PREFIX_INDEX + \"QUESTION_INDEX: deletes a question.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" delete 2 \" + PREFIX_INDEX + \" 1 \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 10,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.ClassTimeComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * Finds and list all students with classes on a given date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * This is also the schedule of the user on that particular date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Given a date in the format of dd/mm/yy \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            + \"outputs all classes together with the respective student on the date\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            + \"Parameters: DATE \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 27/10/20\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String INCORRECT_DATE_FORMAT \u003d \"Date should be in the format dd/mm/yyyy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String EMPTY_DATE_MESSAGE \u003d \"Please input a date\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final LocalDate dateToFindSchedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public ScheduleCommand(LocalDate dateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.dateToFindSchedule \u003d dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // this date is given by the user, we extract out the day"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        DayOfWeek day \u003d this.dateToFindSchedule.getDayOfWeek();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assert day !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // checks which student has the same day as the one given extracted out"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Predicate\u003cStudent\u003e predicate \u003d student -\u003e student.getAdmin().getClassTime().isSameDay(day);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // updates the list that is currently showed in the ui"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        model.updateSortedStudentList(new ClassTimeComparator());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getSortedStudentList().size()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                || (other instanceof ScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                \u0026\u0026 dateToFindSchedule.equals(((ScheduleCommand) other).dateToFindSchedule)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 61,
      "csiongn": 1,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SolveQuestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Resolves a specified question of a student at the displayed index in Reeve."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SolveQuestionCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s\u0027s question resolved: %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SOLVED_QUESTION \u003d \"This question was already solved\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_BAD_QUESTION_INDEX \u003d \"There is no question at this index\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"solve\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"Solve Question Log\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index questionIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final String solution;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a SolveQuestionCommand to mark a specified {@code Question} as solved."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public SolveQuestionCommand(Index studentIndex, Index questionIndex, String solution) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireAllNonNull(studentIndex, questionIndex, solution);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.solution \u003d solution;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assert (studentIndex !\u003d null) \u0026\u0026 (questionIndex !\u003d null) \u0026\u0026 (solution !\u003d null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        logger.log(Level.INFO, \"Beginning command execution\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getSortedStudentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            logger.log(Level.WARNING, \"Handling non-existent student error\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Student asker \u003d lastShownList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        checkQuestionIndex(asker);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question target \u003d asker.getQuestions().get(questionIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question solved \u003d new SolvedQuestion(target.question, solution);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student replacement \u003d asker.setQuestion(target, solved);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, replacement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        logger.log(Level.INFO, \"Execution complete\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, replacement.getName(), solved));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Checks if the question at the specified index exists or has already been solved."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private void checkQuestionIndex(Student asker) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (questionIndex.getZeroBased() \u003e\u003d asker.getQuestions().size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            logger.log(Level.WARNING, \"Handling non-existent question error\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new CommandException(MESSAGE_BAD_QUESTION_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (asker.getQuestions().get(questionIndex.getZeroBased()).isResolved()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            logger.log(Level.WARNING, \"Handling solved question error\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new CommandException(MESSAGE_SOLVED_QUESTION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof SolveQuestionCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        SolveQuestionCommand other \u003d (SolveQuestionCommand) obj;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return studentIndex.equals(other.studentIndex)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                \u0026\u0026 questionIndex.equals(other.questionIndex)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                \u0026\u0026 solution.equals(other.solution);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "StopTakingAllTheNames": 35,
      "-": 60,
      "csiongn": 1,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.NameComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.YearComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.admin.ClassTimeComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the list of students in Reeve by a given\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \" sorting method.\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"Supported sorting methods: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"name: Sorts students by their name (case insensitive)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"classTime: Sorts students by the day followed by time of their class\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"year: Sorts students by the year they are in school, with Primary 1 coming first\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \" and JC 2 coming last.\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + COMMAND_WORD + \" \" + \"year\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String[] SUPPORTED_COMPARISON_MEANS \u003d new String[] {\"name\", \"classTime\", \"year\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String comparisonMeans;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param comparisonMeans Means that we use to sort students in reeve"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public SortCommand(String comparisonMeans) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(comparisonMeans);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.comparisonMeans \u003d comparisonMeans;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static boolean isValidComparisonMeans(String means) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return Arrays.asList(SUPPORTED_COMPARISON_MEANS).contains(means);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        switch (comparisonMeans) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            model.updateSortedStudentList(new NameComparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"classTime\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            model.updateSortedStudentList(new ClassTimeComparator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"year\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            model.updateSortedStudentList(new YearComparator());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assert false; //shouldn\u0027t reach default branch"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new CommandException(\"Shouldn\u0027t be called\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_SORTED, comparisonMeans));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \u0026\u0026 comparisonMeans.equals(((SortCommand) other).comparisonMeans)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ToggleStudentCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToggleStudentCardCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"toggle\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_TOGGLE_SUCCESS \u003d \"Display has been toggled\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new CommandResult(MESSAGE_TOGGLE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ALL_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.COMPULSORY_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.model.student.admin.Fee.FREE_OF_CHARGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.model.student.admin.PaymentDate.TODAY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, ALL_PREFIXES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, COMPULSORY_PREFIXES)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        School school \u003d ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ClassVenue classVenue \u003d ParserUtil.parseClassVenue(argMultimap.getValue(PREFIX_VENUE).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ClassTime classTime \u003d ParserUtil.parseClassTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Fee fee \u003d ParserUtil.parseFee(argMultimap.getValue(PREFIX_FEE).orElse(FREE_OF_CHARGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        PaymentDate paymentDate \u003d ParserUtil.parsePaymentDate(argMultimap.getValue(PREFIX_PAYMENT).orElse(TODAY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cDetail\u003e detailList \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                ParserUtil.parseDetails(argMultimap.getAllValues(PREFIX_DETAILS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Admin admin \u003d new Admin(classVenue, classTime, fee, paymentDate, detailList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic academic \u003d new Academic(attendanceList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student student \u003d new Student(name, phone, school, year, admin, questions, exams, academic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new AddCommand(student);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 2,
      "VaishakAnand": 8,
      "StopTakingAllTheNames": 14,
      "-": 49,
      "hogantan": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ATTENDANCE_COMMAND_PREFIXES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_FEEDBACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class AttendanceCommandParser implements Parser\u003cAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public AttendanceCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        case AddAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return parseAddAttendanceCommand(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        case DeleteAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return parseDeleteAttendanceCommand(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private AddAttendanceCommand parseAddAttendanceCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, ATTENDANCE_COMMAND_PREFIXES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!areRequiredPrefixesPresent(argMultimap, ATTENDANCE_COMMAND_PREFIXES)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    AddAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Attendance attendance;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            String attendanceDate \u003d ParserUtil.parseAttendanceDate(argMultimap.getValue(PREFIX_ATTENDANCE_DATE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            String attendanceStatus \u003d ParserUtil.parseAttendanceStatus("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    argMultimap.getValue(PREFIX_ATTENDANCE_STATUS).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            Feedback attendanceFeedback \u003d ParserUtil.parseFeedback("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    argMultimap.getValue(PREFIX_ATTENDANCE_FEEDBACK).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            attendance \u003d new Attendance(attendanceDate, attendanceStatus, attendanceFeedback);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    AddAttendanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new AddAttendanceCommand(index, attendance);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private DeleteAttendanceCommand parseDeleteAttendanceCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, ATTENDANCE_COMMAND_PREFIXES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!areRequiredPrefixesPresent(argMultimap, PREFIX_ATTENDANCE_DATE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalDate lessonDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            String attendanceDate \u003d ParserUtil.parseAttendanceDate(argMultimap.getValue(PREFIX_ATTENDANCE_DATE).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            lessonDate \u003d Attendance.parseDate(attendanceDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    DeleteAttendanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new DeleteAttendanceCommand(index, lessonDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private boolean areRequiredPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Prefix PREFIX_SCHOOL \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FEE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PAYMENT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DETAILS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /* Prefix for detail and question commands */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Prefix PREFIX_TEXT \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /* Prefix for exam commands */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Prefix PREFIX_EXAM_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Prefix PREFIX_EXAM_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Prefix PREFIX_SCORE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Prefix PREFIX_EXAM_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /* Prefix for attendance commands */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE_STATUS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE_FEEDBACK \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Prefix[] COMPULSORY_PREFIXES \u003d new Prefix[] {PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        PREFIX_SCHOOL, PREFIX_YEAR, PREFIX_VENUE, PREFIX_TIME};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Prefix[] ALL_PREFIXES \u003d new Prefix[] {PREFIX_NAME, PREFIX_PHONE, PREFIX_SCHOOL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        PREFIX_YEAR, PREFIX_VENUE, PREFIX_TIME, PREFIX_FEE, PREFIX_PAYMENT, PREFIX_DETAILS};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final Prefix[] FIND_SUPPORTED_PREFIXES \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            new Prefix[] {PREFIX_NAME, PREFIX_SCHOOL, PREFIX_YEAR};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Prefix[] COMMAND_PREFIXES \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            new Prefix[] {PREFIX_INDEX, PREFIX_TEXT};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Prefix[] EXAM_COMMAND_PREFIXES \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            new Prefix[] {PREFIX_EXAM_NAME, PREFIX_EXAM_DATE, PREFIX_SCORE};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final Prefix[] ATTENDANCE_COMMAND_PREFIXES \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            new Prefix[] {PREFIX_ATTENDANCE_DATE, PREFIX_ATTENDANCE_STATUS, PREFIX_ATTENDANCE_FEEDBACK};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 9,
      "StopTakingAllTheNames": 9,
      "-": 18,
      "csiongn": 3,
      "hogantan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DetailCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.DetailCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.COMMAND_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.ReeveParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.AddDetailCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.DeleteDetailCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.DetailCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.EditDetailCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class DetailCommandParser implements Parser\u003cDetailCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public DetailCommand parse(String userInput)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case AddDetailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return parseAddDetailCommand(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case DeleteDetailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return parseDeleteDetailCommand(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case EditDetailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return parseEditDetailCommand(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    //@@author VaishakAnand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private AddDetailCommand parseAddDetailCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TEXT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!areRequiredPrefixesPresent(argMultimap, PREFIX_TEXT)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    AddDetailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    AddDetailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d ParserUtil.parseDetail(argMultimap"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .getValue(PREFIX_TEXT).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new AddDetailCommand(index, detail);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private DeleteDetailCommand parseDeleteDetailCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!areRequiredPrefixesPresent(argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    DeleteDetailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index detailIndex;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            detailIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    DeleteDetailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new DeleteDetailCommand(studentIndex, detailIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private EditDetailCommand parseEditDetailCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                ArgumentTokenizer.tokenize(args, COMMAND_PREFIXES);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!areRequiredPrefixesPresent(argMultimap, COMMAND_PREFIXES)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    EditDetailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index detailIndex;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            detailIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    EditDetailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d ParserUtil.parseDetail(argMultimap"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .getValue(PREFIX_TEXT).get());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new EditDetailCommand(studentIndex, detailIndex, detail);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private boolean areRequiredPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 109,
      "StopTakingAllTheNames": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.ALL_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAdminDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                ArgumentTokenizer.tokenize(args, ALL_PREFIXES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d this.parseStudent(argMultimap);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d this.parseAdmin(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited() \u0026\u0026 !editAdminDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses given input student fields into discernible values."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param argMultimap Tokenized input by user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return EditStudentDescriptor with parsed values to edit."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private EditStudentDescriptor parseStudent(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            editStudentDescriptor.setSchool(ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            editStudentDescriptor.setYear(ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return editStudentDescriptor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses given input admin fields into discernible values."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param argMultimap Tokenized input by user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return EditAdminDescriptor with parsed values to edit."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private EditAdminDescriptor parseAdmin(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptor();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            editAdminDescriptor.setTime(ParserUtil.parseClassTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            editAdminDescriptor.setVenue(ParserUtil.parseClassVenue(argMultimap.getValue(PREFIX_VENUE).get()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FEE).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            editAdminDescriptor.setFee(ParserUtil.parseFee(argMultimap.getValue(PREFIX_FEE).get()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PAYMENT).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            editAdminDescriptor.setPaymentDate(ParserUtil.parsePaymentDate(argMultimap.getValue(PREFIX_PAYMENT).get()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return editAdminDescriptor;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "VaishakAnand": 43,
      "StopTakingAllTheNames": 5,
      "-": 52,
      "hogantan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExamCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.ExamCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.EXAM_COMMAND_PREFIXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.ReeveParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.AddExamCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.DeleteExamCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.ExamCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Parses input arguments and creates a new ExamCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class ExamCommandParser implements Parser\u003cExamCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String ERROR_ADD_EXAM \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String ERROR_DEL_EXAM \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //@@author hogantan"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExamCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * and returns an ExamCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ExamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case AddExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return parseAddExamCommand(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case DeleteExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return parseDelExamCommand(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddExamCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * and returns an AddExamCommand object for execution."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private AddExamCommand parseAddExamCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, EXAM_COMMAND_PREFIXES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, EXAM_COMMAND_PREFIXES)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(ERROR_ADD_EXAM);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(ERROR_ADD_EXAM, pe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String examName \u003d ParserUtil.parseExamName(argMultimap.getValue(PREFIX_EXAM_NAME).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String examDate \u003d ParserUtil.parseExamDate(argMultimap.getValue(PREFIX_EXAM_DATE).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Score score \u003d ParserUtil.parseScore(argMultimap.getValue(PREFIX_SCORE).get().trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Exam exam \u003d new Exam(examName, examDate, score);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new AddExamCommand(index, exam);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteExamCommand"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * and returns an DeleteExamCommand object for execution."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private DeleteExamCommand parseDelExamCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EXAM_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXAM_INDEX)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(ERROR_DEL_EXAM);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Index examIndex;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            examIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_EXAM_INDEX).get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(ERROR_DEL_EXAM, pe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new DeleteExamCommand(studentIndex, examIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 16,
      "hogantan": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.FIND_SUPPORTED_PREFIXES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.YearMatchPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                ArgumentTokenizer.tokenize(args, FIND_SUPPORTED_PREFIXES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (!anyPrefixesPresent(argMultimap, FIND_SUPPORTED_PREFIXES)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor findStudentDescriptor \u003d new FindCommand.FindStudentDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String[] nameKeywords \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            List\u003cString\u003e nameKeywordsList \u003d List.of(nameKeywords);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            findStudentDescriptor.setNamePredicate(new NameContainsKeywordsPredicate(nameKeywordsList));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SCHOOL).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String school \u003d argMultimap.getValue(PREFIX_SCHOOL).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String[] schoolKeywords \u003d school.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            List\u003cString\u003e schoolKeywordsList \u003d List.of(schoolKeywords);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            findStudentDescriptor.setSchoolPredicate(new SchoolContainsKeywordsPredicate(schoolKeywordsList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_YEAR).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String stringYear \u003d argMultimap.getValue(PREFIX_YEAR).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Year year \u003d ParserUtil.parseYear(stringYear);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            findStudentDescriptor.setYearPredicate(new YearMatchPredicate(year));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (!findStudentDescriptor.isAnyPredicatePresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new ParseException(FindCommand.FIELD_NOT_GIVEN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new FindCommand(findStudentDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns true if not all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 2,
      "-": 25,
      "csiongn": 47,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.AddExamCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Parses a {@code String school} into a {@code School}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static School parseSchool(String school) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String trimmedSchool \u003d school.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!School.isValidSchool(trimmedSchool)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new School(trimmedSchool);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        final Matcher matcher \u003d Year.YEAR_FORMAT.matcher(year.trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        boolean isMatched \u003d matcher.matches();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert isMatched;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String schoolTypeString \u003d matcher.group(\"school\").trim().toLowerCase();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String levelString \u003d matcher.group(\"level\").trim().toLowerCase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolType schoolType \u003d parseSchoolType(schoolTypeString);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Integer level \u003d Integer.parseInt(levelString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new Year(schoolType, level);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses a {@code String schoolType} into a {@code SchoolType}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws ParseException if the given {@code schoolType} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static SchoolType parseSchoolType(String schoolType) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(schoolType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String trimmed \u003d schoolType.trim().toLowerCase();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (!SchoolType.isValidSchoolType(trimmed)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new ParseException(SchoolType.SCHOOL_TYPE_CONSTRANTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        checkArgument(SchoolType.isValidSchoolType(trimmed), SchoolType.SCHOOL_TYPE_CONSTRANTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return SchoolType.LOOKUP_TABLE.get(trimmed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Parses a {@code String question} into an {@code UnsolvedQuestion}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static UnsolvedQuestion parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new UnsolvedQuestion(trimmedQuestion);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Parses a {@code String solution} a trimmed {@code solution}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static String parseSolution(String solution) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(solution);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String trimmedSolution \u003d solution.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!SolvedQuestion.isValidSolution(trimmedSolution)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(SolvedQuestion.MESSAGE_SOLUTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return trimmedSolution;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a {@code String venue} into a {@code ClassVenue}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the given {@code venue} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static ClassVenue parseClassVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String trimmedVenue \u003d venue.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!ClassVenue.isValidClassVenue(trimmedVenue)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(ClassVenue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new ClassVenue(trimmedVenue);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a {@code String time} into a {@code ClassTime}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static ClassTime parseClassTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!ClassTime.isValidClassTime(trimmedTime)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(ClassTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } else if (!ClassTime.isValidStartAndEndTime(trimmedTime)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(ClassTime.TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new ClassTime(trimmedTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a {@code String fee} into a {@code Fee}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the given {@code fee} is invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Fee parseFee(String fee) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(fee);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String trimmedFee \u003d fee.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!Fee.isValidFee(trimmedFee)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(Fee.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Fee(trimmedFee);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a {@code String paymentDate} into a {@code PaymentDate}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the given {@code paymentDate} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static PaymentDate parsePaymentDate(String paymentDate) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(paymentDate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String trimmedPaymentDate \u003d paymentDate.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!PaymentDate.isValidDate(trimmedPaymentDate)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(PaymentDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new PaymentDate(trimmedPaymentDate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses a {@code String detail} into a {@code Detail}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws ParseException if the given {@code detail} is invalid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static Detail parseDetail(String detail) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(detail);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String trimmedDetail \u003d detail.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!Detail.isValidAdditionalDetail(trimmedDetail)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(Detail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new Detail(trimmedDetail);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e details} into a {@code List\u003cDetail\u003e}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static List\u003cDetail\u003e parseDetails(Collection\u003cString\u003e additionalDetails)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(additionalDetails);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        final List\u003cDetail\u003e detailSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        for (String detail : additionalDetails) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            detailSet.add(parseDetail(detail));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return detailSet;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a {@code String examDate} into a {@code Exam} formatted {@code String}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the given {@code examDate} is invalid."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String parseExamDate(String examDate) throws ParseException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(examDate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String trimmedExamDate \u003d examDate.trim();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!Exam.isValidDate(trimmedExamDate)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(AddExamCommand.MESSAGE_EXAM_INVALID_DATE);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return trimmedExamDate;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a {@code String examName} into a {@code Exam} format {@code String}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the given {@code examName} is invalid."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String parseExamName(String examName) throws ParseException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(examName);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String trimmedExamName \u003d examName.trim();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (trimmedExamName.isEmpty()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(AddExamCommand.MESSAGE_EXAM_INVALID_NAME);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return trimmedExamName;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a {@code String score} into a {@code Score}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws ParseException if the given {@code score} is invalid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Score parseScore(String score) throws ParseException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String trimmedScore \u003d score.trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!Score.isValidExamScore(trimmedScore)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new ParseException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Score(trimmedScore);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses a {@code String lessonDate} into a {@code Attendance} formatted {@code String}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws ParseException if the given {@code lessonDate} is invalid."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static String parseAttendanceDate(String lessonDate) throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(lessonDate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String trimmedLessonDate \u003d lessonDate.trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!Attendance.isValidDate(trimmedLessonDate)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(Attendance.DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return trimmedLessonDate;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses a {@code String attendanceStatus} into a {@code Attendance} formatted {@code String}."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws ParseException if the given {@code attendanceStatus} is invalid."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static String parseAttendanceStatus(String attendanceStatus) throws ParseException {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(attendanceStatus);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String formattedStatus \u003d attendanceStatus.trim().toLowerCase();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!Attendance.isValidAttendanceStatus(formattedStatus)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(Attendance.STATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return formattedStatus;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses a {@code String score} into a {@code Feedback}."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws ParseException if the given {@code feedback} is invalid."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static Feedback parseFeedback(String feedback) throws ParseException {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(feedback);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String trimmedFeedback \u003d feedback.trim();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!Feedback.isValidFeedback(trimmedFeedback)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new ParseException(Feedback.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new Feedback(trimmedFeedback);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "VaishakAnand": 64,
      "StopTakingAllTheNames": 40,
      "-": 113,
      "csiongn": 29,
      "hogantan": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/QuestionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.QuestionCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.COMMAND_PREFIXES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.ReeveParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddQuestionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.QuestionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SolveQuestionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a QuestionCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class QuestionCommandParser implements Parser\u003cQuestionCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} in the context of a QuestionCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a QuestionCommand for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public QuestionCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case AddQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return parseAddQuestionCommand(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case DeleteQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return parseDeleteQuestionCommand(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case SolveQuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return parseSolveQuestionCommand(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private Index getStudentIndex(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return ParserUtil.parseIndex(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private Index getQuestionIndex(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return ParserUtil.parseIndex(argumentMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003dParsers\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private AddQuestionCommand parseAddQuestionCommand(String input) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                ArgumentTokenizer.tokenize(input, PREFIX_TEXT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (areRequiredPrefixesMissing(argMultimap, PREFIX_TEXT)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Index studentIndex \u003d getStudentIndex(argMultimap);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion questionToAdd \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_TEXT).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new AddQuestionCommand(studentIndex, questionToAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private SolveQuestionCommand parseSolveQuestionCommand(String input) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                ArgumentTokenizer.tokenize(input, COMMAND_PREFIXES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (areRequiredPrefixesMissing(argMultimap, COMMAND_PREFIXES)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Index studentIndex \u003d getStudentIndex(argMultimap);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Index questionIndex \u003d getQuestionIndex(argMultimap);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String solution \u003d ParserUtil.parseSolution(argMultimap.getValue(PREFIX_TEXT).get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new SolveQuestionCommand(studentIndex, questionIndex, solution);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private DeleteQuestionCommand parseDeleteQuestionCommand(String input) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                ArgumentTokenizer.tokenize(input, PREFIX_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (areRequiredPrefixesMissing(argMultimap, PREFIX_INDEX)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Index studentIndex \u003d getStudentIndex(argMultimap);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Index questionIndex \u003d getQuestionIndex(argMultimap);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new DeleteQuestionCommand(studentIndex, questionIndex);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private boolean areRequiredPrefixesMissing(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return !Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 80,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReeveParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.DetailCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.ExamCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.OverdueCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.QuestionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.ToggleStudentCardCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReeveParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case QuestionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return new QuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case OverdueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return new OverdueCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        case DetailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return new DetailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case ExamCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return new ExamCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        case AttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return new AttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case ToggleStudentCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ToggleStudentCardCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 3,
      "VaishakAnand": 5,
      "StopTakingAllTheNames": 11,
      "-": 75,
      "csiongn": 8,
      "hogantan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final DateTimeFormatter INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Parses the given {@code userInputDate} to a LocalDate object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * and returns a ScheduleCommand with the LocalDate object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected date format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * and the input is an empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public ScheduleCommand parse(String userInputDate) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        requireNonNull(userInputDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String trimmedUserInput \u003d userInputDate.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // check to see if input string is empty"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (trimmedUserInput.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new ParseException(ScheduleCommand.EMPTY_DATE_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(trimmedUserInput, INPUT_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return new ScheduleCommand(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new ParseException(ScheduleCommand.INCORRECT_DATE_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (trimmedArgs.isEmpty() || !SortCommand.isValidComparisonMeans(trimmedArgs)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new SortCommand(trimmedArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.NameComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * An instance of {@code NameComparator}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    Comparator\u003cStudent\u003e COMPARATOR_NAME \u003d new NameComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    void setReeve(ReadOnlyReeve reeve);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    ReadOnlyReeve getReeve();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns an unmodifiable view of the sorted person list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    ObservableList\u003cStudent\u003e getSortedStudentList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Sorts the internal list in reeve by the given {@code comparator}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    void updateSortedStudentList(Comparator\u003c? super Student\u003e cmp);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "csiongn": 27,
      "hogantan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.NameComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Reeve reeve;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final SortedList\u003cStudent\u003e sortedStudents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ModelManager(ReadOnlyReeve addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.reeve \u003d new Reeve(addressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.reeve.getStudentList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        sortedStudents \u003d new SortedList\u003c\u003e(this.filteredStudents, new NameComparator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this(new Reeve(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setReeve(ReadOnlyReeve reeve) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.reeve.resetData(reeve);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ReadOnlyReeve getReeve() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return reeve;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return reeve.hasStudent(student);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve.removeStudent(target);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve.addStudent(student);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public ObservableList\u003cStudent\u003e getSortedStudentList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sortedStudents;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void updateSortedStudentList(Comparator\u003c? super Student\u003e comparator) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        sortedStudents.setComparator(comparator);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return reeve.equals(other.reeve)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 123,
      "csiongn": 18,
      "hogantan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyReeve.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public interface ReadOnlyReeve {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Reeve.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Wraps all data at the Reeve level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Reeve implements ReadOnlyReeve {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Reeve() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Creates a Reeve using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Reeve(ReadOnlyReeve toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Resets the existing data of this {@code Reeve} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void resetData(ReadOnlyReeve newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in Reeve."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Adds a student to Reeve."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * The student must not already exist in Reeve."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * {@code target} must exist in Reeve."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * in Reeve."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Removes {@code key} from this {@code Reeve}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * {@code key} must exist in Reeve."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                || (other instanceof Reeve // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 students.equals(((Reeve) other).students));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "hogantan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Student\u0027s name in the Reeve."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class NameComparator implements Comparator\u003cStudent\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public int compare(Student o1, Student o2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(o1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(o2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return o1.getName().fullName.toLowerCase().compareTo(o2.getName().fullName.toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "csiongn": 1,
      "hogantan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Student\u0027s phone number in Reeve."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/School.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Represents a Student\u0027s school in Reeve."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSchool(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class School {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            \"School name can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * School names must have at least 1 alphabet with spaces in between allowed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * First character cannot be empty string if not empty string becomes valid school."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public final String school;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * @param school A valid school."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public School(String school) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        checkArgument(isValidSchool(school), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static boolean isValidSchool(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return school;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                || (other instanceof School // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                \u0026\u0026 school.equals(((School) other).school)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return school.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 2,
      "StopTakingAllTheNames": 12,
      "-": 40,
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/SchoolContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code School} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class SchoolContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public SchoolContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (this.keywords.size() \u003c 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .map(String::toLowerCase)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsIgnoreCase(student.getSchool().school, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                || (other instanceof SchoolContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \u0026\u0026 keywords.equals(((SchoolContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/SchoolType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public enum SchoolType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    PRIMARY {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return \"Primary\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    SECONDARY {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return \"Secondary\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    JC {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return \"JC\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String SCHOOL_TYPE_CONSTRANTS \u003d \"The type\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"of school can only be one of \\\"secondary\\\", \\\"Secondary\\\", \\\"sec\\\", \\\"Sec\\\", \\\"s\\\", \\\"S\\\"\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"\\\"primary\\\", \\\"Primary\\\", \\\"pri\\\", \\\"Pri\\\", \\\"p\\\", \\\"P\\\", \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"\\\"jc\\\", \\\"Jc\\\", \\\"JC\\\", \\\"j\\\", \\\"J\\\"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final Map\u003cString, SchoolType\u003e LOOKUP_TABLE \u003d Map.ofEntries("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"pri\", PRIMARY),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"primary\", PRIMARY),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"p\", PRIMARY),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"sec\", SECONDARY),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"secondary\", SECONDARY),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"s\", SECONDARY),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"jc\", JC),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map.entry(\"j\", JC)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static boolean isValidSchoolType(String schoolType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return LOOKUP_TABLE.containsKey(schoolType.toLowerCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents a Student in Reeve."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final School school;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final Admin admin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final List\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Academic academic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *  name, phone, school, year, must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *  exams is empty when a student is first initialised."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Student(Name name, Phone phone, School school, Year year,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                   Admin admin, List\u003cQuestion\u003e questions, List\u003cExam\u003e exams, Academic academic) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(name, phone, school, year, admin, academic);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.questions.addAll(questions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.exams.addAll(exams);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.academic \u003d academic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private Student(Student copy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(copy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.name \u003d copy.name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.phone \u003d copy.phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.school \u003d copy.school;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.year \u003d copy.year;;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.admin \u003d copy.admin;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.questions.addAll(copy.questions);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.exams.addAll(copy.exams);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.academic \u003d copy.academic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public School getSchool() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return school;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Admin getAdmin() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return admin;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Academic getAcademic() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return academic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cQuestion\u003e getQuestions() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return List.copyOf(questions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public List\u003cExam\u003e getExams() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return exams;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Get exams of student formatted for GUI use."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return formatted exams."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getFormattedExams() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (Exam exam : exams) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            result \u003d result + index + \".\" + exam.toString() + \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String getFormattedQuestions() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        for (Question question: questions) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            result \u003d result + index + \". \" + question.toString() + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public List\u003cDetail\u003e getDetails() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return admin.getDetails();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public List\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return academic.getAttendance();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Returns true if both student of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 otherStudent.getName().toString().toLowerCase().equals(getName().toString().toLowerCase())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 otherStudent.getSchool().toString().toLowerCase().equals(getSchool().toString().toLowerCase())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                \u0026\u0026 otherStudent.getYear().equals(getYear());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean containsQuestion(Question question) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return questions.stream().anyMatch(question::isSameQuestion);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Creates a new student object with a newly added question at the end of the questions list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * This operation preserves the immutability of the Student class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public Student addQuestion(Question question) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assert !containsQuestion(question);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student replacement \u003d new Student(this);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        replacement.questions.add(question);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return replacement;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Creates a new student object with a modified question replacing the previous question in the list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * This operation preserves the immutability of the Student class."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public Student setQuestion(Question target, Question newQuestion) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assert questions.contains(target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireAllNonNull(target, newQuestion);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student replacement \u003d new Student(this);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int location \u003d replacement.questions.indexOf(target);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        replacement.questions.set(location, newQuestion);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return replacement;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Creates a new student object with the specified question removed from the list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * This operation preserves the immutability of the Student class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public Student deleteQuestion(Question target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assert questions.contains(target);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student replacement \u003d new Student(this);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        replacement.questions.remove(target);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return replacement;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Returns true if both student have the same identity and data fields."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                \u0026\u0026 otherStudent.getSchool().equals(getSchool())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getYear().equals(getYear())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherStudent.getAdmin().equals(getAdmin())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 otherStudent.getAcademic().equals(getAcademic())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 otherStudent.getQuestions().equals(getQuestions())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 otherStudent.getExams().equals(getExams())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 otherStudent.getAcademic().equals(getAcademic());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return Objects.hash(name, phone, school, year, questions, admin, academic);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(\"\\nPhone: \")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(\"\\nSchool: \")"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                .append(getSchool())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(\"\\nYear: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getYear())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .append(getAdmin())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .append(getAcademic());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!questions.isEmpty()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            builder.append(\"\\nQuestions:\\n\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            String questionList \u003d questions.stream()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                    .map(Question::toString)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                    .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            builder.append(questionList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!exams.isEmpty()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            builder.append(\"\\nExams:\\n\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            exams.forEach(builder::append);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 13,
      "VaishakAnand": 35,
      "StopTakingAllTheNames": 72,
      "-": 19,
      "hogantan": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "hogantan": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Year.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \"Year should contain the type of school and a number representing the level. The type \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"of school can only be one of \\\"secondary\\\", \\\"Secondary\\\", \\\"sec\\\", \\\"Sec\\\", \\\"s\\\", \\\"S\\\" \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \"\\\"primary\\\", \\\"Primary\\\", \\\"pri\\\", \\\"Pri\\\", \\\"p\\\", \\\"P\\\", \\\"j\\\", \\\"J\\\", \\\"JC\\\", \\\"Jc\\\", \\\"jc\\\"\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            + \" and the level must be valid for the type of school.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"((secondary|sec|s|Secondary|Sec|S)\\\\s*([1-5])|\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        + \"(primary|pri|p|Primary|Pri|P)\\\\s*([1-6])|(jc|Jc|j|J|JC)\\\\s*([1-2]))\\\\s*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Used for separation of year into school type and level."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final Pattern YEAR_FORMAT \u003d Pattern.compile(\"(?\u003cschool\u003e[^\\\\d\\\\s]+)\\\\s*(?\u003clevel\u003e\\\\d)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public final SchoolType schoolType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public final Integer level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Constructs a {@code Year}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param schoolType A valid school type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param level A valid level"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Year(SchoolType schoolType, Integer level) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(schoolType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(level);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.schoolType \u003d schoolType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"%s %s\", this.schoolType, this.level);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \u0026\u0026 schoolType.equals(((Year) other).schoolType)) // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \u0026\u0026 level.equals(((Year) other).level);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 1,
      "-": 26,
      "csiongn": 29,
      "hogantan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/YearComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class YearComparator implements Comparator\u003cStudent\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public int compare(Student o1, Student o2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(o1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(o2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Year year1 \u003d o1.getYear();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Year year2 \u003d o2.getYear();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert year1 !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert year2 !\u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (year1.schoolType.compareTo(year2.schoolType) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return year1.level.compareTo(year2.level);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return year1.schoolType.compareTo(year2.schoolType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/YearMatchPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Year} matches the given year."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class YearMatchPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public final Year year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public YearMatchPredicate(Year year) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return this.year.equals(student.getYear());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                || (other instanceof YearMatchPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \u0026\u0026 this.year.equals(((YearMatchPredicate) other).year)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/academic/Academic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student.academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents all academic details of a Student in Reeve."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * Consists of exams, homework and attendance."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Academic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final List\u003cAttendance\u003e attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Builds an Academic object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param attendance list of attendance for student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Academic(List\u003cAttendance\u003e attendance) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(attendance);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public List\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Get Attendance of student formatted for GUI use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return formatted exams."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String getFormattedAttendance() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        for (Attendance singleAttendance : attendance) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            result \u003d result + index + \". \" + singleAttendance + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return Objects.hash(attendance);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!(obj instanceof Academic)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic other \u003d (Academic) obj;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return other.getAttendance().equals(getAttendance());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!attendance.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            builder.append(\"\\nAttendance:\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            String detailList \u003d attendance.stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    .map(detail -\u003e String.format(\"- %s\", detail))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            builder.append(detailList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 69,
      "hogantan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/academic/Attendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            \"Attendance dates should be valid and in the form dd/mm/yy, and should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String STATUS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            \"Attendance status should be either \u0027present\u0027 or \u0027absent\u0027.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final DateTimeFormatter INPUT_DEF \u003d DateTimeFormatter.ofPattern(\"d/M/yy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final DateTimeFormatter INPUT_ALT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final DateTimeFormatter OUTPUT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String PRESENT_STATUS \u003d \"present\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String ABSENT_STATUS \u003d \"absent\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private LocalDate lessonDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private boolean isPresent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private Feedback feedback;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a {@code Attendance} object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param date date of lesson"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param isPresent whether student was present for lesson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param feedback feedback for lesson"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Attendance(String date, String isPresent, Feedback feedback) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireAllNonNull(date, isPresent, feedback);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        checkArgument(isValidDate(date), DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        checkArgument(isValidAttendanceStatus(isPresent), STATUS_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.lessonDate \u003d parseDate(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.isPresent \u003d parseAttendanceStatus(isPresent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Parses userinput into a proper date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param input user input date String"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return date understood by Reeve"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static LocalDate parseDate(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            date \u003d LocalDate.parse(input, INPUT_DEF);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            date \u003d LocalDate.parse(input, INPUT_ALT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns true if a given string is a valid date for {@code Attendance}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String validationRegex \u003d \"(\\\\d{1,2})(\\\\/)(\\\\d{1,2})(\\\\/)(\\\\d{2}|\\\\d{4})\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!date.matches(validationRegex)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalDate testDate \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        for (DateTimeFormatter format : new DateTimeFormatter[] {INPUT_DEF, INPUT_ALT}) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                testDate \u003d LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                // does not match the DateTimeFormat, try the next"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return testDate !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static boolean isValidAttendanceStatus(String status) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return status.equals(PRESENT_STATUS) || status.equals(ABSENT_STATUS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static boolean parseAttendanceStatus(String status) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return status.equals(PRESENT_STATUS); // if false, then will be equal to ABSENT_STATUS"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public LocalDate getLessonDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return lessonDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String getUserInputDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return lessonDate.format(INPUT_ALT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String getOutputDate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return lessonDate.format(OUTPUT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean getAttendanceStatus() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Feedback getFeedback() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return String.format(\"%s (%s) %s\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                getOutputDate(), (getAttendanceStatus() ? \"\\u2713\" : \"\\u2718\"), getFeedback());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!(obj instanceof Attendance)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Attendance other \u003d (Attendance) obj;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return other.getLessonDate().equals(getLessonDate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 other.getAttendanceStatus() \u003d\u003d getAttendanceStatus()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 other.getFeedback().equals(getFeedback());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/academic/Feedback.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class Feedback {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Feedback should be alphanumeric\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\s]*[a-zA-Z0-9][a-zA-Z0-9\\\\s]*$\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private String feedback;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a {@code Feedback} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param feedback feedback for student."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Feedback(String feedback) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(feedback);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        checkArgument(isValidFeedback(feedback), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns true if a given string is a valid feedback."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static boolean isValidFeedback(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return this.feedback;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!(obj instanceof Feedback)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Feedback other \u003d (Feedback) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return other.feedback.equals(feedback);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/academic/exam/Exam.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student.academic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents an Exam in Reeve that can be assigned to a {@code Student}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Exam {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final DateTimeFormatter INPUT_DEF \u003d DateTimeFormatter.ofPattern(\"d/M/yy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final DateTimeFormatter INPUT_ALT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final DateTimeFormatter OUTPUT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final String examName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final LocalDate examDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Score score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a {@code Exam}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param examName name of exam."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param examDate date of exam."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param score score obtained."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Exam(String examName, String examDate, Score score) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.examName \u003d examName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        LocalDate formattedDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            formattedDate \u003d LocalDate.parse(examDate, INPUT_DEF);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            formattedDate \u003d LocalDate.parse(examDate, INPUT_ALT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.examDate \u003d formattedDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return examName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return examDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getUserInputDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.examDate.format(INPUT_ALT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Returns true if a given string is a valid date for {@code Exam}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validationRegex \u003d \"(\\\\d{1,2})(\\\\/)(\\\\d{1,2})(\\\\/)(\\\\d{2}|\\\\d{4})\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!date.matches(validationRegex)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        LocalDate testDate \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (DateTimeFormatter format : new DateTimeFormatter[] {INPUT_DEF, INPUT_ALT}) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                testDate \u003d LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                // does not match the DateTimeFormat, try the next"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return testDate !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return Objects.hash(examName, examDate, score);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!(obj instanceof Exam)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Exam other \u003d (Exam) obj;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return other.getName().equals(getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \" \" + examName + \"\\n\\t- Date: \" + examDate.format(OUTPUT) + \"\\n\\t- Score: \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + score + \" (\" + score.getScorePercentage() + \"%)\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/academic/exam/Score.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student.academic.exam;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents an exam\u0027s score in an Exam."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExamScore(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \"Scores should be in the form x/y, where x and y are both whole numbers and x is less than \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"or equal to y\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public final String examScore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a {@code Score}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param score A valid exam score."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Score(String score) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        checkArgument(isValidExamScore(score), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        examScore \u003d score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Returns true if a given string is a valid score."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static boolean isValidExamScore(String score) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] splitScore \u003d score.split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (splitScore.length !\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        int firstInt;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        int secInt;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            firstInt \u003d Integer.parseInt(splitScore[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            secInt \u003d Integer.parseInt(splitScore[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (firstInt \u003c 0 || secInt \u003c 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return firstInt \u003c\u003d secInt;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Get percentage converted score."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return score in terms of percentage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public double getScorePercentage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] splitScore \u003d examScore.split(\"/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        double firstInt \u003d Double.parseDouble(splitScore[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        double secondInt \u003d Double.parseDouble(splitScore[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return Math.round((firstInt / secondInt) * 1000) / 10.0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return examScore;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                || (other instanceof Score // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 examScore.equals(((Score) other).examScore)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return examScore.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/Admin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents all administrative details of a Student in Reeve."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Consists of the lesson venue, time, monthly fees, last paid date and additional notes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and non-null, all fields are validated and immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Admin {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ClassVenue classVenue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ClassTime classTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Fee fee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PaymentDate paymentDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final List\u003cDetail\u003e details \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * venue, time, fee, date and details are not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Admin(ClassVenue venue, ClassTime time, Fee fee, PaymentDate date,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                 List\u003cDetail\u003e details) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(venue, time, fee, date, details);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.classVenue \u003d venue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.classTime \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fee \u003d fee;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.paymentDate \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.details.addAll(details);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ClassVenue getClassVenue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return classVenue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ClassTime getClassTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return classTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Fee getFee() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fee;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public PaymentDate getPaymentDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return paymentDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public List\u003cDetail\u003e getDetails() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Get additional details of student formatted for GUI use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return formatted additional details."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getFormattedDetails() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        for (Detail detail: details) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            result \u003d result + \"- \" + detail.toString() + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(classVenue, classTime, fee, paymentDate, details);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Admin)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Admin other \u003d (Admin) obj;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other.getClassVenue().equals(getClassVenue())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getClassTime().equals(getClassTime())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getFee().equals(getFee())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPaymentDate().equals(getPaymentDate())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getDetails().equals(getDetails());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        builder.append(\"\\nClass Venue: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(classVenue)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(\"\\nLesson Times: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(classTime)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(\"\\nFee: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(fee)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(\"\\nLast Paid: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(paymentDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!details.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            builder.append(\"\\nDetails:\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            String detailList \u003d details.stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                    .map(detail -\u003e String.format(\"- %s\", detail))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                    .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            builder.append(detailList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 2,
      "StopTakingAllTheNames": 18,
      "-": 81,
      "hogantan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/ClassTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * Represents a ClassTime in Reeve."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidClassTime(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class ClassTime implements Comparable\u003cClassTime\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            \"Class Time should follow the following format: {int: day_of_week} {int: start_time}-{int: end_time}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String TIME_CONSTRAINTS \u003d \"End time should always be after Start time\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String TIME_VALIDATION \u003d \"([01]?[0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([1-7])[\\\\s]\" + TIME_VALIDATION + \"-\" + TIME_VALIDATION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final DateTimeFormatter OUTPUT \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public final DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public final LocalTime startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public final LocalTime endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a {@code ClassTime}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param inputTime A valid ClassTime."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public ClassTime(String inputTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(inputTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        checkArgument(isValidClassTime(inputTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        checkArgument(isValidStartAndEndTime(inputTime), TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.dayOfWeek \u003d extractDay(inputTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.startTime \u003d extractStartTime(inputTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.endTime \u003d extractEndTime(inputTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static boolean isValidClassTime(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static DayOfWeek extractDay(String input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        char day \u003d input.charAt(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return DayOfWeek.of(Integer.parseInt(String.valueOf(day)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static LocalTime extractStartTime(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String startTime \u003d input.substring(2, 6);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return LocalTime.parse(startTime, TIME_FORMATTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static LocalTime extractEndTime(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String endTime \u003d input.substring(7);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return LocalTime.parse(endTime, TIME_FORMATTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public boolean isSameDay(DayOfWeek otherDay) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this.dayOfWeek.equals(otherDay);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Checks if input end time is after start time."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param input Start and end times input by user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @return True if times are valid, False if otherwise."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static boolean isValidStartAndEndTime(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalTime startTime \u003d extractStartTime(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalTime endTime \u003d extractEndTime(input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return endTime.isAfter(startTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Converts a {@code classTime} object back to a user input string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String convertClassTimeToUserInputString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String startTimeString \u003d this.startTime.format(OUTPUT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String endTimeString \u003d this.endTime.format(OUTPUT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        int dayOfWeek \u003d this.dayOfWeek.getValue();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        builder.append(dayOfWeek)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                .append(startTimeString)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                .append(\"-\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                .append(endTimeString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String dayDisplayName \u003d dayOfWeek.getDisplayName(TextStyle.FULL, Locale.ENGLISH);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return String.format(\"%1$s (%2$s - %3$s)\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                dayDisplayName,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                this.startTime.format(OUTPUT),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                this.endTime.format(OUTPUT));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                || (other instanceof ClassTime // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 dayOfWeek.equals(((ClassTime) other).dayOfWeek)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 startTime.equals(((ClassTime) other).startTime)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 endTime.equals(((ClassTime) other).endTime)); // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return Objects.hash(dayOfWeek, startTime, endTime);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public int compareTo(ClassTime o) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // same dayOfWeek \u003d\u003e need to compare specific time"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (this.dayOfWeek.equals(o.dayOfWeek)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (this.startTime.isBefore(o.startTime)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                return -1; // start time is earlier"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            // Here we are assuming there are no overlapping classTimes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            // i.e. there are no clash"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return 1; // start time is later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this.dayOfWeek.getValue() - o.dayOfWeek.getValue();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 46,
      "VaishakAnand": 54,
      "StopTakingAllTheNames": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/ClassTimeComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ClassTimeComparator implements Comparator\u003cStudent\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public int compare(Student o1, Student o2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(o1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        requireNonNull(o2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ClassTime classTime1 \u003d o1.getAdmin().getClassTime();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ClassTime classTime2 \u003d o2.getAdmin().getClassTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert classTime1 !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert classTime2 !\u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (classTime1.dayOfWeek.compareTo(classTime2.dayOfWeek) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return classTime1.startTime.compareTo(classTime2.startTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return classTime1.dayOfWeek.compareTo(classTime2.dayOfWeek);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/ClassVenue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents a Student\u0027s class venue in Reeve."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidClassVenue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ClassVenue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Class Venues can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * The first character of the class venue must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public final String venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs an {@code ClassVenue}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param classVenue A valid classVenue."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ClassVenue(String classVenue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        requireNonNull(classVenue);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        checkArgument(isValidClassVenue(classVenue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        venue \u003d classVenue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Returns true if a given string is a valid classVenue."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static boolean isValidClassVenue(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                || (other instanceof ClassVenue // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \u0026\u0026 venue.equals(((ClassVenue) other).venue)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return venue.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "VaishakAnand": 5,
      "-": 1,
      "hogantan": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/Detail.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * Represents an additional detail in Reeve."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * Guarantees: immutable; detail is valid as declared in {@link #isValidAdditionalDetail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class Detail {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Additional details should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\s]*[a-zA-Z0-9][a-zA-Z0-9\\\\s]*$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public final String detail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a {@code AdditionalDetail}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param detail A valid detail."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public Detail(String detail) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        requireNonNull(detail);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        checkArgument(isValidAdditionalDetail(detail), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns true if a given string is a valid additional detail."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static boolean isValidAdditionalDetail(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                || (other instanceof Detail // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                \u0026\u0026 detail.equals(((Detail) other).detail)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return detail.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return detail;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 48,
      "StopTakingAllTheNames": 4,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/Fee.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Represents a Student\u0027s monthly tuition fees."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class Fee {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            \"Fees should strictly contain only digits up to 2 decimal points, and be in SGD\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]+((\\\\.[0-9]{1,2})?)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String FREE_OF_CHARGE \u003d \"0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public final double amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Constructs a {@code Fee}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public Fee(String amount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        checkArgument(isValidFee(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.amount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns true if the given string is in the correct format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static boolean isValidFee(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Converts a Fee object to a the original user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String convertFeeToUserInputString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return String.valueOf(amount);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"$%.2f\", amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return (this \u003d\u003d obj)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                || (obj instanceof Fee)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                \u0026\u0026 amount \u003d\u003d ((Fee) obj).amount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return Double.hashCode(amount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 7,
      "StopTakingAllTheNames": 53,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/OverdueFeePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code PaymentDate} is more than a month earlier than the current date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class OverdueFeePredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public OverdueFeePredicate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return currentDate.minusMonths(1).compareTo(student.getAdmin().getPaymentDate().lastPaid) \u003e 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                \u0026\u0026 student.getAdmin().getFee().amount \u003e 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/admin/PaymentDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Represents the last time a Student paid his tuition fees."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class PaymentDate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Payment dates should be a valid date in the form dd/mm/yy, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"should not be blank, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            + \"and should not be future-dated\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter INPUT_DEF \u003d DateTimeFormatter.ofPattern(\"d/M/yy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter INPUT_ALT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final DateTimeFormatter OUTPUT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String TODAY \u003d LocalDate.now().format(INPUT_DEF);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final Pattern VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            Pattern.compile(\"(?\u003cday\u003e[0-9]{1,2})(/)(?\u003cmonth\u003e[0-9]{1,2})(/)(?\u003cyear\u003e[0-9]{2}|[0-9]{4})\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public final LocalDate lastPaid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Constructs a {@code PaymentDate}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * @param lastPaid A valid payment date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public PaymentDate(String lastPaid) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(lastPaid);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        checkArgument(isValidDate(lastPaid), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.lastPaid \u003d parseToDate(lastPaid);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The {@code String} has already been validated by {@link #isValidDate(String)}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * We just have to find out which format it fits."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate parseToDate(String lastPaid) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return LocalDate.parse(lastPaid, INPUT_DEF);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            // date is in d/M/yyyy"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return LocalDate.parse(lastPaid, INPUT_ALT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns true if a given string is in the correct date format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Matcher matcher \u003d VALIDATION_REGEX.matcher(test);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String day \u003d matcher.group(\"day\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String month \u003d matcher.group(\"month\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String year \u003d matcher.group(\"year\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (year.length() \u003c 4) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            year \u003d \"20\" + year;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int parseDay \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int parseMonth \u003d Integer.parseInt(month);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int parseYear \u003d Integer.parseInt(year);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            LocalDate date \u003d LocalDate.of(parseYear, parseMonth, parseDay);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return date.compareTo(LocalDate.now()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String convertPaymentDateToUserInputString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this.lastPaid.format(INPUT_ALT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return lastPaid.format(OUTPUT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return (this \u003d\u003d obj) // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                || (obj instanceof PaymentDate) // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                \u0026\u0026 lastPaid.equals(((PaymentDate) obj).lastPaid); // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return lastPaid.hashCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 4,
      "StopTakingAllTheNames": 86,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "hogantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/question/Question.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a question a Student has for a tutor in Reeve."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public abstract class Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            \"Questions should at least contain a non-whitespace character\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new Question object. This is the default constructor for adding"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * a new unresolved Question to a student."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given String is valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both questions are the same, regardless of resolution status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a weaker notion of equality between questions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameQuestion(Question other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return question.equals(other.question);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns true if the question has been resolved by the tutor."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public abstract boolean isResolved();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 9,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/question/SolvedQuestion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Represents a student\u0027s question in Reeve that the tutor has resolved."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class SolvedQuestion extends Question {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String MESSAGE_SOLUTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            \"Solutions should at least contain a non-whitespace character\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String STATUS \u003d \"(\\u2713)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public final String solution;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Constructs a SolvedQuestion object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public SolvedQuestion(String question, String solution) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        super(question);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        requireNonNull(solution);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        checkArgument(isValidSolution(solution), MESSAGE_SOLUTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.solution \u003d solution;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns true if the given String is valid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static boolean isValidSolution(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns true if both questions are solved and have similar details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * This is a stronger notion of equality between questions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (this \u003d\u003d obj) { // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!(obj instanceof SolvedQuestion)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolvedQuestion other \u003d (SolvedQuestion) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return question.equals(other.question) \u0026\u0026 solution.equals(other.solution);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return String.format(\"%1$s %2$s [%3$s]\", STATUS, super.toString(), solution);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return Objects.hash(question, solution);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public boolean isResolved() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/question/UnsolvedQuestion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Represents an unsolved question a student has for a tutor in Reeve."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class UnsolvedQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String STATUS \u003d \"(\\u2718)\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Constructs a new UnsolvedQuestion object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public UnsolvedQuestion(String question) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        super(question);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns true if both questions are unsolved and have similar details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * This is a stronger notion of equality between questions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (this \u003d\u003d obj) { // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!(obj instanceof UnsolvedQuestion)) { // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion other \u003d (UnsolvedQuestion) obj;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return question.equals(other.question);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return String.format(\"%1$s %2$s\", STATUS, super.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public boolean isResolved() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Contains utility methods for populating {@code Reeve} with sample data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Student[] getSamplePersons() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Sample Exams"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Exam sampleExam1 \u003d new Exam(\"CA2\", \"13/3/2020\", new Score(\"34/50\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Exam sampleExam2 \u003d new Exam(\"End of Year 2020\", \"5/11/2020\", new Score(\"50/50\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Exam sampleExam3 \u003d new Exam(\"Mid Year 2020\", \"26/7/2020\", new Score(\"26/50\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Student[]{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            new Student(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                        new School(\"NUS High School\"), new Year(SchoolType.SECONDARY, 4),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        new Admin(new ClassVenue(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                                new ClassTime(\"1 1400-1500\"), new Fee(\"430\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new PaymentDate(\"23/4/19\"), getDetailList(\"clever\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        getQuestions(\"How do birds fly?\"), getExams(sampleExam1, sampleExam2),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        new Academic(getAttendance(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new Feedback(\"attentive\"))))),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            new Student(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                        new School(\"Montford Secondary School\"), new Year(SchoolType.SECONDARY, 4),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        new Admin(new ClassVenue(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                                new ClassTime(\"1 1500-1600\"), new Fee(\"50\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                                new PaymentDate(\"30/6/20\"), getDetailList()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        getSolvedQuestions(\"Read your textbook\", \"Explain heat flow.\"), getExams(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        new Academic(getAttendance(new Attendance(\"06/05/2010\", \"absent\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new Feedback(\"was sick\"))))),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            new Student(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                        new School(\"Raffles Girls School\"), new Year(SchoolType.SECONDARY, 3),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        new Admin(new ClassVenue(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                                new ClassTime(\"2 1900-1930\"), new Fee(\"680\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new PaymentDate(\"1/12/19\"), getDetailList()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        getQuestions(), getExams(sampleExam3), new Academic(getAttendance(new Attendance("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        \"01/01/2020\", \"present\", new Feedback(\"prepared well\"))))),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            new Student(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                        new School(\"Anderson Primary School\"), new Year(SchoolType.PRIMARY, 2),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        new Admin(new ClassVenue(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                                new ClassTime(\"6 0800-0950\"), new Fee(\"12\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new PaymentDate(\"24/7/20\"), getDetailList(\"friend\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        getQuestions(\"How do birds fly?\", \"Explain heat flow.\"), getExams(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        new Academic(getAttendance(new Attendance(\"26/10/2020\", \"absent\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new Feedback(\"productive session\"))))),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            new Student(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                        new School(\"National Junior College\"), new Year(SchoolType.JC, 1),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        new Admin(new ClassVenue(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                                new ClassTime(\"3 1300-1400\"), new Fee(\"0\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new PaymentDate(\"7/4/20\"), getDetailList(\"clever\", \"friend\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        getQuestions(), getExams(), new Academic(getAttendance(new Attendance(\"25/12/2020\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        \"present\", new Feedback(\"studied through christmas\"))))),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            new Student(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                        new School(\"Catholic High School\"), new Year(SchoolType.JC, 1),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        new Admin(new ClassVenue(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                                new ClassTime(\"4 2000-2130\"), new Fee(\"38\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                new PaymentDate(\"19/12/19\"), getDetailList(\"rude\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        getQuestions(), getExams(sampleExam2, sampleExam3), new Academic(getAttendance("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        new Attendance(\"20/04/98\", \"present\", new Feedback(\"unprepared\")))))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static ReadOnlyReeve getSampleAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve sampleAb \u003d new Reeve();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (Student sampleStudent : getSamplePersons()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns a {@code Detail} list containing the list of given strings."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static List\u003cDetail\u003e getDetailList(String... strings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(Detail::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Question} list containing the list of given strings."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cQuestion\u003e getQuestions(String... strings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(UnsolvedQuestion::new)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of solved {@code Questions} containing the given strings."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static List\u003cQuestion\u003e getSolvedQuestions(String solution, String... strings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(string -\u003e new SolvedQuestion(string, solution))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static List\u003cExam\u003e getExams(Exam... exams) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return Arrays.asList(exams);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns a {@code Attendance} list containing the list of given attendences."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static List\u003cAttendance\u003e getAttendance(Attendance... attendances) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return Arrays.asList(attendances);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 5,
      "VaishakAnand": 31,
      "StopTakingAllTheNames": 34,
      "-": 40,
      "csiongn": 8,
      "hogantan": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAcademic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class JsonAdaptedAcademic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MISSING_ADMIN_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final List\u003cJsonAdaptedAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a {@code JsonAdaptedAcademic} with academic details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @param attendanceList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public JsonAdaptedAcademic(@JsonProperty(\"attendanceList\") List\u003cJsonAdaptedAttendance\u003e attendanceList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (attendanceList !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            this.attendanceList.addAll(attendanceList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Converts a given {@code Academic} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public JsonAdaptedAcademic(Academic source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        attendanceList.addAll(source.getAttendance().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .map(JsonAdaptedAttendance::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Converts this Jackson-friendly adapted admin object into the model\u0027s {@code Admin} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted admin."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Academic toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final List\u003cAttendance\u003e attendances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        for (JsonAdaptedAttendance attendance : attendanceList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            attendances.add(attendance.toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final List\u003cAttendance\u003e modelAttendance \u003d new ArrayList\u003c\u003e(attendances);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new Academic(modelAttendance);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAdmin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * Jackson-friendly version of {@link Admin}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class JsonAdaptedAdmin {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String MISSING_ADMIN_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final String classVenue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final String classTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final String fee;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final String paymentDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final List\u003cJsonAdaptedDetail\u003e additionalDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Constructs a {@code JsonAdaptedAdmin} with admin details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public JsonAdaptedAdmin(@JsonProperty(\"classVenue\") String classVenue,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                            @JsonProperty(\"classTime\") String classTime,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                            @JsonProperty(\"fee\") String fee,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                            @JsonProperty(\"paymentDate\") String paymentDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                            @JsonProperty(\"additionalDetails\") List\u003cJsonAdaptedDetail\u003e additionalDetails) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.classVenue \u003d classVenue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.classTime \u003d classTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.fee \u003d fee;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.paymentDate \u003d paymentDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (additionalDetails !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            this.additionalDetails.addAll(additionalDetails);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Converts a given {@code Admin} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public JsonAdaptedAdmin(Admin source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.classVenue \u003d source.getClassVenue().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.classTime \u003d source.getClassTime().convertClassTimeToUserInputString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.fee \u003d source.getFee().convertFeeToUserInputString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.paymentDate \u003d source.getPaymentDate().convertPaymentDateToUserInputString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        additionalDetails.addAll(source.getDetails().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(JsonAdaptedDetail::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Converts this Jackson-friendly adapted admin object into the model\u0027s {@code Admin} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted admin."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Admin toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        final List\u003cDetail\u003e details \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        for (JsonAdaptedDetail additionalDetail : additionalDetails) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            details.add(additionalDetail.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (classVenue \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ADMIN_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    ClassVenue.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (!ClassVenue.isValidClassVenue(classVenue)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(ClassVenue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        final ClassVenue modelClassVenue \u003d new ClassVenue(classVenue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (classTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ADMIN_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    ClassTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (!ClassTime.isValidClassTime(classTime)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(ClassTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        final ClassTime modelClassTime \u003d new ClassTime(classTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (fee \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ADMIN_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    Fee.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (!Fee.isValidFee(fee)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(Fee.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        final Fee modelFee \u003d new Fee(fee);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (paymentDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ADMIN_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    PaymentDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (!PaymentDate.isValidDate(paymentDate)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(PaymentDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        final PaymentDate modelPaymentDate \u003d new PaymentDate(paymentDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        final List\u003cDetail\u003e modelDetails \u003d new ArrayList\u003c\u003e(details);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new Admin(modelClassVenue, modelClassTime , modelFee, modelPaymentDate, modelDetails);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 106,
      "StopTakingAllTheNames": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class JsonAdaptedAttendance {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String MISSING_ATTENDANCE_FIELD_MESSAGE_FORMAT \u003d \"Attendance\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final String attendanceStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final String feedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a {@code JsonAdaptedExam} with the given {@code exam}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public JsonAdaptedAttendance(@JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                 @JsonProperty(\"attendanceStatus\") String attendanceStatus,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                                 @JsonProperty(\"feedback\") String feedback) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.attendanceStatus \u003d attendanceStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Converts a given {@code Exam} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public JsonAdaptedAttendance(Attendance source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.date \u003d source.getUserInputDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.attendanceStatus \u003d source.getAttendanceStatus() ? \"present\" : \"absent\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.feedback \u003d source.getFeedback().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Converts this Jackson-friendly adapted attendance object into the model\u0027s {@code Attendance} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted detail."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public Attendance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (date \u003d\u003d null || date.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ATTENDANCE_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    \"Attendance date\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (attendanceStatus \u003d\u003d null || attendanceStatus.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ATTENDANCE_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    \"Attendance status\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (feedback \u003d\u003d null || feedback.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_ATTENDANCE_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    \"Feedback\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!Attendance.isValidDate(date)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new IllegalValueException(\"Invalid date format\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!Attendance.isValidAttendanceStatus(attendanceStatus)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new IllegalValueException(\"Invalid attendance status format\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        if (!Feedback.isValidFeedback(feedback)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            throw new IllegalValueException(Feedback.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new Attendance(date, attendanceStatus, new Feedback(feedback));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDetail.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": " * Jackson-friendly version of {@link Detail}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "class JsonAdaptedDetail {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final String detail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Constructs a {@code JsonAdaptedAdditionalDetail} with the given {@code detail}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public JsonAdaptedDetail(String detail) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.detail \u003d detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Converts a given {@code AdditionalDetail} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public JsonAdaptedDetail(Detail source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        detail \u003d source.detail;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public String getDetail() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return detail;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Converts this Jackson-friendly adapted additionalDetail object into the model\u0027s {@code AdditionalDetail} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted detail."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public Detail toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!Detail.isValidAdditionalDetail(detail)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new IllegalValueException(Detail.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new Detail(detail);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 39,
      "StopTakingAllTheNames": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExam.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Jackson-friendly version of {@link Exam}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class JsonAdaptedExam {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String MISSING_EXAM_FIELD_MESSAGE_FORMAT \u003d \"Exam\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final String examName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final String examDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final String score;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a {@code JsonAdaptedExam} with the given {@code exam}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public JsonAdaptedExam(@JsonProperty(\"examName\") String examName,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                           @JsonProperty(\"examDate\") String examDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                           @JsonProperty(\"score\") String score) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.examName \u003d examName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.examDate \u003d examDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts a given {@code Exam} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public JsonAdaptedExam(Exam source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.examName \u003d source.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.examDate \u003d source.getUserInputDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.score \u003d source.getScore().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts this Jackson-friendly adapted exam object into the model\u0027s {@code Exam} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted detail."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Exam toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (examName \u003d\u003d null || examName.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_EXAM_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    \"Exam Name\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (examDate \u003d\u003d null || examDate.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_EXAM_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    \"Exam Date\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!Exam.isValidDate(examDate)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new IllegalValueException(\"Invalid date format\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!Score.isValidExamScore(score)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Exam(examName, examDate, new Score(score));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedQuestion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@code Question}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedQuestion {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final boolean status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final String solution;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedQuestion} with the given {@code question}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public JsonAdaptedQuestion(@JsonProperty(\"status\") boolean status, @JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                               @JsonProperty(\"solution\") String solution) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.solution \u003d solution;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Question} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedQuestion(Question source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.status \u003d source.isResolved();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.question \u003d source.question;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            SolvedQuestion solved \u003d (SolvedQuestion) source;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            this.solution \u003d solved.solution;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            this.solution \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted question object into the model\u0027s {@code Question} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted detail."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Question toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return status ? createModelSolved() : createModelUnsolved();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private UnsolvedQuestion createModelUnsolved() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new UnsolvedQuestion(question);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private SolvedQuestion createModelSolved() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (!SolvedQuestion.isValidSolution(solution)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            throw new IllegalValueException(SolvedQuestion.MESSAGE_SOLUTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new SolvedQuestion(question, solution);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 37,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final String school;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @JsonProperty(\"admin\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final JsonAdaptedAdmin jsonAdaptedAdmin;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @JsonProperty(\"questions\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private final List\u003cJsonAdaptedQuestion\u003e jsonAdaptedQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @JsonProperty(\"exams\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedExam\u003e jsonAdaptedExams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @JsonProperty(\"academic\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final JsonAdaptedAcademic jsonAdaptedAcademic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                              @JsonProperty(\"school\") String school, @JsonProperty(\"year\") String year,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                              @JsonProperty(\"admin\") JsonAdaptedAdmin admin,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                              @JsonProperty(\"questions\") List\u003cJsonAdaptedQuestion\u003e questions,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                              @JsonProperty(\"exams\") ArrayList\u003cJsonAdaptedExam\u003e exams,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                              @JsonProperty(\"academic\") JsonAdaptedAcademic academic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.jsonAdaptedAdmin \u003d admin;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        if (questions !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            this.jsonAdaptedQuestions.addAll(questions);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (exams !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.jsonAdaptedExams.addAll(exams);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.jsonAdaptedAcademic \u003d academic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        school \u003d source.getSchool().school;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        year \u003d String.valueOf(source.getYear().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        jsonAdaptedAdmin \u003d new JsonAdaptedAdmin(source.getAdmin());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        jsonAdaptedQuestions.addAll(source.getQuestions().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(JsonAdaptedQuestion::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        jsonAdaptedExams.addAll(source.getExams().stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                .map(JsonAdaptedExam::new)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        jsonAdaptedAcademic \u003d new JsonAdaptedAcademic(source.getAcademic());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (school \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    School.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!School.isValidSchool(school)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        final School modelSchool \u003d new School(school);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        if (year \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    Year.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Year.isValidYear(year)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        final Year modelYear \u003d ParserUtil.parseYear(year);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Admin admin \u003d jsonAdaptedAdmin.toModelType();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        for (JsonAdaptedQuestion question : jsonAdaptedQuestions) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            questions.add(question.toModelType());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (JsonAdaptedExam exam : jsonAdaptedExams) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            exams.add(exam.toModelType());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic academic \u003d jsonAdaptedAcademic.toModelType();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return new Student(modelName, modelPhone, modelSchool, modelYear, admin, questions, exams, academic);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 25,
      "VaishakAnand": 11,
      "StopTakingAllTheNames": 20,
      "-": 67,
      "csiongn": 3,
      "hogantan": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonReeveStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class JsonReeveStorage implements ReeveStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonReeveStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public JsonReeveStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Optional\u003cReadOnlyReeve\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Optional\u003cReadOnlyReeve\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Optional\u003cJsonSerializableReeve\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                filePath, JsonSerializableReeve.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveAddressBook(ReadOnlyReeve addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyReeve)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveAddressBook(ReadOnlyReeve addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReeve(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "hogantan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableReeve.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "class JsonSerializableReeve {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Student list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public JsonSerializableReeve(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public JsonSerializableReeve(ReadOnlyReeve source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Reeve toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve reeve \u003d new Reeve();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (reeve.hasStudent(student)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            reeve.addStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return reeve;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 9,
      "-": 41,
      "hogantan": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ReeveStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents a storage for {@link Reeve}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public interface ReeveStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyReeve}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    Optional\u003cReadOnlyReeve\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    Optional\u003cReadOnlyReeve\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Saves the given {@link ReadOnlyReeve} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    void saveAddressBook(ReadOnlyReeve addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyReeve)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    void saveAddressBook(ReadOnlyReeve addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "hogantan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public interface Storage extends ReeveStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    Optional\u003cReadOnlyReeve\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    void saveAddressBook(ReadOnlyReeve addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "hogantan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ReeveStorage reeveStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StorageManager(ReeveStorage reeveStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.reeveStorage \u003d reeveStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return reeveStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Optional\u003cReadOnlyReeve\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return readAddressBook(reeveStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Optional\u003cReadOnlyReeve\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return reeveStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveAddressBook(ReadOnlyReeve addressBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        saveAddressBook(addressBook, reeveStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveAddressBook(ReadOnlyReeve addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeveStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "hogantan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w15-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getSortedStudentList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Toggle the display of student cards in the student list panel between admin and academic."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void handleAcademicPanel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        studentListPanel.toggleState();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (commandResult.isToggleStudentCard()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                handleAcademicPanel();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 191,
      "csiongn": 2,
      "hogantan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentAcademicCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StudentAcademicCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String FXML \u003d \"StudentAcademicListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label school;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private Label questions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label exams;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentAcademicCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        phone.setText(\"Phone: \" + student.getPhone().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        school.setText(\"School: \" + student.getSchool().school);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        year.setText(\"Year: \" + student.getYear());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        questions.setText(\"Questions:\\n\" + student.getFormattedQuestions());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        exams.setText(\"Examinations: \\n\" + student.getFormattedExams());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        attendance.setText(\"Attendance:\\n\" + student.getAcademic().getFormattedAttendance());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!(other instanceof StudentAcademicCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        StudentAcademicCard card \u003d (StudentAcademicCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 3,
      "StopTakingAllTheNames": 1,
      "-": 58,
      "csiongn": 1,
      "hogantan": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentAdminCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StudentAdminCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String FXML \u003d \"StudentAdminListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label school;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label fee;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label payment;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label details;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentAdminCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        phone.setText(\"Phone: \" + student.getPhone().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        school.setText(\"School: \" + student.getSchool().school);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        year.setText(\"Year: \" + student.getYear());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        venue.setText(\"Class Venue: \" + student.getAdmin().getClassVenue().venue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        time.setText(\"Class Time: \" + student.getAdmin().getClassTime().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        fee.setText(\"Fee: \" + student.getAdmin().getFee().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        payment.setText(\"Last Payment Date: \" + student.getAdmin().getPaymentDate().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        details.setText(\"Additional Details: \\n\" + student.getAdmin().getFormattedDetails());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!(other instanceof StudentAdminCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        StudentAdminCard card \u003d (StudentAdminCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 2,
      "-": 54,
      "csiongn": 1,
      "hogantan": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean state;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ListView\u003cStudent\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        personListView.setItems(studentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        state \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Toggles between StudentAdminCard and StudentAcademicCard."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toggleState() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        state \u003d !state;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        personListView.refresh(); //To show immediate result of toggle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (state) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    setGraphic(new StudentAdminCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    setGraphic(new StudentAcademicCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 63
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    background-color: #663B25; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-base: #663B25;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-control-inner-background: #663B25;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: #663B25;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-padding: 5 5 5 5;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: #d09a7b;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: #d09a7b;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     -fx-background-color: #D09A7B;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     -fx-background-color: derive(#663B25, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     -fx-border-color: black;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     -fx-border-width: 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": ".pane-with-border2 {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     -fx-background-color: #C38059;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     -fx-border-color: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     -fx-border-width: 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-border-color: derive(#663B25, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-border-color: derive(#663B25, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: #663B25;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  -fx-text-fill: #663B25;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: #663B25;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: #663B25;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: #663B25;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: derive(#663B25, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: transparent #663B25 transparent #663B25;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-prompt-text-fill: #494949;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background-color: transparent, #D09A7B, transparent, #D09A7B;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 311,
      "hogantan": 48
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    -fx-background: #663B25;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hogantan": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                     \u003cFont size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "hogantan": 5
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cfx:root height\u003d\"600.0\" minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Reeve\" type\u003d\"javafx.stage.Stage\" width\u003d\"450.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "             \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                                      \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                 \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" prefWidth\u003d\"119.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "hogantan": 22
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "hogantan": 2
    }
  },
  {
    "path": "src/main/resources/view/StudentAcademicListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" styleClass\u003d\"pane-with-border2\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cLabel fx:id\u003d\"school\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$school\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cLabel fx:id\u003d\"year\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$year\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \u003cLabel fx:id\u003d\"questions\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$questions\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cLabel fx:id\u003d\"exams\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$exams\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 1,
      "StopTakingAllTheNames": 1,
      "-": 26,
      "hogantan": 13
    }
  },
  {
    "path": "src/main/resources/view/StudentAdminListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" styleClass\u003d\"pane-with-border2\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cLabel fx:id\u003d\"school\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$school\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003cLabel fx:id\u003d\"year\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$year\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cLabel fx:id\u003d\"fee\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fee\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cLabel fx:id\u003d\"payment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$payment\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cLabel fx:id\u003d\"details\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$details\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hogantan": 43
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" style\u003d\"-fx-background-color: #663B25;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "hogantan": 2
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidStudentReeve.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"name\": \"Valid Student\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"school\": \"NUS High School\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"JC 2\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"Kent Ridge Road\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classTime\": \"1 1500-1700\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"12.01\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"20/12/2020\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [\"He\u0027s valid\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\" : []"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"name\": \"Student With Invalid Phone Field\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"school\": \"NUS High School\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"JC 2\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\": {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"Kent Ridge Road\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classTime\": \"1 1500-1700\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"12.01\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"20/12/2020\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [\"He\u0027s valid\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\":  []"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 17,
      "StopTakingAllTheNames": 4,
      "-": 6,
      "csiongn": 2
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidStudentReeve.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"name\": \"Student with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"school\": \"NUS High School\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"JC 2\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"SoC\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classTime\": \"3 1512-1722\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.03\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/03/2020\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [\"Just update if you going use for test:)\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : true,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 9,
      "StopTakingAllTheNames": 6,
      "-": 4,
      "csiongn": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicateStudentReeve.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"school\": \"Anderson Secondary\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"year\": \"Secondary 3\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"classTime\": \"5 1500-1700\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"additionalDetails\": [\"owesMoney\", \"friends\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"exams\" : [ {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"school\": \"Anderson Secondary\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"year\": \"Secondary 3\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"classTime\": \"5 1500-1700\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"additionalDetails\": [\"owesMoney\", \"friends\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"exams\" : [ {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 9,
      "VaishakAnand": 40,
      "StopTakingAllTheNames": 20,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidStudentReeve.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"phone\": \"9482424!invalid\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"school\": \"NUS High School\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"JC 2\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classTime\": \"1 1500-1700\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [\"Clever\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \" \","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 9,
      "StopTakingAllTheNames": 6,
      "-": 4,
      "csiongn": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalStudentsReeve.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Student values as in TypicalStudents#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "  \"students\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"Anderson Secondary\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"Secondary 3\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "      \"classTime\": \"5 1500-1700\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"additionalDetails\": [\"owesMoney\", \"friends\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \"exams\" : [ {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"Pei Hwa Secondary\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"Secondary 2\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "      \"classVenue\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "      \"classTime\": \"2 1230-1430\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"exams\" : [ {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \"examName\" : \"CA2\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \"examDate\" : \"19/9/2020\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \"score\" : \"73/100\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \"examName\" : \"CA1\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \"examDate\" : \"2/3/2020\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \"score\" : \"21/40\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"Catholic High\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"Secondary 5\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "      \"classVenue\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      \"classTime\": \"1 1500-1700\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"fee\": \"450.50\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"exams\" : [ {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"Methodist Girls School\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"Secondary 1\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      \"classVenue\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": "      \"classTime\": \"1 1700-1900\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"paymentDate\": \"28/2/2018\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"exams\" : [ {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"River Valley High\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"JC 2\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "      \"classVenue\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "csiongn"
        },
        "content": "      \"classTime\": \"1 1900-2100\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : true,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"Read your textbook\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : true,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"Read your textbook\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"exams\" : [ {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"Raffles Girls School\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"Secondary 2\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      \"classVenue\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "csiongn"
        },
        "content": "      \"classTime\": \"3 1200-1430\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \"exams\" : [ {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }}, {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    \"school\": \"Montford Secondary\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \"year\": \"Secondary 4\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \"admin\" : {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"classVenue\": \"311, Clementi Ave 2, #02-25\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "csiongn"
        },
        "content": "      \"classTime\": \"2 1000-1230\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"fee\": \"21.00\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"paymentDate\": \"21/05/2020\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "      \"additionalDetails\": [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    },"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    \"questions\": [ {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"What is Newton\u0027s Second Law?\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"status\" : false,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"question\" : \"How do you inverse a matrix?\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      \"solution\" : \"\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    } ],\"exams\" : [ {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"End of Year Examination 2020\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"7/11/2020\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"50/100\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examName\" : \"Mid Year Examination 2020\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"examDate\" : \"25/7/2020\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"score\" : \"20/30\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }],"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    \"academic\" : {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "      \"attendanceList\" : [ {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"date\" : \"14/04/1998\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"attendanceStatus\" : \"present\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        \"feedback\" : \"sleepy during lesson\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "      }]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 29,
      "VaishakAnand": 92,
      "StopTakingAllTheNames": 69,
      "-": 36,
      "csiongn": 13,
      "hogantan": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void containsIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(StringUtil.containsIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(StringUtil.containsIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Matches a partial word"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bbb ccc\", \"bb\")); // sentence contains word"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(StringUtil.containsIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(StringUtil.containsIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "csiongn": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDITIONAL_DETAILS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_VENUE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FEE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.storage.JsonReeveStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonReeveStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new JsonReeveStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonReeveStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new JsonReeveIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + SCHOOL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + YEAR_DESC_AMY + CLASS_VENUE_DESC_AMY + CLASS_TIME_DESC_AMY + FEE_DESC_AMY + PAYMENT_DATE_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + ADDITIONAL_DETAILS_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withQuestions().withExams().withAttendances().build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void getSortedPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getSortedStudentList().remove(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.equals(model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static class JsonReeveIoExceptionThrowingStub extends JsonReeveStorage {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        private JsonReeveIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public void saveAddressBook(ReadOnlyReeve addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 5,
      "VaishakAnand": 2,
      "StopTakingAllTheNames": 3,
      "-": 145,
      "csiongn": 4,
      "hogantan": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAttendanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class AddAttendanceCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Attendance validAttendance \u003d new Attendance(\"12/02/2020\", \"present\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            new Feedback(\"sleepy\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index testIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // both arguments null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddAttendanceCommand(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // one argument null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddAttendanceCommand(testIndex, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddAttendanceCommand(null, validAttendance));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withAttendances().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_PERSON, validAttendance);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withAttendances(validAttendance).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(AddAttendanceCommand.MESSAGE_SUCCESS, clone.getName(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                validAttendance);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(addAttendanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddAttendanceCommand command \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddAttendanceCommand(outOfBounds, validAttendance);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withAttendances().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddAttendanceCommand command \u003d new AddAttendanceCommand(INDEX_FIRST_PERSON, validAttendance);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withAttendances(validAttendance).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(AddAttendanceCommand.MESSAGE_SUCCESS, clone.getName(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                validAttendance);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBounds \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddAttendanceCommand command \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddAttendanceCommand(outOfBounds, validAttendance);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d new AddAttendanceCommand(INDEX_FIRST_PERSON, validAttendance);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(addAttendanceCommand.equals(addAttendanceCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different object -\u003e return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(addAttendanceCommand.equals(\"hello\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(addAttendanceCommand.equals(new AddAttendanceCommand(INDEX_FIRST_PERSON, validAttendance)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different index -\u003e return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(addAttendanceCommand.equals(new AddAttendanceCommand(INDEX_SECOND_PERSON, validAttendance)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different attendance -\u003e return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Attendance altAttendance \u003d new Attendance(\"17/02/2020\", \"absent\", new Feedback(\"sleepy\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(addAttendanceCommand.equals(new AddAttendanceCommand(INDEX_FIRST_PERSON, altAttendance)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStudent), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student studentInList \u003d model.getReeve().getStudentList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "hogantan": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_STUDENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public void setReeve(ReadOnlyReeve newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public ReadOnlyReeve getReeve() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public ObservableList\u003cStudent\u003e getSortedStudentList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        public void updateSortedStudentList(Comparator\u003c? super Student\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        final ArrayList\u003cStudent\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return personsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            personsAdded.add(student);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public ReadOnlyReeve getReeve() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new Reeve();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 156,
      "csiongn": 10,
      "hogantan": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddDetailCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class AddDetailCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    //@@author VaishakAnand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String TEST_DETAIL \u003d \"eats flies\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index testIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // both arguments null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddDetailCommand(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // one argument null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddDetailCommand(testIndex, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddDetailCommand(null, new Detail(TEST_DETAIL)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withDetails().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_DETAIL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddDetailCommand addAdditionalDetailCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddDetailCommand(INDEX_FIRST_PERSON, detail);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withDetails(TEST_DETAIL).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(AddDetailCommand.MESSAGE_SUCCESS, clone.getName(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                detail);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(addAdditionalDetailCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddDetailCommand command \u003d new AddDetailCommand(outOfBounds,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Detail(TEST_DETAIL));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_DETAIL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withDetails().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddDetailCommand command \u003d new AddDetailCommand(INDEX_FIRST_PERSON, detail);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withDetails(TEST_DETAIL).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(AddDetailCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                clone.getName(), detail);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBounds \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_DETAIL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddDetailCommand invalidCommand \u003d new AddDetailCommand(outOfBounds, detail);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail testDetail \u003d new Detail(TEST_DETAIL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddDetailCommand addAdditionalDetailCommand \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new AddDetailCommand(INDEX_FIRST_PERSON, testDetail);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(addAdditionalDetailCommand.equals(addAdditionalDetailCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different object -\u003e return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(addAdditionalDetailCommand.equals(\"hello\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(addAdditionalDetailCommand.equals(new AddDetailCommand(INDEX_FIRST_PERSON, testDetail)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different index -\u003e return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(addAdditionalDetailCommand.equals(new AddDetailCommand(INDEX_SECOND_PERSON, testDetail)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different detail -\u003e return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail altDetail \u003d new Detail(\"he watches birds\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(addAdditionalDetailCommand.equals(new AddDetailCommand(INDEX_FIRST_PERSON, altDetail)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 129,
      "StopTakingAllTheNames": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExamCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Contains integration tests (interaction with the Model, AddExamCommand and DeleteExamCommand)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * and unit tests for ExamCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class AddExamCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Exam dummyExam \u003d new Exam(\"Mid Year 2020\", \"26/7/2020\", new Score(\"26/50\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void constructors_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // both arguments null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new AddExamCommand(null, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(null, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // one argument null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new AddExamCommand(INDEX_FIRST_PERSON, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new AddExamCommand(null, dummyExam));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(null, INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(INDEX_FIRST_PERSON, null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withExams().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddExamCommand addExamCommand \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new AddExamCommand(INDEX_FIRST_PERSON, dummyExam);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withExams(dummyExam).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(AddExamCommand.MESSAGE_EXAM_ADDED_SUCCESS, expectedStudent.getName(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                dummyExam);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandSuccess(addExamCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddExamCommand command \u003d new AddExamCommand(outOfBounds,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                dummyExam);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withExams().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddExamCommand command \u003d new AddExamCommand(INDEX_FIRST_PERSON, dummyExam);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withExams(dummyExam).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(AddExamCommand.MESSAGE_EXAM_ADDED_SUCCESS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                expectedStudent.getName(), dummyExam);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Index outOfBounds \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddExamCommand invalidCommand \u003d new AddExamCommand(outOfBounds, dummyExam);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddExamCommand addExamCommand \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new AddExamCommand(INDEX_FIRST_PERSON, dummyExam);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(addExamCommand, addExamCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different object -\u003e return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertNotEquals(\"hello\", addExamCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(addExamCommand, new AddExamCommand(INDEX_FIRST_PERSON, dummyExam));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different index -\u003e return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertNotEquals(addExamCommand, new AddExamCommand(INDEX_SECOND_PERSON, dummyExam));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different exam -\u003e return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Exam altExam \u003d new Exam(\"Alt Exam\", \"12/12/2020\", new Score(\"1/1\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertNotEquals(addExamCommand, new AddExamCommand(INDEX_FIRST_PERSON, altExam));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 3,
      "hogantan": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddQuestionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.AddQuestionCommand.MESSAGE_DUPLICATE_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddQuestionCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_QUESTION \u003d \"What is 1 + 1?\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index testIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // both arguments null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQuestionCommand(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // one argument null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQuestionCommand(testIndex, null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddQuestionCommand(null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new UnsolvedQuestion(TEST_QUESTION)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withQuestions().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion question \u003d new UnsolvedQuestion(TEST_QUESTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddQuestionCommand addQuestionCommand \u003d new AddQuestionCommand(INDEX_FIRST_PERSON, question);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withQuestions(TEST_QUESTION).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(AddQuestionCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                clone.getName(), question);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(addQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion question \u003d new UnsolvedQuestion(TEST_QUESTION);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddQuestionCommand invalidCommand \u003d new AddQuestionCommand(outOfBounds, question);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void execute_unsolvedQuestionAlreadyExists_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Student asker \u003d new StudentBuilder(ALICE).withQuestions(TEST_QUESTION).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        model.setStudent(model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased()), asker);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        AddQuestionCommand invalidCommand \u003d new AddQuestionCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new UnsolvedQuestion(TEST_QUESTION));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void execute_solvedQuestionAlreadyExists_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student asker \u003d new StudentBuilder(ALICE).withSolved(DEFAULT_SOLUTION, TEST_QUESTION).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        model.setStudent(model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased()), asker);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        AddQuestionCommand invalidCommand \u003d new AddQuestionCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new UnsolvedQuestion(TEST_QUESTION));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_DUPLICATE_QUESTION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion question \u003d new UnsolvedQuestion(TEST_QUESTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withQuestions().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddQuestionCommand addQuestionCommand \u003d new AddQuestionCommand(INDEX_FIRST_PERSON, question);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withQuestions(TEST_QUESTION).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(AddQuestionCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                expectedStudent.getName(), question);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(addQuestionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion question \u003d new UnsolvedQuestion(TEST_QUESTION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        AddQuestionCommand invalidCommand \u003d new AddQuestionCommand(INDEX_SECOND_PERSON, question);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion testQuestion \u003d new UnsolvedQuestion(TEST_QUESTION);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AddQuestionCommand addQuestionCommand \u003d new AddQuestionCommand(INDEX_FIRST_PERSON, testQuestion);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addQuestionCommand.equals(addQuestionCommand));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addQuestionCommand.equals(new AddQuestionCommand(INDEX_FIRST_PERSON, testQuestion)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addQuestionCommand.equals(new AddQuestionCommand(INDEX_SECOND_PERSON, testQuestion)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different question -\u003e return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion altQuestion \u003d new UnsolvedQuestion(\"Why do birds fly?\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addQuestionCommand.equals(new AddQuestionCommand(INDEX_FIRST_PERSON, altQuestion)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 3,
      "StopTakingAllTheNames": 31,
      "-": 104,
      "csiongn": 5,
      "hogantan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setReeve(new Reeve());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "hogantan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different toggle value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different toggle value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "hogantan": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_FEEDBACK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCORE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String VALID_SCHOOL_AMY \u003d \"NUS High School\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String VALID_SCHOOL_BOB \u003d \"Hwa Chong Institution\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final SchoolType VALID_SCHOOL_TYPE_AMY \u003d SchoolType.SECONDARY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final Integer VALID_SCHOOL_LEVEL_AMY \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String VALID_YEAR_AMY \u003d \"Secondary 2\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final SchoolType VALID_SCHOOL_TYPE_BOB \u003d SchoolType.SECONDARY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final Integer VALID_SCHOOL_LEVEL_BOB \u003d 4;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final String VALID_YEAR_BOB \u003d \"Secondary 4\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_CLASS_TIME_AMY \u003d \"2 1200-1300\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_CLASS_TIME_BOB \u003d \"5 0900-1100\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_CLASS_VENUE_AMY \u003d \"347 Woodlands Ave 3, Singapore 730347\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_CLASS_VENUE_BOB \u003d \"347 Woodlands Ave 3, Singapore 730347\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_FEE_AMY \u003d \"40\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_FEE_BOB \u003d \"55\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_PAYMENT_DATE_AMY \u003d \"27/10/2020\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_PAYMENT_DATE_BOB \u003d \"10/09/2020\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_ADDITIONAL_DETAILS_AMY \u003d \"Clever\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String VALID_ADDITIONAL_DETAILS_BOB \u003d \"Hardworking\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String VALID_QUESTION_AMY \u003d \"How is current calculated from resistance?\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String VALID_QUESTION_BOB \u003d \"What is hemoglobin?\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String VALID_EXAM_NAME_AMY \u003d \"Mid Year 2020\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String VALID_EXAM_NAME_BOB \u003d \"End of Year 2020\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String VALID_EXAM_DATE_AMY \u003d \"26/7/2020\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String VALID_EXAM_DATE_BOB \u003d \"5/11/2020\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String VALID_EXAM_SCORE_AMY \u003d \"26/50\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String VALID_EXAM_SCORE_BOB \u003d \"50/50\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALID_ATTENDANCE_DATE_AMY \u003d \"27/10/2020\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALID_ATTENDANCE_DATE_BOB \u003d \"19/4/2009\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALID_ATTENDANCE_STATUS_AMY \u003d \"present\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALID_ATTENDANCE_STATUS_BOB \u003d \"absent\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALID_ATTENDANCE_FEEDBACK_AMY \u003d \"attentive\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String VALID_ATTENDANCE_FEEDBACK_BOB \u003d \"sick\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SCHOOL_DESC_AMY \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SCHOOL_DESC_BOB \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String YEAR_DESC_AMY \u003d \" \" + PREFIX_YEAR + VALID_YEAR_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String YEAR_DESC_BOB \u003d \" \" + PREFIX_YEAR + VALID_YEAR_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String CLASS_VENUE_DESC_AMY \u003d \" \" + PREFIX_VENUE + VALID_CLASS_VENUE_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String CLASS_VENUE_DESC_BOB \u003d \" \" + PREFIX_VENUE + VALID_CLASS_VENUE_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String CLASS_TIME_DESC_AMY \u003d \" \" + PREFIX_TIME + VALID_CLASS_TIME_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String CLASS_TIME_DESC_BOB \u003d \" \" + PREFIX_TIME + VALID_CLASS_TIME_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String FEE_DESC_AMY \u003d \" \" + PREFIX_FEE + VALID_FEE_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String FEE_DESC_BOB \u003d \" \" + PREFIX_FEE + VALID_FEE_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String PAYMENT_DATE_DESC_AMY \u003d \" \" + PREFIX_PAYMENT + VALID_PAYMENT_DATE_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String PAYMENT_DATE_DESC_BOB \u003d \" \" + PREFIX_PAYMENT + VALID_PAYMENT_DATE_BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String ADDITIONAL_DETAILS_DESC_AMY \u003d \" \" + PREFIX_DETAILS + VALID_ADDITIONAL_DETAILS_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String ADDITIONAL_DETAILS_DESC_BOB \u003d \" \" + PREFIX_DETAILS + VALID_ADDITIONAL_DETAILS_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String QUESTION_DESC_AMY \u003d \" \" + PREFIX_TEXT + VALID_QUESTION_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String ADDITIONAL_DETAIL_DESC_AMY \u003d \" \" + PREFIX_TEXT + VALID_ADDITIONAL_DETAILS_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String QUESTION_MATH \u003d \"What is 1 + 1?\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String QUESTION_PHYSICS \u003d \"How does Newton\u0027s Second Law work?\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String QUESTION_EMO \u003d \"What is the point of life?\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String[] TEST_QUESTIONS \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            new String[] {QUESTION_MATH, QUESTION_PHYSICS, QUESTION_EMO};"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String EXAM_DESC_AMY \u003d \" \" + PREFIX_EXAM_NAME + VALID_EXAM_NAME_AMY + \" \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + VALID_EXAM_DATE_AMY + \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + VALID_EXAM_SCORE_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String EXAM_DESC_BOB \u003d \" \" + PREFIX_EXAM_NAME + VALID_EXAM_NAME_BOB + \" \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + VALID_EXAM_DATE_BOB + \" \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + VALID_EXAM_SCORE_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String ATTENDANCE_DESC_AMY \u003d \" \" + PREFIX_ATTENDANCE_DATE + VALID_ATTENDANCE_DATE_AMY + \" \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_STATUS + VALID_ATTENDANCE_STATUS_AMY + \" \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_FEEDBACK + VALID_ATTENDANCE_FEEDBACK_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final String ATTENDANCE_DESC_BOB \u003d \" \" + PREFIX_ATTENDANCE_DATE + VALID_ATTENDANCE_DATE_BOB + \" \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_STATUS + VALID_ATTENDANCE_STATUS_BOB + \" \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            + PREFIX_ATTENDANCE_FEEDBACK + VALID_ATTENDANCE_FEEDBACK_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_SCHOOL_DESC \u003d \" \" + PREFIX_SCHOOL; // empty string not allowed for schools"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String INVALID_YEAR_DESC \u003d \" \" + PREFIX_YEAR + \"$4\"; // \u0027$\u0027 not allowed in year"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_VENUE_DESC \u003d \" \" + PREFIX_VENUE + \"\"; // only empty venues are not allowed"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"1 @100\"; // \u0027@\u0027 not allowed in times"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_FEE_DESC \u003d \" \" + PREFIX_FEE + \"$20\"; // \u0027$\u0027 allowed for schools"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    // \u0027alphabets\u0027 not allowed in payment date"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_PAYMENT_DESC \u003d \" \" + PREFIX_PAYMENT + \"alphabets\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    // \u0027*\u0027 not allowed in details"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_ADDITIONAL_DETAIL_DESC \u003d \" \" + PREFIX_DETAILS + \"hubby*\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    // empty string not allowed for exam names"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_EXAM_NAME_DESC \u003d \" \" + PREFIX_EXAM_NAME + \" \" + \" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + VALID_EXAM_DATE_AMY + \" \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + VALID_EXAM_SCORE_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    // \u0027alphabets\u0027 not allowed in exam date"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_EXAM_DATE_DESC \u003d \" \" + PREFIX_EXAM_NAME + VALID_EXAM_NAME_AMY + \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + \"alphabets\" + \" \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + VALID_EXAM_SCORE_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    // first int of scores should be \u003c\u003d to second int"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_EXAM_SCORE_DESC_MORE \u003d \" \" + PREFIX_EXAM_NAME + VALID_EXAM_NAME_AMY + \" \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + VALID_EXAM_DATE_AMY + \" \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + \"100/50\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    // both ints of scores cannot not be negative"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final String INVALID_EXAM_SCORE_DESC_NEGATIVE \u003d \" \" + PREFIX_EXAM_NAME + VALID_EXAM_NAME_AMY + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_EXAM_DATE + VALID_EXAM_DATE_AMY + \" \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            + PREFIX_SCORE + \"-50/-100\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve expectedReeve \u003d new Reeve(actualModel.getReeve());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getSortedStudentList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedReeve, actualModel.getReeve());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getSortedStudentList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getSortedStudentList().size());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student student \u003d model.getSortedStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(1, model.getSortedStudentList().size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 21,
      "VaishakAnand": 16,
      "StopTakingAllTheNames": 9,
      "-": 105,
      "csiongn": 12,
      "hogantan": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteAttendanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.DeleteAttendanceCommand.MESSAGE_INVALID_ATTENDANCE_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class DeleteAttendanceCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_FIRST_STUDENT \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final LocalDate TEST_DATE \u003d model.getFilteredStudentList().get(0)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .getAttendance().get(0).getLessonDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String USER_INPUT_DATE \u003d model.getFilteredStudentList().get(0)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .getAttendance().get(0).getUserInputDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final Attendance validAttendance \u003d new Attendance(USER_INPUT_DATE, \"present\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            new Feedback(\"sleepy\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // both arguments null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteAttendanceCommand(null, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // one argument null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteAttendanceCommand(null, TEST_DATE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteAttendanceCommand(TEST_INDEX_FIRST_STUDENT, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validStudentIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withAttendances(validAttendance).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand deleteAttendanceCommand \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteAttendanceCommand(TEST_INDEX_FIRST_STUDENT, TEST_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withAttendances().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAttendanceCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                clone.getName(), USER_INPUT_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(deleteAttendanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand command \u003d new DeleteAttendanceCommand(outOfBoundsStudentIndex,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_DATE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidDateUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalDate invalidDate \u003d TEST_DATE.plusDays(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand invalidCommand \u003d new DeleteAttendanceCommand(TEST_INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                invalidDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_ATTENDANCE_DATE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validStudentIndexFilteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Model newModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(newModel, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d newModel.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withAttendances(validAttendance).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        newModel.setStudent(asker, clone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand command \u003d new DeleteAttendanceCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_DATE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withAttendances().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteAttendanceCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                clone.getName(), USER_INPUT_DATE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(newModel.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(command, newModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand invalidCommand \u003d new DeleteAttendanceCommand(outOfBoundsStudentIndex,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_DATE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidDateFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Model newModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(newModel, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalDate invalidDate \u003d TEST_DATE.minusMonths(1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand invalidCommand \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteAttendanceCommand(TEST_INDEX_FIRST_STUDENT, invalidDate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, newModel, MESSAGE_INVALID_ATTENDANCE_DATE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand deleteAdditionalDetailCommand \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteAttendanceCommand(INDEX_FIRST_PERSON, TEST_DATE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(deleteAdditionalDetailCommand.equals(deleteAdditionalDetailCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different object -\u003e return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(deleteAdditionalDetailCommand.equals(\"hello\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(deleteAdditionalDetailCommand.equals(new DeleteAttendanceCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_DATE)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different student index -\u003e return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(deleteAdditionalDetailCommand.equals(new DeleteAttendanceCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_DATE)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different date -\u003e return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        LocalDate altDate \u003d TEST_DATE.plusDays(1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(deleteAdditionalDetailCommand.equals(new DeleteAttendanceCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                altDate)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student studentToDelete \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student studentToDelete \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getReeve().getStudentList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(model.getSortedStudentList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 4,
      "-": 93,
      "csiongn": 4,
      "hogantan": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteDetailCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.DeleteDetailCommand.MESSAGE_BAD_DETAIL_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class DeleteDetailCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    //@@author VaishakAnand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_FIRST_STUDENT \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_SECOND_STUDENT \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_FIRST_DETAIL \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_SECOND_DETAIL \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String TEST_DETAIL \u003d \"eats flies\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // both arguments null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteDetailCommand(null, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // one argument null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteDetailCommand(null, TEST_INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteDetailCommand(TEST_INDEX_FIRST_STUDENT, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validStudentIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withDetails(TEST_DETAIL).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_DETAIL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand deleteAdditionalDetailCommand \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteDetailCommand(TEST_INDEX_FIRST_STUDENT, TEST_INDEX_FIRST_DETAIL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withDetails().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteDetailCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                clone.getName(), detail);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(deleteAdditionalDetailCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand command \u003d new DeleteDetailCommand(outOfBoundsStudentIndex,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_DETAIL);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidDetailIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsDetailIndex \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                Index.fromOneBased(model.getSortedStudentList().get(0).getDetails().size() + 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand invalidCommand \u003d new DeleteDetailCommand(TEST_INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                outOfBoundsDetailIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_BAD_DETAIL_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_DETAIL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withDetails(TEST_DETAIL).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand command \u003d new DeleteDetailCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_DETAIL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withDetails().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteDetailCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                clone.getName(), detail);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand invalidCommand \u003d new DeleteDetailCommand(outOfBoundsStudentIndex,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_DETAIL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidDetailIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsDetailIndex \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                Index.fromOneBased(model.getSortedStudentList().get(0).getDetails().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand invalidCommand \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteDetailCommand(TEST_INDEX_FIRST_STUDENT, outOfBoundsDetailIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_BAD_DETAIL_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail testDetail \u003d new Detail(TEST_DETAIL);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand deleteAdditionalDetailCommand \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new DeleteDetailCommand(INDEX_FIRST_PERSON, TEST_INDEX_FIRST_DETAIL);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(deleteAdditionalDetailCommand.equals(deleteAdditionalDetailCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different object -\u003e return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(deleteAdditionalDetailCommand.equals(\"hello\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(deleteAdditionalDetailCommand.equals(new DeleteDetailCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_DETAIL)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different student index -\u003e return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(deleteAdditionalDetailCommand.equals(new AddDetailCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                testDetail)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different detail index -\u003e return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail altDetail \u003d new Detail(\"he watches birds\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(deleteAdditionalDetailCommand.equals(new DeleteDetailCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_SECOND_DETAIL)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 156,
      "StopTakingAllTheNames": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteExamCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeleteExamCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final Index TEST_INDEX_FIRST_EXAM \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final Index TEST_INDEX_SECOND_EXAM \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Exam dummyExam \u003d new Exam(\"Mid Year 2020\", \"26/7/2020\", new Score(\"26/50\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void constructors_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // both arguments null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(null, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // one argument null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(null, INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(INDEX_FIRST_PERSON, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_validStudentIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withExams(dummyExam).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand deleteExamCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(INDEX_FIRST_PERSON, TEST_INDEX_FIRST_EXAM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withExams().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExamCommand.MESSAGE_EXAM_DELETED_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                expectedStudent.getName(), dummyExam);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandSuccess(deleteExamCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand command \u003d new DeleteExamCommand(outOfBoundsStudentIndex,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                TEST_INDEX_FIRST_EXAM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_invalidExamIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBoundsExamIndex \u003d Index.fromOneBased(model.getSortedStudentList().get(0).getExams().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand invalidCommand \u003d new DeleteExamCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                outOfBoundsExamIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandFailure(invalidCommand, model, DeleteExamCommand.MESSAGE_MISSING_EXAM_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_validStudentIndexFilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withExams(dummyExam).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand command \u003d new DeleteExamCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                TEST_INDEX_FIRST_EXAM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withExams().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExamCommand.MESSAGE_EXAM_DELETED_SUCCESS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                clone.getName(), dummyExam);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand invalidCommand \u003d new DeleteExamCommand(outOfBoundsStudentIndex,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                TEST_INDEX_FIRST_EXAM);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_invalidExamIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBoundsExamIndex \u003d Index.fromOneBased(model.getSortedStudentList().get(0).getExams().size() + 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand invalidCommand \u003d new DeleteExamCommand(TEST_INDEX_FIRST_EXAM,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                outOfBoundsExamIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandFailure(invalidCommand, model, DeleteExamCommand.MESSAGE_MISSING_EXAM_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand deleteExamCommand \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new DeleteExamCommand(INDEX_FIRST_PERSON, TEST_INDEX_FIRST_EXAM);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(deleteExamCommand, deleteExamCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different object -\u003e return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertNotEquals(\"hello\", deleteExamCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(deleteExamCommand, new DeleteExamCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                TEST_INDEX_FIRST_EXAM));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different student index -\u003e return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(deleteExamCommand.equals(new DeleteExamCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                TEST_INDEX_FIRST_EXAM)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // different exam index -\u003e return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(deleteExamCommand.equals(new DeleteExamCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                TEST_INDEX_SECOND_EXAM)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 5,
      "hogantan": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteQuestionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEST_QUESTIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteQuestionCommand.MESSAGE_BAD_QUESTION_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteQuestionCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteQuestionCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index questionIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // both null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteQuestionCommand(null, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // one null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteQuestionCommand(null, questionIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteQuestionCommand(INDEX_FIRST_PERSON, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndicesUnsolved_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withQuestions(TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index questionIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Question removed \u003d clone.getQuestions().get(questionIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expected \u003d deleteQuestion(questionIndex, clone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expected);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand command \u003d new DeleteQuestionCommand(INDEX_FIRST_PERSON, questionIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, expected.getName(), removed);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndicesSolved_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withSolved(DEFAULT_SOLUTION, TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index questionIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Question removed \u003d clone.getQuestions().get(questionIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expected \u003d deleteQuestion(questionIndex, clone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expected);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand command \u003d new DeleteQuestionCommand(INDEX_FIRST_PERSON, questionIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, expected.getName(), removed);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndicesFilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withSolved(DEFAULT_SOLUTION, TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Index questionIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Question removed \u003d clone.getQuestions().get(questionIndex.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expected \u003d deleteQuestion(questionIndex, clone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expected);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand command \u003d new DeleteQuestionCommand(INDEX_FIRST_PERSON, questionIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, expected.getName(), removed);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidStudentUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBounds \u003d Index.fromZeroBased(model.getSortedStudentList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand invalidCommand \u003d new DeleteQuestionCommand(outOfBounds, question);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidStudentFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand invalidCommand \u003d new DeleteQuestionCommand(INDEX_SECOND_PERSON, question);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidQuestionIndex_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withSolved(DEFAULT_SOLUTION, TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index questionIndex \u003d Index.fromZeroBased(TEST_QUESTIONS.length);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand command \u003d new DeleteQuestionCommand(INDEX_FIRST_PERSON, questionIndex);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, model, MESSAGE_BAD_QUESTION_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteQuestionCommand command \u003d new DeleteQuestionCommand(INDEX_FIRST_PERSON, question);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // same obj -\u003e return true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // same fields -\u003e return true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(command.equals(new DeleteQuestionCommand(INDEX_FIRST_PERSON, question)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different fields -\u003e return false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(command.equals(new DeleteQuestionCommand(INDEX_SECOND_PERSON, question)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(command.equals(new DeleteQuestionCommand(INDEX_FIRST_PERSON, Index.fromOneBased(2))));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private Student deleteQuestion(Index index, Student toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e(toCopy.getQuestions());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        questions.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Student(toCopy.getName(), toCopy.getPhone(), toCopy.getSchool(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                toCopy.getYear(), toCopy.getAdmin(), questions, toCopy.getExams(), toCopy.getAcademic());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 3,
      "VaishakAnand": 1,
      "StopTakingAllTheNames": 8,
      "-": 129,
      "csiongn": 5,
      "hogantan": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FEE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAdminDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.EditAdminDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Reeve(model.getReeve()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        expectedModel.setStudent(model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased()), editedStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getSortedStudentList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student lastStudent \u003d model.getSortedStudentList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        StudentBuilder personInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student editedStudent \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).withFee(VALID_FEE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder(editedStudent).withFee(VALID_FEE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Reeve(model.getReeve()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditStudentDescriptor(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student editedStudent \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Reeve(model.getReeve()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student studentInSortedList \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInSortedList).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withFee(VALID_FEE_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptorBuilder().withFee(VALID_FEE_BOB).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Reeve(model.getReeve()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        expectedModel.setStudent(model.getSortedStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student firstStudent \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student studentInList \u003d model.getReeve().getStudentList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder().build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getReeve().getStudentList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptorBuilder().build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptorBuilder().build());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor copyStudentDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyStudentDescriptor,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptorBuilder().build());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptorBuilder().build())));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditAdminDescriptorBuilder().build())));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 2,
      "VaishakAnand": 36,
      "-": 125,
      "csiongn": 9,
      "hogantan": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditDetailCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.DeleteDetailCommand.MESSAGE_BAD_DETAIL_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class EditDetailCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    //@@author VaishakAnand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_FIRST_STUDENT \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_SECOND_STUDENT \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_FIRST_DETAIL \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Index TEST_INDEX_SECOND_DETAIL \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String TEST_CORRECT_DETAIL \u003d \"eats flies\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String TEST_WRONG_DETAIL \u003d \"drinks flies\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // all 3 arguments null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(null, null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // 2 arguments null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(TEST_INDEX_FIRST_STUDENT, null, null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(null, TEST_INDEX_FIRST_DETAIL, null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(null,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        null, new Detail(TEST_CORRECT_DETAIL)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // 1 argument null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(TEST_INDEX_FIRST_STUDENT, TEST_INDEX_FIRST_DETAIL, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(TEST_INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        null, new Detail(TEST_CORRECT_DETAIL)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(null,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        TEST_INDEX_FIRST_DETAIL, new Detail(TEST_CORRECT_DETAIL)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validStudentIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withDetails(TEST_WRONG_DETAIL).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_CORRECT_DETAIL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand editAdditionalDetailCommand \u003d new EditDetailCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_STUDENT, TEST_INDEX_FIRST_DETAIL, detail);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(ALICE).withDetails(TEST_CORRECT_DETAIL).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(EditDetailCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                clone.getName(), detail);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(editAdditionalDetailCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_CORRECT_DETAIL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand invalidCommand \u003d new EditDetailCommand("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                outOfBoundsStudentIndex, TEST_INDEX_FIRST_DETAIL, detail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidDetailIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsDetailIndex \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                Index.fromOneBased(model.getSortedStudentList().get(0).getDetails().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_CORRECT_DETAIL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand invalidCommand \u003d new EditDetailCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_STUDENT, outOfBoundsDetailIndex, detail);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_BAD_DETAIL_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_validStudentIndexFilteredList_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withDetails(TEST_WRONG_DETAIL).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_CORRECT_DETAIL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand editAdditionalDetailCommand \u003d new EditDetailCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_STUDENT, TEST_INDEX_FIRST_DETAIL, detail);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BENSON).withDetails(TEST_CORRECT_DETAIL).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(EditDetailCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                clone.getName(), detail);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandSuccess(editAdditionalDetailCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsStudentIndex \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_CORRECT_DETAIL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand invalidCommand \u003d new EditDetailCommand("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                outOfBoundsStudentIndex, TEST_INDEX_FIRST_DETAIL, detail);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void execute_invalidDetailIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index outOfBoundsDetailIndex \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                Index.fromOneBased(model.getSortedStudentList().get(0).getDetails().size() + 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail detail \u003d new Detail(TEST_CORRECT_DETAIL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand invalidCommand \u003d new EditDetailCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_STUDENT, outOfBoundsDetailIndex, detail);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertCommandFailure(invalidCommand, model, MESSAGE_BAD_DETAIL_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Detail testDetail \u003d new Detail(TEST_CORRECT_DETAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand editAdditionalDetailCommand \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new EditDetailCommand(TEST_INDEX_FIRST_STUDENT, TEST_INDEX_FIRST_DETAIL, testDetail);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same object -\u003e return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(editAdditionalDetailCommand.equals(editAdditionalDetailCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different object -\u003e return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(editAdditionalDetailCommand.equals(\"hello\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same fields -\u003e return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(editAdditionalDetailCommand.equals(new EditDetailCommand(TEST_INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_DETAIL, testDetail)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different student index -\u003e return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(editAdditionalDetailCommand.equals(new EditDetailCommand(TEST_INDEX_SECOND_STUDENT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_DETAIL, testDetail)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different detail index -\u003e return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(editAdditionalDetailCommand.equals(new EditDetailCommand(TEST_INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_SECOND_DETAIL, testDetail)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different detail -\u003e return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(editAdditionalDetailCommand.equals(new EditDetailCommand(TEST_INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                TEST_INDEX_FIRST_DETAIL, new Detail(TEST_WRONG_DETAIL))));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 178,
      "StopTakingAllTheNames": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_LEVEL_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_TYPE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different school -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withSchool(VALID_SCHOOL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(VALID_SCHOOL_TYPE_AMY, VALID_SCHOOL_LEVEL_AMY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "csiongn": 5,
      "hogantan": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hogantan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.YearMatchPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.FindStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor firstDescriptor \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new FindStudentDescriptorBuilder().withNamePredicate(firstPredicate).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor secondDescriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new FindStudentDescriptorBuilder().withNamePredicate(secondPredicate).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand command \u003d new FindCommand(new FindStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withNamePredicate(predicate).build());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getSortedStudentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand command \u003d new FindCommand(new FindStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withNamePredicate(predicate).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getSortedStudentList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void execute_multiplePredicates_oneStudentsFound() throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate schoolPredicate \u003d prepareSchoolPredicate(\"Girls School\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        YearMatchPredicate yearMatchPredicate \u003d prepareYearPredicate(SchoolType.SECONDARY, 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cPredicate\u003cStudent\u003e\u003e predicates \u003d Arrays.asList(namePredicate,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                schoolPredicate, yearMatchPredicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Predicate\u003cStudent\u003e consolidatedPredicates \u003d consolidatePredicates(predicates);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(consolidatedPredicates);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor descriptor \u003d new FindStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withNamePredicate(namePredicate).withSchoolPredicate(schoolPredicate)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYearPredicate(yearMatchPredicate).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(Arrays.asList(FIONA), model.getSortedStudentList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void execute_multiplePredicates_noStudentFound() throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate schoolPredicate \u003d prepareSchoolPredicate(\"Girls School\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        YearMatchPredicate yearMatchPredicate \u003d prepareYearPredicate(SchoolType.SECONDARY, 3);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cPredicate\u003cStudent\u003e\u003e predicates \u003d Arrays.asList(namePredicate,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                schoolPredicate, yearMatchPredicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Predicate\u003cStudent\u003e consolidatedPredicates \u003d consolidatePredicates(predicates);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(consolidatedPredicates);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor descriptor \u003d new FindStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withNamePredicate(namePredicate).withSchoolPredicate(schoolPredicate)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYearPredicate(yearMatchPredicate).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(), model.getSortedStudentList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses {@code userInput} into a {@code SchoolContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private SchoolContainsKeywordsPredicate prepareSchoolPredicate(String userInput) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new SchoolContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses {@code userInput} into a {@code YearMatchPredicate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private YearMatchPredicate prepareYearPredicate(SchoolType schoolType, Integer level) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Year year \u003d new Year(schoolType, level);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new YearMatchPredicate(year);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses {@code List\u003cPredicate\u003cStudent\u003e\u003e} into a single {@code Predicate\u003cStudent\u003e}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Predicate\u003cStudent\u003e consolidatePredicates(List\u003cPredicate\u003cStudent\u003e\u003e predicates) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Predicate\u003cStudent\u003e identity \u003d student -\u003e true; // identity: returns the same predicate when composed with it"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return predicates.stream().reduce(identity, Predicate::and); // consolidates all predicates"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 5,
      "-": 66,
      "csiongn": 86,
      "hogantan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hogantan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "hogantan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OverdueCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.model.student.admin.Fee.FREE_OF_CHARGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_FEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.OverdueFeePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class OverdueCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final DateTimeFormatter FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/yy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void execute_positiveFee() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // one student with overdue fees"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int studentsWhoHaveNotPaid \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Model model \u003d getDateAdjustedModel(studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(new OverdueFeePredicate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertCommandSuccess(new OverdueCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // multiple students with overdue fees"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        studentsWhoHaveNotPaid \u003d 3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        model \u003d getDateAdjustedModel(studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(new OverdueFeePredicate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertCommandSuccess(new OverdueCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // no students with overdue fees"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        studentsWhoHaveNotPaid \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        model \u003d getDateAdjustedModel(studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(new OverdueFeePredicate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertCommandSuccess(new OverdueCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void execute_freeFee() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int freeloaders \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Model model \u003d getFeeAdjustedModel(freeloaders);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int studentsWhoHaveNotPaid \u003d model.getSortedStudentList().size() - freeloaders;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedModel.updateFilteredStudentList(new OverdueFeePredicate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertCommandSuccess(new OverdueCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        freeloaders \u003d 3;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        model \u003d getFeeAdjustedModel(freeloaders);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        studentsWhoHaveNotPaid \u003d model.getSortedStudentList().size() - freeloaders;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, studentsWhoHaveNotPaid);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedModel.updateFilteredStudentList(new OverdueFeePredicate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertCommandSuccess(new OverdueCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns a Model with {@code limit} number of students with overdue fees."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static Model getDateAdjustedModel(int oneBasedLimit) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Reeve reeve \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int size \u003d reeve.getStudentList().size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            Student toReplace \u003d reeve.getStudentList().get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            LocalDate date;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            if (i \u003c oneBasedLimit) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                date \u003d LocalDate.now().minusMonths(1).minusDays(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                date \u003d LocalDate.now().minusMonths(1).plusDays(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            Student replacement \u003d new StudentBuilder(toReplace).withPaymentDate(date.format(FORMAT)).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            reeve.setStudent(toReplace, replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new ModelManager(reeve, new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     * Returns a Model with {@code limit} number of students with no fees."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static Model getFeeAdjustedModel(int oneBasedLimit) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Reeve reeve \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        int size \u003d reeve.getStudentList().size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String date \u003d LocalDate.now().minusMonths(1).minusDays(1).format(FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            Student toReplace \u003d reeve.getStudentList().get(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            String fee;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            if (i \u003c oneBasedLimit) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                fee \u003d FREE_OF_CHARGE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                fee \u003d DEFAULT_FEE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            Student replacement \u003d new StudentBuilder(toReplace).withFee(fee).withPaymentDate(date).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            reeve.setStudent(toReplace, replacement);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return new ModelManager(reeve, new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 4,
      "StopTakingAllTheNames": 110,
      "hogantan": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        LocalDate date1 \u003d LocalDate.of(2020, 11, 3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        LocalDate date2 \u003d LocalDate.of(2020, 11, 4);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ScheduleCommand scheduleCommand1 \u003d new ScheduleCommand(date1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ScheduleCommand scheduleCommand2 \u003d new ScheduleCommand(date2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // same object -\u003e true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(scheduleCommand1.equals(scheduleCommand1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // different object -\u003e false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(scheduleCommand1.equals(scheduleCommand2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // same date return true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ScheduleCommand scheduleCommand1Copy \u003d new ScheduleCommand(date1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(scheduleCommand1.equals(scheduleCommand1Copy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // null return false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(scheduleCommand1.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void execute_validDate_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        LocalDate validDate \u003d LocalDate.of(2020, 11, 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        DayOfWeek day \u003d validDate.getDayOfWeek();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Reeve(model.getReeve()), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.updateFilteredStudentList(std -\u003e std.getAdmin().getClassTime().isSameDay(day));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMsg \u003d String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                expectedModel.getSortedStudentList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(validDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, expectedMsg, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void execute_nullDateToFindSchedule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e scheduleCommand.execute(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 67,
      "csiongn": 1,
      "hogantan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SolveQuestionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEST_QUESTIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SolveQuestionCommand.MESSAGE_BAD_QUESTION_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SolveQuestionCommand.MESSAGE_SOLVED_QUESTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SolveQuestionCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class SolveQuestionCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String validSolution \u003d \"Solution.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // all fields null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolveQuestionCommand(null, null, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // one null field"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolveQuestionCommand(null,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                INDEX_FIRST_PERSON, validSolution));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolveQuestionCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                null, validSolution));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolveQuestionCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                INDEX_FIRST_PERSON, null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // two null fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolveQuestionCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                null, null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolveQuestionCommand(null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                INDEX_FIRST_PERSON, null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolveQuestionCommand(null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                null, validSolution));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withQuestions(TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expectedStudent \u003d getAnsweredStudent(question, clone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Question solved \u003d expectedStudent.getQuestions().get(question.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                expectedStudent.getName(), solved);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand solveCommand \u003d new SolveQuestionCommand(INDEX_FIRST_PERSON, question, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(solveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute_invalidStudentIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(model.getSortedStudentList().size() + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand solveCommand \u003d new SolveQuestionCommand(outOfBounds, question, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(solveCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withQuestions(TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Student expectedStudent \u003d getAnsweredStudent(question, clone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Question solved \u003d expectedStudent.getQuestions().get(question.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                expectedStudent.getName(), solved);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand solveCommand \u003d new SolveQuestionCommand(INDEX_FIRST_PERSON, question, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getReeve(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedModel.setStudent(clone, expectedStudent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(solveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand solveCommand \u003d new SolveQuestionCommand(INDEX_SECOND_PERSON, question, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertCommandFailure(solveCommand, model, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidQuestionIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withQuestions(TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBounds \u003d Index.fromOneBased(TEST_QUESTIONS.length + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand solveCommand \u003d new SolveQuestionCommand(INDEX_FIRST_PERSON, outOfBounds, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(solveCommand, model, MESSAGE_BAD_QUESTION_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_alreadySolvedQuestion_throwsCommandException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Student asker \u003d model.getSortedStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student clone \u003d new StudentBuilder(asker).withSolved(DEFAULT_SOLUTION, TEST_QUESTIONS).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        model.setStudent(asker, clone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index question \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand solveCommand \u003d new SolveQuestionCommand(INDEX_FIRST_PERSON, question, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(solveCommand, model, MESSAGE_SOLVED_QUESTION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Index question \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand command \u003d new SolveQuestionCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                question, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e true"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same fields -\u003e true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(command.equals(new SolveQuestionCommand(INDEX_FIRST_PERSON, question, DEFAULT_SOLUTION)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // different questionIndex -\u003e false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(command.equals(new SolveQuestionCommand(INDEX_FIRST_PERSON, Index.fromOneBased(2),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                DEFAULT_SOLUTION)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // different studentIndex -\u003e false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(command.equals(new SolveQuestionCommand(INDEX_SECOND_PERSON, question, DEFAULT_SOLUTION)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // different solution -\u003e false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(command.equals(new SolveQuestionCommand(INDEX_SECOND_PERSON, question, \"Dummy solution\")));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // different class -\u003e false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(command.equals(new OverdueCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private Student getAnsweredStudent(Index index, Student toCopy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c toCopy.getQuestions().size(); i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Question toAdd;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            if (i \u003d\u003d index.getZeroBased()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                toAdd \u003d new SolvedQuestion(TEST_QUESTIONS[i], DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                toAdd \u003d new UnsolvedQuestion(TEST_QUESTIONS[i]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            questions.add(toAdd);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Student(toCopy.getName(), toCopy.getPhone(), toCopy.getSchool(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                toCopy.getYear(), toCopy.getAdmin(), questions, toCopy.getExams(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                toCopy.getAcademic());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 3,
      "VaishakAnand": 2,
      "StopTakingAllTheNames": 48,
      "-": 119,
      "csiongn": 5,
      "hogantan": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_SORTED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.NameComparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.YearComparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.admin.ClassTimeComparator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private SortCommand sortByName \u003d new SortCommand(\"name\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private SortCommand sortByNameDuplicate \u003d new SortCommand(\"name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private SortCommand sortByClassTime \u003d new SortCommand(\"classTime\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private SortCommand sortByYear \u003d new SortCommand(\"year\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(sortByName, sortByNameDuplicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertNotEquals(sortByName, sortByClassTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertNotEquals(sortByName, sortByYear);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void constructor_invalidComparisonMeans_throwException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SortCommand(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void execute_sortByName_sorted() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        expectedModel.updateSortedStudentList(new NameComparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_SORTED, \"name\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"name\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), model.getSortedStudentList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void execute_sortByClassTime_sorted() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        expectedModel.updateSortedStudentList(new ClassTimeComparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_SORTED, \"classTime\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"classTime\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(Arrays.asList(CARL, DANIEL, ELLE, GEORGE, BENSON, FIONA, ALICE), model.getSortedStudentList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void execute_sortByYear_sorted() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        expectedModel.updateSortedStudentList(new YearComparator());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_SORTED, \"year\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"year\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, BENSON, FIONA, ALICE, GEORGE, CARL, ELLE), model.getSortedStudentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ToggleStudentCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToggleStudentCardCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new CommandResult(ToggleStudentCardCommand.MESSAGE_TOGGLE_SUCCESS, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertCommandSuccess(new ToggleStudentCardCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDITIONAL_DETAILS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDITIONAL_DETAILS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_VENUE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_VENUE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FEE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FEE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FEE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PAYMENT_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDITIONAL_DETAILS_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDITIONAL_DETAILS_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.model.student.admin.Fee.FREE_OF_CHARGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.model.student.admin.PaymentDate.TODAY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withQuestions()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withExams().withAttendances().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + SCHOOL_DESC_BOB + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last school accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_AMY + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple years - last year accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_AMY + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //multiple venues - last venue accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_AMY + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //multiple times - last time accepted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_AMY + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //multiple fees - last fee accepted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_AMY + FEE_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //multiple payment dates - last date accepted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        //multiple details - all details accepted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedStudent \u003d new StudentBuilder(BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withDetails(VALID_ADDITIONAL_DETAILS_BOB, VALID_ADDITIONAL_DETAILS_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withQuestions()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withExams().withAttendances()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB + ADDITIONAL_DETAILS_DESC_BOB + ADDITIONAL_DETAILS_DESC_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_allFieldsMissing_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withQuestions().withDetails().withFee(FREE_OF_CHARGE).withPaymentDate(TODAY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withExams().withAttendances().build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + SCHOOL_DESC_AMY + YEAR_DESC_AMY"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        + CLASS_VENUE_DESC_AMY + CLASS_TIME_DESC_AMY,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_optionalFieldsPresent_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // payment date present"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withQuestions().withDetails().withFee(FREE_OF_CHARGE)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withExams().withAttendances().build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + SCHOOL_DESC_AMY + YEAR_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        + CLASS_VENUE_DESC_AMY + CLASS_TIME_DESC_AMY + PAYMENT_DATE_DESC_AMY,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // fee present"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedStudent \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withQuestions().withDetails().withPaymentDate(TODAY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withExams().withAttendances().build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + SCHOOL_DESC_AMY + YEAR_DESC_AMY"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        + CLASS_VENUE_DESC_AMY + CLASS_TIME_DESC_AMY + FEE_DESC_AMY,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // details present"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        expectedStudent \u003d new StudentBuilder(AMY)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withQuestions().withFee(FREE_OF_CHARGE).withPaymentDate(TODAY)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .withExams().withAttendances().build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + SCHOOL_DESC_AMY + YEAR_DESC_AMY"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                        + CLASS_VENUE_DESC_AMY + CLASS_TIME_DESC_AMY + ADDITIONAL_DETAILS_DESC_AMY,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + PAYMENT_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing school prefix"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing year prefix"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // missing venue prefix"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //missing time prefix"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + SCHOOL_DESC_BOB + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + SCHOOL_DESC_BOB + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid school"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_SCHOOL_DESC + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                School.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB + INVALID_YEAR_DESC"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //invalid venue"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + INVALID_VENUE_DESC + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ClassVenue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //invalid time"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + INVALID_TIME_DESC + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ClassTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //invalid fee"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + INVALID_FEE_DESC + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Fee.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //invalid payment date"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + INVALID_PAYMENT_DESC,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                PaymentDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_SCHOOL_DESC + YEAR_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + YEAR_DESC_BOB + CLASS_VENUE_DESC_BOB + CLASS_TIME_DESC_BOB + FEE_DESC_BOB"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                        + PAYMENT_DATE_DESC_BOB,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 33,
      "VaishakAnand": 5,
      "StopTakingAllTheNames": 54,
      "-": 95,
      "hogantan": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AttendanceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_FEEDBACK_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_STATUS_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class AttendanceCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String ADD_ATTENDANCE_DESC \u003d AddAttendanceCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String DELETE_ATTENDANCE_DESC \u003d DeleteAttendanceCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final Attendance VALID_ATTENDANCE \u003d new Attendance(VALID_ATTENDANCE_DATE_AMY,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            VALID_ATTENDANCE_STATUS_AMY, new Feedback(VALID_ATTENDANCE_FEEDBACK_AMY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final AttendanceCommandParser parser \u003d new AttendanceCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_addAttendanceAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String userInput \u003d ADD_ATTENDANCE_DESC + targetStudentIndex.getOneBased() + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddAttendanceCommand expectedCommand \u003d new AddAttendanceCommand(targetStudentIndex, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_addAttendanceMissingParts_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                AddAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing index and prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, ADD_ATTENDANCE_DESC, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // valid index, missing prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, ADD_ATTENDANCE_DESC + targetStudentIndex + \" \", expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing index, valid prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, ADD_ATTENDANCE_DESC + ATTENDANCE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_deleteDetailAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String targetAttendanceDate \u003d \" \" + PREFIX_ATTENDANCE_DATE + VALID_ATTENDANCE_DATE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String userInput \u003d DELETE_ATTENDANCE_DESC + targetStudentIndex.getOneBased() + targetAttendanceDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteAttendanceCommand expectedCommand \u003d new DeleteAttendanceCommand(targetStudentIndex,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                LocalDate.parse(VALID_ATTENDANCE_DATE_AMY, FORMATTER));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_deleteDetailMissingParts_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing 2 arguments"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_ATTENDANCE_DESC, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing 1 argument"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_ATTENDANCE_DESC + \"2\", expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String targetAttendanceDate \u003d String.format(\" %s%s\", PREFIX_ATTENDANCE_DATE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                LocalDate.parse(VALID_ATTENDANCE_DATE_AMY, FORMATTER));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_ATTENDANCE_DESC + targetAttendanceDate, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // wrong date format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidDate \u003d \" \" + PREFIX_ATTENDANCE_DATE + \"2020-03-22\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_ATTENDANCE_DESC + \"2\" + invalidDate, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DetailCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDITIONAL_DETAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDITIONAL_DETAILS_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.AddDetailCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.DeleteDetailCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.DetailCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.EditDetailCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class DetailCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    //@@author VaishakAnand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String ADD_DETAIL_DESC \u003d AddDetailCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String EDIT_DETAIL_DESC \u003d EditDetailCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String DELETE_DETAIL_DESC \u003d DeleteDetailCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private final DetailCommandParser parser \u003d new DetailCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_addDetailAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String userInput \u003d ADD_DETAIL_DESC + targetStudentIndex.getOneBased() + ADDITIONAL_DETAIL_DESC_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        AddDetailCommand expectedCommand \u003d new AddDetailCommand(targetStudentIndex,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Detail(VALID_ADDITIONAL_DETAILS_AMY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_addDetailMissingParts_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                AddDetailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing index and prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, ADD_DETAIL_DESC, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // valid index, missing prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, ADD_DETAIL_DESC + targetStudentIndex + \" \", expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing index, valid prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, ADD_DETAIL_DESC + ADDITIONAL_DETAIL_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_deleteDetailAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String targetDetailIndexDesc \u003d \" \" + PREFIX_INDEX + \"2\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String userInput \u003d DELETE_DETAIL_DESC + targetStudentIndex.getOneBased() + targetDetailIndexDesc;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        DeleteDetailCommand expectedCommand \u003d new DeleteDetailCommand(targetStudentIndex,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                Index.fromOneBased(2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_deleteDetailMissingParts_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                DeleteDetailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing 2 arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_DETAIL_DESC, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing 1 argument"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_DETAIL_DESC + \"2\", expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String targetDetailIndexDesc \u003d String.format(\" %s%s\", PREFIX_INDEX, \"2\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_DETAIL_DESC + targetDetailIndexDesc, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // wrong detail index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidDetailIndex \u003d \" \" + PREFIX_INDEX + \"0\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, DELETE_DETAIL_DESC + \"2\" + invalidDetailIndex, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_editDetailAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetDetailIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String targetDetailIndexDesc \u003d String.format(\" %s%s\", PREFIX_INDEX, \"2\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String userInput \u003d EDIT_DETAIL_DESC + \"2\" + targetDetailIndexDesc + ADDITIONAL_DETAIL_DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditDetailCommand expectedCommand \u003d new EditDetailCommand(targetStudentIndex,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                targetDetailIndex, new Detail(VALID_ADDITIONAL_DETAILS_AMY));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parse_editDetailMissingParts_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                EditDetailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetStudentIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Index targetDetailIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String targetDetailIndexDesc \u003d String.format(\" %s%s\", PREFIX_INDEX, targetDetailIndex.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing 3 arguments"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing 2 arguments"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC + \"2\", expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC + targetDetailIndexDesc, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC + ADDITIONAL_DETAIL_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // missing 1 argument"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC + \"2\" + ADDITIONAL_DETAIL_DESC_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC + \"2\" + targetDetailIndexDesc,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC + targetDetailIndexDesc + ADDITIONAL_DETAIL_DESC_AMY,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // wrong detail index"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, EDIT_DETAIL_DESC + targetStudentIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + PREFIX_INDEX + \"0\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + ADDITIONAL_DETAIL_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DetailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DetailCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, expectedMessage, () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 131,
      "StopTakingAllTheNames": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_VENUE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASS_VENUE_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FEE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FEE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PAYMENT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_YEAR_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PAYMENT_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_TIME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_VENUE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_VENUE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FEE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_DATE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_LEVEL_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_LEVEL_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_TYPE_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_TYPE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_YEAR_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.YEAR_DESC_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAdminDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.EditAdminDescriptorBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SCHOOL_DESC, School.MESSAGE_CONSTRAINTS); // invalid school"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_YEAR_DESC, Year.MESSAGE_CONSTRAINTS); // invalid year"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VENUE_DESC, ClassVenue.MESSAGE_CONSTRAINTS); // invalid venue"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TIME_DESC, ClassTime.MESSAGE_CONSTRAINTS); // invalid time"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FEE_DESC, Fee.MESSAGE_CONSTRAINTS); // invalid fee"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PAYMENT_DESC, PaymentDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // invalid payment date"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid school"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + SCHOOL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // assertParseFailure(parser, \"1\" + DET_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_SCHOOL_DESC + VALID_YEAR_AMY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        + VALID_PHONE_AMY + INVALID_PAYMENT_DESC,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + YEAR_DESC_AMY"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + SCHOOL_DESC_AMY + NAME_DESC_AMY + FEE_DESC_BOB + PAYMENT_DATE_DESC_AMY"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + CLASS_TIME_DESC_BOB + CLASS_VENUE_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withSchool(VALID_SCHOOL_AMY)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(VALID_SCHOOL_TYPE_AMY, VALID_SCHOOL_LEVEL_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder().withFee(VALID_FEE_BOB)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withPaymentDate(VALID_PAYMENT_DATE_AMY).withTime(VALID_CLASS_TIME_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withVenue(VALID_CLASS_VENUE_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + SCHOOL_DESC_AMY + PAYMENT_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .withSchool(VALID_SCHOOL_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withPaymentDate(VALID_PAYMENT_DATE_AMY)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder().build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // school"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withSchool(VALID_SCHOOL_AMY).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // year"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + YEAR_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(VALID_SCHOOL_TYPE_AMY, VALID_SCHOOL_LEVEL_AMY).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // class time"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CLASS_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder().build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editAdminDescriptor \u003d new EditAdminDescriptorBuilder().withTime(VALID_CLASS_TIME_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // class venue"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CLASS_VENUE_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editAdminDescriptor \u003d new EditAdminDescriptorBuilder().withVenue(VALID_CLASS_VENUE_AMY).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // fee"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FEE_DESC_BOB;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editAdminDescriptor \u003d new EditAdminDescriptorBuilder().withFee(VALID_FEE_BOB).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // payment date"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PAYMENT_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder().build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        editAdminDescriptor \u003d new EditAdminDescriptorBuilder().withVenue(VALID_PAYMENT_DATE_AMY).build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + SCHOOL_DESC_AMY + YEAR_DESC_AMY"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + PHONE_DESC_AMY + SCHOOL_DESC_AMY + YEAR_DESC_AMY + CLASS_TIME_DESC_BOB + CLASS_VENUE_DESC_AMY"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + CLASS_TIME_DESC_BOB + CLASS_VENUE_DESC_BOB + PHONE_DESC_BOB + SCHOOL_DESC_BOB + YEAR_DESC_BOB;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withSchool(VALID_SCHOOL_BOB).withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB).build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder().withTime(VALID_CLASS_TIME_BOB)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .withVenue(VALID_CLASS_VENUE_BOB).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB + FEE_DESC_BOB;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder().withFee(VALID_FEE_BOB).build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + YEAR_DESC_BOB + INVALID_PHONE_DESC + SCHOOL_DESC_BOB"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        editStudentDescriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB).withSchool(VALID_SCHOOL_BOB).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, editStudentDescriptor, editAdminDescriptor);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 90,
      "StopTakingAllTheNames": 1,
      "-": 151,
      "csiongn": 11,
      "hogantan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExamCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXAM_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_SCORE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_SCORE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXAM_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCORE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.AddExamCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.DeleteExamCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.ExamCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ExamCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String ADD_EXAM_DESC \u003d AddExamCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String DEL_EXAM_DESC \u003d DeleteExamCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final ExamCommandParser parser \u003d new ExamCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //@@author hogantan"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_addExamAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //all fields presents - single"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String userInput \u003d ADD_EXAM_DESC + INDEX_SECOND_PERSON.getOneBased() + EXAM_DESC_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddExamCommand expectedCommand \u003d new AddExamCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new Exam(VALID_EXAM_NAME_AMY, VALID_EXAM_DATE_AMY, new Score(VALID_EXAM_SCORE_AMY)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // multiple exam names - last name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        userInput \u003d ADD_EXAM_DESC + INDEX_SECOND_PERSON.getOneBased() + EXAM_DESC_AMY + \" \" + PREFIX_EXAM_NAME"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + VALID_EXAM_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedCommand \u003d new AddExamCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new Exam(VALID_EXAM_NAME_BOB, VALID_EXAM_DATE_AMY, new Score(VALID_EXAM_SCORE_AMY)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // multiple exam dates - last date accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        userInput \u003d ADD_EXAM_DESC + INDEX_SECOND_PERSON.getOneBased() + EXAM_DESC_AMY + \" \" + PREFIX_EXAM_DATE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + VALID_EXAM_DATE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedCommand \u003d new AddExamCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new Exam(VALID_EXAM_NAME_AMY, VALID_EXAM_DATE_BOB, new Score(VALID_EXAM_SCORE_AMY)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // multiple exam scores - last score accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        userInput \u003d ADD_EXAM_DESC + INDEX_SECOND_PERSON.getOneBased() + EXAM_DESC_AMY + \" \" + PREFIX_SCORE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + VALID_EXAM_SCORE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedCommand \u003d new AddExamCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                new Exam(VALID_EXAM_NAME_AMY, VALID_EXAM_DATE_AMY, new Score(VALID_EXAM_SCORE_BOB)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_addExamMissingArguments_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                AddExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // missing index and prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, ADD_EXAM_DESC, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // missing index, valid prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, ADD_EXAM_DESC + EXAM_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // valid index, missing all three prefixes"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, ADD_EXAM_DESC + INDEX_SECOND_PERSON + \" \", expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // valid index, missing two prefixes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, ADD_EXAM_DESC + INDEX_SECOND_PERSON + \" \" + PREFIX_EXAM_NAME"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + VALID_EXAM_NAME_AMY, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // valid index, missing one prefixes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, ADD_EXAM_DESC + INDEX_SECOND_PERSON + \" \" + PREFIX_EXAM_NAME"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + VALID_EXAM_NAME_AMY + \" \" + PREFIX_EXAM_DATE + VALID_EXAM_DATE_AMY, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_deleteExamAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String targetExamIndexDesc \u003d String.format(\" %s%s\", PREFIX_EXAM_INDEX, \"2\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String userInput \u003d DEL_EXAM_DESC + INDEX_SECOND_PERSON.getOneBased() + targetExamIndexDesc;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        DeleteExamCommand expectedCommand \u003d new DeleteExamCommand(INDEX_SECOND_PERSON, Index.fromOneBased(2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_deleteExamMissingArguments_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                DeleteExamCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String targetDetailIndexDesc \u003d String.format(\" %s%s\", PREFIX_EXAM_INDEX, INDEX_SECOND_PERSON.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // missing 2 arguments"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, DEL_EXAM_DESC, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // missing 1 argument"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String badCommand \u003d DEL_EXAM_DESC + String.format(\"%s\", INDEX_SECOND_PERSON.getOneBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, badCommand, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        badCommand \u003d DEL_EXAM_DESC + targetDetailIndexDesc;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, badCommand, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // wrong detail index"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        badCommand \u003d DEL_EXAM_DESC + INDEX_SECOND_PERSON.getOneBased() + \" \" + INDEX_SECOND_PERSON + \"0\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertParseFailure(parser, badCommand, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseCommand_emptyInput_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ExamCommand.MESSAGE_USAGE), () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                ExamCommand.MESSAGE_USAGE), () -\u003e parser.parse(\"unknownCommand\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 13,
      "hogantan": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.YearMatchPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.FindStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new FindStudentDescriptorBuilder().withNamePredicate(predicate).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseSuccess(parser, \" n/ \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parse_validArgsCompoundPredicates_returnsFindCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate schoolPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new SchoolContainsKeywordsPredicate(Arrays.asList(\"Changi\", \"Sec\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        YearMatchPredicate yearPredicate \u003d new YearMatchPredicate(new Year(SchoolType.SECONDARY, 3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor descriptor \u003d new FindStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withNamePredicate(namePredicate)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withSchoolPredicate(schoolPredicate)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYearPredicate(yearPredicate)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseSuccess(parser, \" n/Alice Bob s/Changi Sec y/Secondary 3\", expectedFindCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \" n/ \\n Alice \\n \\t Bob  \\n s/Changi\\t Sec\\t \\t y/Secondary 3\", expectedFindCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "csiongn": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_SCHOOL \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"$4\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_CLASS_VENUE \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_CLASS_TIME \u003d \"8 1240-2400\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_FEE \u003d \"231.451\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_PAYMENT_DATE \u003d \"23-9-2019\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_ADDITIONAL_DETAIL \u003d \"sch!zophren#c\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_SOLUTION \u003d \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String INVALID_EXAM_NAME \u003d \" \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String INVALID_EXAM_DATE_FORMAT \u003d \"23-9-2019\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String INVALID_EXAM_DATE_ALPHABETS \u003d \"abcdef\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String INVALID_SCORE_LARGER \u003d \"100/50\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String INVALID_SCORE_NEGATIVE \u003d \"-50/-100\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String INVALID_ATTENDANCE_DATE_FORMAT \u003d \"23-9-2019\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String INVALID_ATTENDANCE_DATE_ALPHABETS \u003d \"abcdef\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String INVALID_ATTENDANCE_STATUS \u003d \"you wot m8\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String INVALID_FEEDBACK \u003d \" \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_SCHOOL \u003d \"Raffles Institution\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final String VALID_YEAR \u003d \"JC 2\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final SchoolType VALID_SCHOOL_TYPE \u003d SchoolType.JC;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final Integer VALID_SCHOOL_LEVEL \u003d 2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_CLASS_VENUE \u003d \"Blk 411 #04-11, Lorong Chuan, Singapore 234332\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_CLASS_TIME \u003d \"3 1240-1530\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_FEE \u003d \"2350.30\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_PAYMENT_DATE \u003d \"23/9/2019\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_ADDITIONAL_DETAIL_WEEB \u003d \"Is a weeaboo\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_ADDITIONAL_DETAIL_CONVICT \u003d \"Just released from prison\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"Why can\u0027t humans fly?\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_SOLUTION \u003d \"Read your textbook.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String VALID_EXAM_NAME \u003d \"Mid Year 2020\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String VALID_EXAM_DATE \u003d \"23/9/2019\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final String VALID_SCORE \u003d \"50/100\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String VALID_ATTENDANCE_DATE \u003d \"23/9/2019\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String VALID_ATTENDANCE_STATUS \u003d \"present\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final String VALID_FEEDBACK \u003d \"attentive\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSchool_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSchool(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSchool_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSchool(INVALID_SCHOOL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSchool_validSchoolWithoutWhiteSpace_returnsSchool() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        School expectedSchool \u003d new School(VALID_SCHOOL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedSchool, ParserUtil.parseSchool(VALID_SCHOOL));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSchool_validSchoolWithWhiteSpace_returnsTrimmedSchool() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String schoolWithSpaces \u003d WHITESPACE + VALID_SCHOOL + WHITESPACE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        School expectedSchool \u003d new School(VALID_SCHOOL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedSchool, ParserUtil.parseSchool(schoolWithSpaces));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseYear_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseYear(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseYear_invalidYear_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseYear(INVALID_YEAR));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseYear_validYear_returnsYear() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Year expectedYear \u003d new Year(VALID_SCHOOL_TYPE, VALID_SCHOOL_LEVEL);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(VALID_YEAR));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(\"J2\")); // no whitespace"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(\"J2               \")); // lots of trailing whitespace"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(\"J         2               \")); // lots of whitespace"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(\"Jc 2\")); // only one letter capitalised"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(\"jc 2\")); // no letter capitalised"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(\"jc 2\")); // no letter capitalised"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(\"j2\")); // short form"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseYear_validYearWithWhiteSpace_returnsTrimmedYear() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String yearWithWhiteSpace \u003d WHITESPACE + VALID_YEAR + WHITESPACE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Year expectedYear \u003d new Year(VALID_SCHOOL_TYPE, VALID_SCHOOL_LEVEL);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedYear, ParserUtil.parseYear(yearWithWhiteSpace));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseSchoolType_validSchoolType_returnsCorrectSchoolType() throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(SchoolType.PRIMARY, ParserUtil.parseSchoolType(\"Primary\")); // full word first letter capitalised"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(SchoolType.PRIMARY, ParserUtil.parseSchoolType(\"primary\")); // full word all lower case"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(SchoolType.SECONDARY, ParserUtil.parseSchoolType(\"s\")); // one letter not capitalised"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(SchoolType.SECONDARY, ParserUtil.parseSchoolType(\"S\")); // one letter capitalised"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(SchoolType.SECONDARY, ParserUtil.parseSchoolType(\"  Sec   \")); // lots of whitespace"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseSchoolType_invalidSchoolType_throwsParseException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSchoolType(\"pri  mary\")); // mangled school type"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSchoolType(\"ns\")); // not valid school type"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSchoolType(\"yramirp\")); // reverse spelling"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseVenue_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClassVenue(null));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseVenue_invalidVenue_throwsParseException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSchool(INVALID_CLASS_VENUE));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseVenue_validVenueWithoutWhiteSpace_returnsVenue() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        ClassVenue expectedVenue \u003d new ClassVenue(VALID_CLASS_VENUE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseClassVenue(VALID_CLASS_VENUE));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseVenue_validVenueWithWhiteSpace_returnsTrimmedVenue() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String venueWithWhiteSpace \u003d WHITESPACE + VALID_CLASS_VENUE + WHITESPACE;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        ClassVenue expectedVenue \u003d new ClassVenue(VALID_CLASS_VENUE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseClassVenue(venueWithWhiteSpace));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClassTime(null));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseTime_invalidTime_throwsParseException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseClassTime(INVALID_CLASS_TIME));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseTime_validTimeWithoutWhiteSpace_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        ClassTime expectedTime \u003d new ClassTime(VALID_CLASS_TIME);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseClassTime(VALID_CLASS_TIME));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseTime_validTimeWithWhiteSpace_returnsTrimmedTime() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String timeWithWhiteSpace \u003d WHITESPACE + VALID_CLASS_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        ClassTime expectedTime \u003d new ClassTime(VALID_CLASS_TIME);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseClassTime(timeWithWhiteSpace));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseFee_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFee(null));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseFee_invalidFee_throwsParseException() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFee(INVALID_FEE));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseFee_validFeeWithoutWhiteSpace_returnsFee() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Fee expectedFee \u003d new Fee(VALID_FEE);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedFee, ParserUtil.parseFee(VALID_FEE));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseFee_validFeeWithWhiteSpaces_returnsTrimmedFee() throws Exception {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String feeWithWhiteSpace \u003d WHITESPACE + VALID_FEE + WHITESPACE;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Fee expectedFee \u003d new Fee(VALID_FEE);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedFee, ParserUtil.parseFee(feeWithWhiteSpace));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parsePaymentDate_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePaymentDate(null));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parsePaymentDate_invalidDate_throwsParseException() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePaymentDate(INVALID_PAYMENT_DATE));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parsePaymentDate_validDateWithoutWhiteSpace_returnsPaymentDate() throws Exception {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        PaymentDate expectedPaymentDate \u003d new PaymentDate(VALID_PAYMENT_DATE);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedPaymentDate, ParserUtil.parsePaymentDate(VALID_PAYMENT_DATE));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parsePaymentDate_validDateWithWhiteSpace_returnsTrimmedPaymentDate() throws Exception {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String paymentDateWithWhiteSpace \u003d WHITESPACE + VALID_PAYMENT_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        PaymentDate expectedPaymentDate \u003d new PaymentDate(VALID_PAYMENT_DATE);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expectedPaymentDate, ParserUtil.parsePaymentDate(paymentDateWithWhiteSpace));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDetail(null));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDetail(INVALID_ADDITIONAL_DETAIL));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetail_validValue_returnsDetail() throws Exception {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Detail expectedDetail \u003d new Detail(VALID_ADDITIONAL_DETAIL_WEEB);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedDetail, ParserUtil.parseDetail(VALID_ADDITIONAL_DETAIL_WEEB));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetail_validValueWithWhiteSpace_returnsTrimmedDetail() throws Exception {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String detailWithWhiteSpace \u003d WHITESPACE + VALID_ADDITIONAL_DETAIL_WEEB + WHITESPACE;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Detail expectedDetail \u003d new Detail(VALID_ADDITIONAL_DETAIL_WEEB);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedDetail, ParserUtil.parseDetail(detailWithWhiteSpace));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetails_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDetails(null));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetails_invalidDetail_throwsParseException() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cString\u003e invalidSet \u003d List.of(INVALID_ADDITIONAL_DETAIL);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDetails(invalidSet));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetails_validDetails_returnsDetails() throws Exception {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cString\u003e validList \u003d List.of(VALID_ADDITIONAL_DETAIL_CONVICT, VALID_ADDITIONAL_DETAIL_WEEB);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cDetail\u003e expectedSet \u003d validList.stream()"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(Detail::new)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedSet, ParserUtil.parseDetails(validList));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseDetails_validDetailsSpace_returnsTrimmedDetails() throws Exception {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cString\u003e baseList \u003d List.of(VALID_ADDITIONAL_DETAIL_CONVICT, VALID_ADDITIONAL_DETAIL_WEEB);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        List\u003cString\u003e validList \u003d baseList.stream()"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(string -\u003e WHITESPACE + string + WHITESPACE)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cDetail\u003e expectedSet \u003d baseList.stream()"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(Detail::new)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(expectedSet, ParserUtil.parseDetails(validList));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseQuestion_validValueWithoutWhiteSpace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question expectedQuestion \u003d new UnsolvedQuestion(VALID_QUESTION);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseQuestion_validValueWithWhiteSpace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        String questionWithWhiteSpace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question expectedQuestion \u003d new UnsolvedQuestion(VALID_QUESTION);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhiteSpace));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseQuestion_valueValue_returnsUnresolvedQuestion() throws Exception {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question unexpectedQuestion \u003d new SolvedQuestion(VALID_QUESTION, VALID_SOLUTION);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(unexpectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSolution_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSolution(null));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSolution_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseSolution(INVALID_SOLUTION));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSolution_validValueWithoutWhiteSpace_returnsSolution() throws Exception {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(VALID_SOLUTION, ParserUtil.parseSolution(VALID_SOLUTION));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseSolution_validValueWithWhiteSpace_returnsTrimmedSolution() throws Exception {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String solutionWithSpace \u003d WHITESPACE + VALID_SOLUTION + WHITESPACE;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(VALID_SOLUTION, ParserUtil.parseSolution(solutionWithSpace));"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExamName(null));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExamName(INVALID_EXAM_NAME));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamName_validExamNameWithoutWhiteSpace_returnsExamNameString() throws Exception {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(VALID_EXAM_NAME, ParserUtil.parseExamName(VALID_EXAM_NAME));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamName_validExamNameWithWhiteSpace_returnsTrimmedExamNameString() throws Exception {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String examNameWithSpaces \u003d WHITESPACE + VALID_EXAM_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(VALID_EXAM_NAME, ParserUtil.parseExamName(examNameWithSpaces));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamDate_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExamDate(null));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamDate_invalidDateWrongFormat_throwsParseException() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExamDate(INVALID_EXAM_DATE_FORMAT));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamDate_invalidDateAlphabets_throwsParseException() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExamDate(INVALID_EXAM_DATE_ALPHABETS));"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamDate_validDateWithoutWhiteSpace_returnsExamDateString() throws Exception {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(VALID_EXAM_DATE, ParserUtil.parseExamDate(VALID_EXAM_DATE));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseExamDate_validDateWithWhiteSpace_returnsTrimmedExamDateString() throws Exception {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String examDateWithWhiteSpace \u003d WHITESPACE + VALID_EXAM_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(VALID_EXAM_DATE, ParserUtil.parseExamDate(examDateWithWhiteSpace));"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseScore_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseScore(null));"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseScore_invalidScoreFirstLargerThanSecond_throwsParseException() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseScore(INVALID_SCORE_LARGER));"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseScore_invalidScoreNegative_throwsParseException() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseScore(INVALID_SCORE_NEGATIVE));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseScore_validScoreWithoutWhiteSpace_returnsScore() throws Exception {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Score expectedScore \u003d new Score(VALID_SCORE);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedScore, ParserUtil.parseScore(VALID_SCORE));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseScore_validScoreWithoutWhiteSpace_returnsTrimmedScore() throws Exception {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String scoreWithWhiteSpace \u003d WHITESPACE + VALID_SCORE + WHITESPACE;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Score expectedScore \u003d new Score(VALID_SCORE);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedScore, ParserUtil.parseScore(scoreWithWhiteSpace));"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAttendanceDate(null));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceDate_invalidDateWrongFormat_throwsParseException() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAttendanceDate(INVALID_ATTENDANCE_DATE_FORMAT));"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceDate_invalidDateAlphabets_throwsParseException() {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAttendanceDate(INVALID_ATTENDANCE_DATE_ALPHABETS));"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceDate_validDateWithoutWhiteSpace_returnsExamDateString() throws Exception {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_EXAM_DATE, ParserUtil.parseExamDate(VALID_ATTENDANCE_DATE));"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceDate_validDateWithWhiteSpace_returnsTrimmedExamDateString() throws Exception {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String attendanceDateWithWhiteSpace \u003d WHITESPACE + VALID_ATTENDANCE_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_EXAM_DATE, ParserUtil.parseAttendanceDate(attendanceDateWithWhiteSpace));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceStatus_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAttendanceStatus(null));"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceStatus_invalidStatus_throwsParseException() {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAttendanceStatus(INVALID_ATTENDANCE_STATUS));"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceStatus_validStatusWithoutWhiteSpace_returnsStatusString() throws Exception {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_STATUS, ParserUtil.parseAttendanceStatus(VALID_ATTENDANCE_STATUS));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseAttendanceStatus_validStatusWithWhiteSpace_returnsStatusString() throws Exception {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String statusWithWhiteSpace \u003d WHITESPACE + VALID_ATTENDANCE_STATUS + WHITESPACE;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_STATUS, ParserUtil.parseAttendanceStatus(statusWithWhiteSpace));"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseFeedback_invalidStatus_throwsParseException() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFeedback(INVALID_FEEDBACK));"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseFeedback_validStatusWithoutWhiteSpace_returnsFeedbackString() throws Exception {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(new Feedback(VALID_FEEDBACK), ParserUtil.parseFeedback(VALID_FEEDBACK));"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseFeedback_validStatusWithWhiteSpace_returnsFeedbackString() throws Exception {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String statusWithWhiteSpace \u003d WHITESPACE + VALID_FEEDBACK + WHITESPACE;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(new Feedback(VALID_FEEDBACK), ParserUtil.parseFeedback(statusWithWhiteSpace));"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "VaishakAnand": 70,
      "StopTakingAllTheNames": 209,
      "-": 164,
      "csiongn": 29,
      "hogantan": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/QuestionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddQuestionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.QuestionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SolveQuestionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class QuestionCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuestionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String ADD_QUESTION_DESC \u003d AddQuestionCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String SOLVE_QUESTION_DESC \u003d SolveQuestionCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String DEL_QUESTION_DESC \u003d DeleteQuestionCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String QUESTION_INDEX_DESC \u003d \" \" + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String SOLUTION_DESC \u003d \" \" + PREFIX_TEXT + DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private QuestionCommandParser parser \u003d new QuestionCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_invalidCommandWord_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidWord \u003d \"random words\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, invalidWord, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_addQuestionMissingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // missing student index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + QUESTION_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // missing student question"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_addQuestionInvalidPreamble_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid integers"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + \"0\" + QUESTION_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + \"-2\" + QUESTION_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid argument"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid prefix parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidPrefix \u003d \" \" + PREFIX_INDEX + VALID_QUESTION_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + \"1\" + invalidPrefix, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_addQuestionInvalidQuestion_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidQuestion \u003d \" \" + PREFIX_TEXT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + \"1\" + invalidQuestion, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        invalidQuestion \u003d \" \" + PREFIX_TEXT + \" \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, ADD_QUESTION_DESC + \"1\" + invalidQuestion, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_addQuestionValidArguments_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String input \u003d ADD_QUESTION_DESC + \"1\" + QUESTION_DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion question \u003d new UnsolvedQuestion(VALID_QUESTION_AMY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        AddQuestionCommand command \u003d new AddQuestionCommand(INDEX_FIRST_PERSON, question);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, input, command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_solveQuestionMissingParts_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // missing student index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + QUESTION_INDEX_DESC + SOLUTION_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // missing question question"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"1\" + SOLUTION_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // missing solution"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"1\" + QUESTION_INDEX_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_solveQuestionInvalidPreamble_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid integers"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"0\" + QUESTION_INDEX_DESC + SOLUTION_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"-2\" + QUESTION_INDEX_DESC + SOLUTION_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid argument"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid prefix parsed as preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidPrefix \u003d \"1 p/ string\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + invalidPrefix, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_solveQuestionInvalidQuestionIndex_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidIndex \u003d \" \" + PREFIX_INDEX + \"-5\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"1\" + invalidIndex, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // 0 index"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        invalidIndex \u003d \" \" + PREFIX_INDEX + \"0\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"1\" + invalidIndex, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_solveQuestionInvalidSolution_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidSolution \u003d \" \" + PREFIX_TEXT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"1\" + QUESTION_INDEX_DESC + invalidSolution,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                SolvedQuestion.MESSAGE_SOLUTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        invalidSolution \u003d \" \" + PREFIX_TEXT + \" \";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, SOLVE_QUESTION_DESC + \"1\" + QUESTION_INDEX_DESC + invalidSolution,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                SolvedQuestion.MESSAGE_SOLUTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_solveQuestionValidArguments_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String input \u003d SOLVE_QUESTION_DESC + \"1\" + SOLUTION_DESC + QUESTION_INDEX_DESC;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        SolveQuestionCommand command \u003d new SolveQuestionCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                Index.fromOneBased(1), DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, input, command);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        input \u003d SOLVE_QUESTION_DESC + \"1\" + QUESTION_INDEX_DESC + SOLUTION_DESC;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, input, command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_deleteQuestionMissingParts_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // missing student index"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + QUESTION_INDEX_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // missing question index"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_deleteQuestionInvalidPreamble_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid integers"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"0\" + QUESTION_INDEX_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"-2\" + QUESTION_INDEX_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid argument"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid prefix parsed as preamble"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidPrefix \u003d \" \" + PREFIX_TEXT + \"string\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"1\" + invalidPrefix, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_deleteQuestionInvalidArgument_failure() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidQuestion \u003d \" \" + PREFIX_INDEX + \"-1\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"1\" + invalidQuestion, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        invalidQuestion \u003d \" \" + PREFIX_INDEX + \"0\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"1\" + invalidQuestion, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        invalidQuestion \u003d \" \" + PREFIX_INDEX + \" \";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseFailure(parser, DEL_QUESTION_DESC + \"1\" + invalidQuestion, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parse_deleteQuestionValidArguments_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String input \u003d DEL_QUESTION_DESC + \"1\" + QUESTION_INDEX_DESC;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        DeleteQuestionCommand command \u003d new DeleteQuestionCommand(INDEX_FIRST_PERSON, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertParseSuccess(parser, input, command);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 127,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ReeveParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_QUESTION_MATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.AddExamCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddQuestionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.AttendanceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.DeleteExamCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.DeleteQuestionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.DetailCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.OverdueCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.QuestionCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.logic.commands.SolveQuestionCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.EditAdminDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.FindStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ReeveParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReeveParser parser \u003d new ReeveParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student student \u003d new StudentBuilder().withQuestions().withDetails().withExams().withAttendances().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(new AddCommand(student), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand.EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        EditCommand.EditAdminDescriptor editAdminDescriptor \u003d new EditAdminDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                + StudentUtil.getEditStudentDescriptorDetails(editStudentDescriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, editStudentDescriptor, editAdminDescriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        FindCommand.FindStudentDescriptor descriptor \u003d new FindStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withNamePredicate(namePredicate).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + StudentUtil.getFindStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(new FindCommand(descriptor), command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void parseCommand_schedule() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2020, 9, 27);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ScheduleCommand command \u003d (ScheduleCommand) parser.parseCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                ScheduleCommand.COMMAND_WORD + \" \" + \"27/09/2020\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(new ScheduleCommand(date), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseCommand_question() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String addCommandDesc \u003d QuestionCommand.COMMAND_WORD + \" \" + AddQuestionCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String questionDesc \u003d \" \" + PREFIX_TEXT + DEFAULT_QUESTION_MATH;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        UnsolvedQuestion question \u003d new UnsolvedQuestion(DEFAULT_QUESTION_MATH);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        QuestionCommand command \u003d (QuestionCommand) parser.parseCommand(addCommandDesc + \"1\" + questionDesc);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(new AddQuestionCommand(INDEX_FIRST_PERSON, question), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String solveCommandDesc \u003d QuestionCommand.COMMAND_WORD + \" \" + SolveQuestionCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        questionDesc \u003d \" \" + PREFIX_INDEX + \"1\" + \" \" + PREFIX_TEXT + DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        command \u003d (QuestionCommand) parser.parseCommand(solveCommandDesc + \"1\" + questionDesc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(new SolveQuestionCommand(INDEX_FIRST_PERSON, Index.fromOneBased(1), DEFAULT_SOLUTION), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String delCommandDesc \u003d QuestionCommand.COMMAND_WORD + \" \" + DeleteQuestionCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        questionDesc \u003d \" \" + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        command \u003d (QuestionCommand) parser.parseCommand(delCommandDesc + \"1\" + questionDesc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(new DeleteQuestionCommand(INDEX_FIRST_PERSON, Index.fromOneBased(1)), command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parseCommand_exam() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(parser.parseCommand(\"exam add 1 n/Mid Year 2020 d/23/7/2020 s/50/100\") instanceof AddExamCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(parser.parseCommand(\"exam delete 1 i/1\") instanceof DeleteExamCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" classTime\") instanceof SortCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" year\") instanceof SortCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseCommand_detail() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(parser.parseCommand(\"detail add 2 t/ smart\") instanceof DetailCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void parseCommand_unpaid() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(parser.parseCommand(OverdueCommand.COMMAND_WORD) instanceof OverdueCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(parser.parseCommand(OverdueCommand.COMMAND_WORD + \" 3\") instanceof OverdueCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void parseCommand_attendance() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(parser.parseCommand(\"attendance add 1 d/19/02/2020 a/present f/attentive\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                instanceof AttendanceCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(parser.parseCommand(\"attendance delete 3 d/25/12/2020\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                instanceof AttendanceCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 18,
      "VaishakAnand": 19,
      "StopTakingAllTheNames": 38,
      "-": 78,
      "csiongn": 13,
      "hogantan": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void parse_emptyUserInputDate_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertParseFailure(parser, \"    \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                ScheduleCommand.EMPTY_DATE_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void parse_validUserInputDate_returnsScheduleCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2020, 9, 12);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertParseSuccess(parser, \"12/09/2020\", expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertParseSuccess(parser, \"    12/09/2020    \", expectedCommand); // whitespaces will be trimmed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void parse_invalidUserInputDate_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // invalid date format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertParseFailure(parser, \"12/09/20\", ScheduleCommand.INCORRECT_DATE_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertParseFailure(parser, \"12-09-20\", ScheduleCommand.INCORRECT_DATE_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // \"!\" not allowed in user input date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertParseFailure(parser, \"12/09/21!\", ScheduleCommand.INCORRECT_DATE_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SortCommand expectedSortCommandName \u003d new SortCommand(\"name\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SortCommand expectedSortCommandClassTime \u003d new SortCommand(\"classTime\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SortCommand expectedSortCommandYear \u003d new SortCommand(\"year\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseSuccess(parser, \"classTime\", expectedSortCommandClassTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // multiple whitespaces before keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseSuccess(parser, \"       name\", expectedSortCommandName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // a lot of whitespace"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseSuccess(parser, \"       year     \", expectedSortCommandYear);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parse_invalidParameters_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // multiple parameters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseFailure(parser, \"name year\", expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // not a recognised parameter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseFailure(parser, \"class\", expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // duplicate parameters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseFailure(parser, \"name name\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // white space given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertParseFailure(parser, \"     \", expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.ReeveBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(new Reeve(), new Reeve(modelManager.getReeve()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(modelManager.hasStudent(AMY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        modelManager.addStudent(AMY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(modelManager.hasStudent(AMY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getSortedStudentList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Reeve reeve \u003d new ReeveBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve differentReeve \u003d new Reeve();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        modelManager \u003d new ModelManager(reeve, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(reeve, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentReeve, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String[] keywords \u003d AMY.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(reeve, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(reeve, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 4,
      "-": 111,
      "csiongn": 1,
      "hogantan": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ReeveTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ReeveTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Reeve reeve \u003d new Reeve();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(Collections.emptyList(), reeve.getStudentList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e reeve.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(newData, reeve);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(AMY).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(AMY, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ReeveStub newData \u003d new ReeveStub(newStudents);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e reeve.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e reeve.hasStudent(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(reeve.hasStudent(AMY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve.addStudent(AMY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(reeve.hasStudent(AMY));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve.addStudent(AMY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(AMY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(reeve.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e reeve.getStudentList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * A stub ReadOnlyAddressBook whose student list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static class ReeveStub implements ReadOnlyReeve {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ReeveStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 3,
      "StopTakingAllTheNames": 2,
      "hogantan": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class NameComparatorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private NameComparator cmp \u003d new NameComparator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student eve \u003d new StudentBuilder().withName(\"Eve\").withSchool(\"Bishan Primary School\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.PRIMARY, 3).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student alice \u003d new StudentBuilder().withName(\"Alice\").withSchool(\"SST\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 1).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student aloysius \u003d new StudentBuilder().withName(\"aloysius\").withSchool(\"SST\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 1).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student dominic \u003d new StudentBuilder().withName(\"dominic\").withSchool(\"SOTA\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 1).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student pikachu \u003d new StudentBuilder().withName(\"pikachu\").withSchool(\"Trainers School\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 3).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student bob \u003d new StudentBuilder().withName(\"Bob\").withSchool(\"Innova JC\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.JC, 1).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_smallerThan_lesThanZero() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(alice, dominic) \u003c 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(alice, pikachu) \u003c 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(alice, bob) \u003c 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(alice, aloysius) \u003c 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(aloysius, eve) \u003c 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(bob, pikachu) \u003c 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(eve, pikachu) \u003c 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_sameStudent_returnsZero() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(0, cmp.compare(eve, eve));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_largerThan_greaterThanZero() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(dominic, aloysius) \u003e 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(bob, aloysius) \u003e 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(eve, bob) \u003e 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // User guide test cases"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alex\", \"david\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alexis davinder\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "-": 64,
      "csiongn": 5,
      "hogantan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "hogantan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "hogantan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/SchoolContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class SchoolContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Changi\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Kent\", \"Ridge\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new SchoolContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new SchoolContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new SchoolContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_schoolContainsAllKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // One keyword different case"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                new SchoolContainsKeywordsPredicate(Collections.singletonList(\"Changi\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withSchool(\"changi\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Multiple keywords same case"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"Kent\", \"Ridge\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withSchool(\"Kent Ridge\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"KeNt\", \"RiDGE\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withSchool(\"kent ridge\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // User guide test cases"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"yishun\", \"sec\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withSchool(\"Yishun Secondary School\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withSchool(\"Yishun Town Secondary School\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_schoolDoesNotContainAllKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        SchoolContainsKeywordsPredicate predicate \u003d new SchoolContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withSchool(\"Changi\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"Science\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withSchool(\"School of Computing\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // One keyword matching one not matching"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"Kent\", \"Ridge\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withSchool(\"Kent Vale\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // Keywords match phone, email and address, but does not match school"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // User guide test cases"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"yishun\", \"secondary\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withSchool(\"Yishun sec\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/SchoolTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class SchoolTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new School(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void constructor_invalidSchool_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String invalidSchool \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new School(invalidSchool));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void isValidSchool() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // null school"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e School.isValidSchool(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // invalid school names"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(School.isValidSchool(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(School.isValidSchool(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // valid school name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(School.isValidSchool(\"a\")); //1 small letter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(School.isValidSchool(\"A\")); // 1 capital letter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(School.isValidSchool(\"NUS High School\")); // strings with spacing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(School.isValidSchool(\"abc\")); // no spacing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(School.isValidSchool(\"abcAbcqweretrytyuiuiopsadfghjkxzcvbnm\")); //long word"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/SchoolTypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class SchoolTypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void toString_returnsCorrectString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(\"Primary\", SchoolType.PRIMARY.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(\"Secondary\", SchoolType.SECONDARY.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(\"JC\", SchoolType.JC.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void isValidSchoolType_validSchoolType_returnsTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(SchoolType.isValidSchoolType(\"pri\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(SchoolType.isValidSchoolType(\"primary\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(SchoolType.isValidSchoolType(\"Primary\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(SchoolType.isValidSchoolType(\"p\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(SchoolType.isValidSchoolType(\"sec\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(SchoolType.isValidSchoolType(\"JC\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void isValidSchoolType_invalidSchoolType_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(SchoolType.isValidSchoolType(\"ns\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(SchoolType.isValidSchoolType(\"n\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(SchoolType.isValidSchoolType(\"yramirp\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_LEVEL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_TYPE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_QUESTION_MATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // different phone and school and year -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // same name, same school, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // same name, same year, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // same name, same phone, same school, different year -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // different school -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withSchool(VALID_SCHOOL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsQuestion() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String test1 \u003d \"What is 1+1?\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String test2 \u003d \"How do you do grammar?\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String test3 \u003d \"Do giraffes fart?\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] questions \u003d new String[] {test1, test2};"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withQuestions(questions).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(editedAlice.containsQuestion(new UnsolvedQuestion(test1)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(editedAlice.containsQuestion(new UnsolvedQuestion(test2)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(editedAlice.containsQuestion(new SolvedQuestion(test1, DEFAULT_SOLUTION)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(editedAlice.containsQuestion(new SolvedQuestion(test2, DEFAULT_SOLUTION)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(editedAlice.containsQuestion(new UnsolvedQuestion(test3)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void addQuestion() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withQuestions().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student newAlice \u003d editedAlice.addQuestion(new UnsolvedQuestion(DEFAULT_QUESTION_MATH));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student expected \u003d new StudentBuilder(ALICE).withQuestions(DEFAULT_QUESTION_MATH).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertNotEquals(editedAlice, newAlice);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expected, newAlice);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void setQuestion() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withQuestions(DEFAULT_QUESTION_MATH).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student newAlice \u003d editedAlice.setQuestion(new UnsolvedQuestion(DEFAULT_QUESTION_MATH),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new SolvedQuestion(DEFAULT_QUESTION_MATH, DEFAULT_SOLUTION));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student expected \u003d new StudentBuilder(ALICE).withSolved(DEFAULT_SOLUTION, DEFAULT_QUESTION_MATH).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertNotEquals(editedAlice, newAlice);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expected, newAlice);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void deleteQuestion() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withQuestions(DEFAULT_QUESTION_MATH).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student newAlice \u003d editedAlice.deleteQuestion(new UnsolvedQuestion(DEFAULT_QUESTION_MATH));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student expected \u003d new StudentBuilder(ALICE).withQuestions().build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertNotEquals(editedAlice, newAlice);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expected, newAlice);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withSolved(DEFAULT_SOLUTION, DEFAULT_QUESTION_MATH).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        newAlice \u003d editedAlice.deleteQuestion(new SolvedQuestion(DEFAULT_QUESTION_MATH, DEFAULT_SOLUTION));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertNotEquals(editedAlice, newAlice);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(expected, newAlice);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 30,
      "StopTakingAllTheNames": 45,
      "-": 54,
      "csiongn": 9,
      "hogantan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 21,
      "hogantan": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/YearComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class YearComparatorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private YearComparator cmp \u003d new YearComparator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student priThreeStudent \u003d new StudentBuilder().withName(\"Eve\").withSchool(\"Bishan Primary School\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.PRIMARY, 3).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student secOneStudent \u003d new StudentBuilder().withName(\"Alice\").withSchool(\"SST\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 1).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student secOneStudent2 \u003d new StudentBuilder().withName(\"Dominic\").withSchool(\"SOTA\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 1).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student secThreeStudent \u003d new StudentBuilder().withName(\"Pikachu\").withSchool(\"Trainers School\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 3).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student jcOneStudent \u003d new StudentBuilder().withName(\"Bob\").withSchool(\"Innova JC\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.JC, 1).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_largerThan_moreThanZero() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(jcOneStudent, secThreeStudent) \u003e 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(jcOneStudent, secOneStudent) \u003e 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(jcOneStudent, priThreeStudent) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(secThreeStudent, secOneStudent) \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_sameYear_returnsZero() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(0, cmp.compare(secOneStudent, secOneStudent2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(0, cmp.compare(secOneStudent, secOneStudent));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_smallerThan_lessThanZero() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(priThreeStudent, secThreeStudent) \u003c 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(priThreeStudent, secOneStudent) \u003c 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/YearMatchPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class YearMatchPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Year secondaryOne \u003d new Year(SchoolType.SECONDARY, 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Year secondaryOneDuplicate \u003d new Year(SchoolType.SECONDARY, 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Year secondaryThree \u003d new Year(SchoolType.SECONDARY, 3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private YearMatchPredicate yearMatchPredicateSecondaryOne \u003d new YearMatchPredicate(secondaryOne);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private YearMatchPredicate yearMatchPredicateSecondaryThree \u003d new YearMatchPredicate(secondaryThree);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private YearMatchPredicate yearMatchPredicateSecondaryOneDuplicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            new YearMatchPredicate(secondaryOneDuplicate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student yearOneStudent \u003d new StudentBuilder().withName(\"Alice\").withSchool(\"Changi Junior College\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 1).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student yearThreeStudent \u003d new StudentBuilder().withName(\"Pikachu\").withSchool(\"Trainers School\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(SchoolType.SECONDARY, 3).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(yearMatchPredicateSecondaryOne, yearMatchPredicateSecondaryOne);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertNotEquals(\"1\", yearMatchPredicateSecondaryOne);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertNotEquals(yearMatchPredicateSecondaryOne, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // same year -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(yearMatchPredicateSecondaryOne.equals(yearMatchPredicateSecondaryOneDuplicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(yearMatchPredicateSecondaryOne.equals(yearMatchPredicateSecondaryThree));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_matchingYear_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(yearMatchPredicateSecondaryOne.test(yearOneStudent));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(yearMatchPredicateSecondaryThree.test(yearThreeStudent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // User guide test cases"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(yearMatchPredicateSecondaryThree.test(new StudentBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(SchoolType.SECONDARY, 3).build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_notMatchingYear_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(yearMatchPredicateSecondaryOne.test(yearThreeStudent));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        // User guide test cases"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(yearMatchPredicateSecondaryThree.test(new StudentBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .withYear(SchoolType.SECONDARY, 4).build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/YearTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class YearTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Year(null, null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void isValidYear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // null year"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Year.isValidYear(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(Year.isValidYear(\"\")); // empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(Year.isValidYear(\" \")); // space only"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(Year.isValidYear(\" Primary 2\")); //spacing in front"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(Year.isValidYear(\"!@#$\")); // characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"NS 1\")); // not a valid school type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"JC 3\")); // not a valid level"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"j\")); // not a valid level"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"0\")); // just digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"11\")); // just digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"92312432423\")); // long number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"1 2 3 \")); //numbers with spacing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"abc\")); // only letters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertFalse(Year.isValidYear(\"a b c \")); //letters with spacing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // valid year"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(Year.isValidYear(\"Primary 1\")); // alphanumeric"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(Year.isValidYear(\"JC 2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(Year.isValidYear(\"S4\")); // no spacing and short form acceptable"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(Year.isValidYear(\"sec4\")); // no spacing acceptable"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(Year.isValidYear(\"S 4\")); // short form acceptable"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(Year.isValidYear(\"p          6\")); // spacing in year acceptable"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(Year.isValidYear(\"Secondary 4\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(Year.isValidYear(\"Primary 1     \")); //spacing behind acceptable"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 31,
      "csiongn": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/academic/AcademicTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class AcademicTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic aliceAcademic \u003d ALICE.getAcademic();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same values should return true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic academicCopy \u003d new StudentBuilder(ALICE).build().getAcademic();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(aliceAcademic.equals(academicCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same object return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(aliceAcademic.equals(aliceAcademic));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(aliceAcademic.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different types should return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(aliceAcademic.equals(6));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different attendance list returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic editedAliceAcademic \u003d new StudentBuilder(ALICE).withAttendances(new Attendance(\"12/02/2020\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \"present\", new Feedback(\"sleeping\"))).build().getAcademic();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(aliceAcademic.equals(editedAliceAcademic));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/academic/AttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    static final Attendance VALID_ATTENDANCE \u003d new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            new Feedback(\"sleepy\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    static final String VALID_DATE_DEF \u003d \"13/03/2020\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    static final String VALID_DATE_ALT \u003d \"13/3/20\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    static final String INVALID_DATE \u003d \"2020-02-12\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // All fields null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(null, null,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(null)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // All but one null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(\"14/04/1998\", null,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(null)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(null, \"present\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(null)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(null, null,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(\"sleepy\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Only one null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(null)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(null, \"present\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(\"sleepy\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(\"14/04/1998\", null,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(\"sleepy\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_invalidAttendanceFields_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidAttendanceDate \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidAttendanceStatus \u003d \"hey\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidAttendanceFeedback \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // all 3 invalid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidAttendanceDate,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                invalidAttendanceStatus, new Feedback(invalidAttendanceFeedback)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // 2 invalid"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(\"12/02/2020\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                invalidAttendanceStatus, new Feedback(invalidAttendanceFeedback)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidAttendanceDate,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \"present\", new Feedback(invalidAttendanceFeedback)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidAttendanceDate,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                invalidAttendanceStatus, new Feedback(\"attentive\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // 1 invalid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(\"12/02/2020\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \"present\", new Feedback(invalidAttendanceFeedback)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidAttendanceDate,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                \"present\", new Feedback(\"sleepy\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(\"12/02/2020\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                invalidAttendanceStatus, new Feedback(\"attentive\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void isValidDate_test() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // null Date should throw exception"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Attendance.isValidDate(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // emptyDate is invalid"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(Attendance.isValidDate(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Invalid format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(Attendance.isValidDate(INVALID_DATE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // valid format date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(Attendance.isValidDate(VALID_DATE_DEF));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(Attendance.isValidDate(VALID_DATE_ALT));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals_test() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // different object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertNotEquals(VALID_ATTENDANCE, \"hey\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // diff fields"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertNotEquals(VALID_ATTENDANCE, new Attendance(\"17/04/1998\", \"present\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(\"sleepy\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertNotEquals(VALID_ATTENDANCE, new Attendance(\"14/04/1998\", \"absent\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(\"sleepy\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertNotEquals(VALID_ATTENDANCE, new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(\"sleepayy son\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_ATTENDANCE, VALID_ATTENDANCE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // same fields"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_ATTENDANCE, new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Feedback(\"sleepy\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/academic/FeedbackTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.academic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class FeedbackTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    static final Feedback VALID_FEEDBACK \u003d new Feedback(\"attentive\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Feedback(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_invalidAttendanceFields_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // cannot be empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Feedback(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // can only be alphanumeric"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Feedback(\"!!@@##__\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void isValidFeedback_test() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(Feedback.isValidFeedback(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(Feedback.isValidFeedback(\"!!@@##__\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(Feedback.isValidFeedback(\"was an attentive lad today\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void equals_test() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_FEEDBACK, VALID_FEEDBACK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertNotEquals(VALID_FEEDBACK, \"lass\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(VALID_FEEDBACK, new Feedback(\"attentive\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertNotEquals(VALID_FEEDBACK, new Feedback(\"not attentive\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/admin/ClassTimeComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ClassTimeComparatorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private ClassTimeComparator cmp \u003d new ClassTimeComparator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student wedEight \u003d new StudentBuilder().withName(\"Eve\").withSchool(\"Bishan Primary School\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"3 0800-1000\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student thursTen \u003d new StudentBuilder().withName(\"Alice\").withSchool(\"SST\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"4 1000-1200\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student friTwelve \u003d new StudentBuilder().withName(\"aloysius\").withSchool(\"SST\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"5 1200-1400\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student monTen \u003d new StudentBuilder().withName(\"dominic\").withSchool(\"SOTA\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"1 1000-1300\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student tuesNine \u003d new StudentBuilder().withName(\"pikachu\").withSchool(\"Trainers School\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"2 0900-1700\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Student monThirteen \u003d new StudentBuilder().withName(\"Bob\").withSchool(\"Innova JC\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"1 1300-1400\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_smallerThan_lesThanZero() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(tuesNine, wedEight) \u003c 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(tuesNine, thursTen) \u003c 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(monTen, monThirteen) \u003c 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(thursTen, friTwelve) \u003c 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void test_largerThan_greaterThanZero() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(wedEight, tuesNine) \u003e 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertTrue(cmp.compare(thursTen, monThirteen) \u003e 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/admin/ClassTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class ClassTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClassTime(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_invalidClassTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Completely empty input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String emptyClassTime \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassTime(emptyClassTime));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Invalid input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidInput \u003d \"2 hey sup\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassTime(invalidInput));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Invalid Day of week (must be 1 - 7)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidDayOfWeek1 \u003d \"0 1000-1230\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassTime(invalidDayOfWeek1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidDayOfWeek2 \u003d \"9 1000-1200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassTime(invalidDayOfWeek2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Invalid Start time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidStartTime \u003d \"0 2500-1230\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassTime(invalidStartTime));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // Invalid End time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidEndTime \u003d \"9 1000-0090\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassTime(invalidEndTime));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void isValidClassTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // null class time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ClassTime.isValidClassTime(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // invalid class times"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidClassTime(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidClassTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidClassTime(\"0 1000-1230\")); // invalid day of week"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidClassTime(\"10 1000-1230\")); // invalid day of week"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidClassTime(\"1 1090-1230\")); // invalid start time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidClassTime(\"2 1000-2930\")); // invalid day of week"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // valid class times"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(ClassTime.isValidClassTime(\"2 1000-2230\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(ClassTime.isValidClassTime(\"7 0000-2359\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void isSameDay() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ClassTime t1 \u003d new ClassTime(\"2 1000-2230\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        DayOfWeek daySameAst1 \u003d DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        DayOfWeek dayDifferentFromt1 \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertTrue(t1.isSameDay(daySameAst1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(t1.isSameDay(dayDifferentFromt1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertFalse(t1.isSameDay(null)); // equals method on null should return false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void isValidStartAndEndTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // invalid start and end times"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidStartAndEndTime(\"2 0900-0100\")); // end time before start time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertFalse(ClassTime.isValidStartAndEndTime(\"6 1200-0900\")); // end time before start time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // valid start and end times"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(ClassTime.isValidStartAndEndTime(\"2 0900-1200\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertTrue(ClassTime.isValidStartAndEndTime(\"4 1100-1600\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ClassTime time \u003d new ClassTime(\"2 1500-1700\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ClassTime laterDayOfWeek \u003d new ClassTime(\"3 1500-1700\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ClassTime sameDayOfWeekEarlierTime \u003d new ClassTime(\"2 1400-1500\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(-1, time.compareTo(laterDayOfWeek)); // earlier dayOfWeek"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(1, time.compareTo(sameDayOfWeekEarlierTime)); // same dayOfWeek but later time"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e time.compareTo(null)); // null throws exception"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 30,
      "VaishakAnand": 65,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/admin/ClassVenueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ClassVenueTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ClassVenue(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ClassVenue(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ClassVenue.isValidClassVenue(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(ClassVenue.isValidClassVenue(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertFalse(ClassVenue.isValidClassVenue(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(ClassVenue.isValidClassVenue(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertTrue(ClassVenue.isValidClassVenue(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ClassVenue.isValidClassVenue(\"Leng Inc; 1234 Market St; \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "hogantan": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/admin/DetailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class DetailTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Detail(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void constructor_invalidAdditionalDetail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        String invalidAdditionalDetail \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Detail(invalidAdditionalDetail));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void isValidAdditionalDetail() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        // null additional detail"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Detail.isValidAdditionalDetail(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 22,
      "StopTakingAllTheNames": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/admin/FeeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class FeeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Fee(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_invalidFee_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidFee \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Fee(invalidFee));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isValidFee() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // null fee"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Fee.isValidFee(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid fees"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(Fee.isValidFee(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(Fee.isValidFee(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(Fee.isValidFee(\"b81.1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(Fee.isValidFee(\"12.a\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // valid fees"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(Fee.isValidFee(\"12.23\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(Fee.isValidFee(\"213123.21\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(Fee.isValidFee(\"324\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(Fee.isValidFee(\"13.4\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Fee(\"10\").toString(), \"$10.00\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Fee(\"143.12\").toString(), \"$143.12\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Fee(\"1036.5\").toString(), \"$1036.50\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 39,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/admin/OverdueFeePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class OverdueFeePredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final DateTimeFormatter FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/yy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void test_studentHasNotPaid_returnsTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        LocalDate overDue \u003d LocalDate.now().minusMonths(1).minusDays(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student unpaid \u003d new StudentBuilder().withPaymentDate(overDue.format(FORMAT)).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        OverdueFeePredicate predicate \u003d new OverdueFeePredicate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(predicate.test(unpaid));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        overDue \u003d LocalDate.now().minusYears(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        unpaid \u003d new StudentBuilder().withPaymentDate(overDue.format(FORMAT)).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(predicate.test(unpaid));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        overDue \u003d LocalDate.now().minusDays(32);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        unpaid \u003d new StudentBuilder().withPaymentDate(overDue.format(FORMAT)).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(predicate.test(unpaid));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        overDue \u003d LocalDate.now().minusWeeks(5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        unpaid \u003d new StudentBuilder().withPaymentDate(overDue.format(FORMAT)).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(predicate.test(unpaid));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void test_studentHasPaid_returnFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        LocalDate paidDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Student paid \u003d new StudentBuilder().withPaymentDate(paidDate.format(FORMAT)).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        OverdueFeePredicate predicate \u003d new OverdueFeePredicate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(predicate.test(paid));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        paidDate \u003d LocalDate.now().minusDays(10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        paid \u003d new StudentBuilder().withPaymentDate(paidDate.format(FORMAT)).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(predicate.test(paid));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        paidDate \u003d LocalDate.now().minusMonths(1).plusDays(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        paid \u003d new StudentBuilder().withPaymentDate(paidDate.format(FORMAT)).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(predicate.test(paid));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/admin/PaymentDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class PaymentDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PaymentDate(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String[] invalidDates \u003d new String[]{\"12-1-31\", \"32/10/19\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        for (String invalidDate : invalidDates) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            assertThrows(IllegalArgumentException.class, () -\u003e new PaymentDate(invalidDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isValidDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PaymentDate(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isValidDate_validValue_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"12/12/12\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"12/2/12\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"2/12/12\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"2/2/12\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"12/12/2002\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"12/2/2002\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"2/12/2002\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(\"2/2/2002\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isValidDate_invalidFormat_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"\")); // blank"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"abc\")); // not even a date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"2-2-22\")); // - instead of / to delimit fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"12.2.31\")); // . instead of / to delimit fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"2/2\")); // missing at least one field"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"2/2/2\")); // year has too few characters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"2/2/020\")); // year has 3 characters instead of 2/4"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"2/2/22020\")); // year has too many characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"222/2/2\")); // day has too few characters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"2/222/020\")); // month has 3 characters instead of 2/4"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isValidDate_invalidDate_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid days"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"31/11/19\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"31/11/2019\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"32/10/19\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"32/10/2019\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"29/2/19\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"30/2/20\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"0/10/19\")); // too low"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"0/10/2019\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid months"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"20/0/19\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"20/13/19\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"20/0/2019\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(\"20/13/2019\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isValidDate_pastPresentFuture() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String future \u003d LocalDate.now().plusDays(1).format(formatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(PaymentDate.isValidDate(future));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String present \u003d LocalDate.now().format(formatter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(present));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String past \u003d LocalDate.now().minusDays(1).format(formatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(PaymentDate.isValidDate(past));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 86,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/question/QuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"what is 1 + 1?\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Hello?\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"How does Newton\u0027s Second Law work?\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSameQuestion() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question test \u003d new UnsolvedQuestion(\"Hello?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question otherUnsolved \u003d new UnsolvedQuestion(\"Hello?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question otherSolved \u003d new SolvedQuestion(\"Hello?\", \"No thanks.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(test.isSameQuestion(otherSolved));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(test.isSameQuestion(otherUnsolved));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(otherSolved.isSameQuestion(test));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(otherUnsolved.isSameQuestion(test));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.isSameQuestion(new UnsolvedQuestion(\"What?\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.isSameQuestion(new SolvedQuestion(\"What?\", \"No.\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 11,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/question/SolvedQuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class SolvedQuestionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String validString \u003d \"test\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // both fields null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolvedQuestion(null, null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // one field null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolvedQuestion(null, validString));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SolvedQuestion(validString, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_invalidString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidString \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String validString \u003d \"test\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // both fields invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SolvedQuestion(invalidString, invalidString));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // one field invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SolvedQuestion(validString, invalidString));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SolvedQuestion(invalidString, validString));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isValidSolution() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SolvedQuestion.isValidSolution(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // invalid solution"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(SolvedQuestion.isValidSolution(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(SolvedQuestion.isValidSolution(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // valid questions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(SolvedQuestion.isValidSolution(\"2\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(SolvedQuestion.isValidSolution(\"No thanks\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(SolvedQuestion.isValidSolution(\"Answered via Whatsapp\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toString_equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(\"(\\u2713) Hello? [Goodbye]\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new SolvedQuestion(\"Hello?\", \"Goodbye\").toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String testQuestion \u003d \"1 + 1 \u003d ?\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String testSolution \u003d \"2\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question test \u003d new SolvedQuestion(testQuestion, testSolution);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // different question gives false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.equals(new SolvedQuestion(\"Hello?\", testSolution)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // different solution gives false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.equals(new SolvedQuestion(testQuestion, \"No\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // different question type gives false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.equals(new UnsolvedQuestion(testQuestion)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(test.equals(test));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(test.equals(new SolvedQuestion(testQuestion, testSolution)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isResolved() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String testQuestion \u003d \"1 + 1 \u003d ?\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String testSolution \u003d \"2\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question test \u003d new SolvedQuestion(testQuestion, testSolution);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(test.isResolved());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/question/UnsolvedQuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "package seedu.address.model.student.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "public class UnsolvedQuestionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new UnsolvedQuestion(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void constructor_invalidString_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String invalidString \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new UnsolvedQuestion(invalidString));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toString_equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(new UnsolvedQuestion(\"Hello?\").toString(), \"(\\u2718) Hello?\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String testString \u003d \"1 + 1 \u003d ?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question test \u003d new UnsolvedQuestion(testString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // different question gives false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.equals(new UnsolvedQuestion(\"Hello?\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // different question type gives false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.equals(new SolvedQuestion(testString, \"2\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        // true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(test.equals(test));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertTrue(test.equals(new UnsolvedQuestion(testString)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void isResolved() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String testString \u003d \"1 + 1 \u003d ?\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question test \u003d new UnsolvedQuestion(testString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertFalse(test.isResolved());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAdminTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB_ADMIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class JsonAdaptedAdminTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_CLASS_VENUE \u003d \" \"; // blank"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_CLASS_TIME \u003d \"000\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_FEE \u003d \"10.!#0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_PAYMENT_DATE \u003d \"0000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_ADDITIONAL_DETAIL \u003d \"!@#\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String VALID_CLASS_VENUE \u003d BOB_ADMIN.getClassVenue().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String VALID_CLASS_TIME \u003d BOB_ADMIN.getClassTime().convertClassTimeToUserInputString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String VALID_FEE \u003d BOB_ADMIN.getFee().convertFeeToUserInputString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String VALID_PAYMENT_DATE \u003d BOB_ADMIN.getPaymentDate().convertPaymentDateToUserInputString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final List\u003cJsonAdaptedDetail\u003e VALID_ADDITIONAL_DETAILS \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            BOB_ADMIN.getDetails().stream().map(JsonAdaptedDetail::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_validAdmin_returnsAdmin() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(BOB.getAdmin());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(BOB.getAdmin(), admin.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_invalidVenue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(INVALID_CLASS_VENUE, VALID_CLASS_TIME, VALID_FEE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_PAYMENT_DATE, VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d ClassVenue.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_nullVenue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(null, VALID_CLASS_TIME, VALID_FEE, VALID_PAYMENT_DATE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ClassVenue.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_invalidTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(VALID_CLASS_VENUE, INVALID_CLASS_TIME, VALID_FEE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_PAYMENT_DATE, VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d ClassTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_nullTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(VALID_CLASS_VENUE, null, VALID_FEE, VALID_PAYMENT_DATE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ClassTime.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_invalidFee_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(VALID_CLASS_VENUE, VALID_CLASS_TIME, INVALID_FEE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_PAYMENT_DATE, VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d Fee.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_nullFee_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(VALID_CLASS_VENUE, VALID_CLASS_TIME, null, VALID_PAYMENT_DATE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Fee.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_invalidPaymentDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(VALID_CLASS_VENUE, VALID_CLASS_TIME, VALID_FEE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                INVALID_PAYMENT_DATE, VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d PaymentDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_nullPaymentDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(VALID_CLASS_VENUE, VALID_CLASS_TIME, VALID_FEE, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PaymentDate.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_invalidAdditionalDetails_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List\u003cJsonAdaptedDetail\u003e invalidDetails \u003d new ArrayList\u003c\u003e(VALID_ADDITIONAL_DETAILS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        invalidDetails.add(new JsonAdaptedDetail(INVALID_ADDITIONAL_DETAIL));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedAdmin admin \u003d new JsonAdaptedAdmin(INVALID_CLASS_VENUE, VALID_CLASS_TIME, VALID_FEE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                VALID_PAYMENT_DATE, invalidDetails);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d Detail.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, admin::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 113,
      "StopTakingAllTheNames": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedQuestionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_QUESTION_NEWTON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.SolvedQuestion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedQuestionTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toModelType_validQuestion_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        Question question \u003d new UnsolvedQuestion(DEFAULT_QUESTION_NEWTON);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(question, new JsonAdaptedQuestion(question).toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        question \u003d new SolvedQuestion(DEFAULT_QUESTION_NEWTON, DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertEquals(question, new JsonAdaptedQuestion(question).toModelType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toModelType_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        JsonAdaptedQuestion test \u003d new JsonAdaptedQuestion(false, \" \", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalValueException.class, test::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        test \u003d new JsonAdaptedQuestion(true, \" \", DEFAULT_SOLUTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalValueException.class, test::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toModelType_invalidSolution_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        JsonAdaptedQuestion test \u003d new JsonAdaptedQuestion(true, DEFAULT_QUESTION_NEWTON, \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(IllegalValueException.class, test::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "StopTakingAllTheNames": 18,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String INVALID_SCHOOL \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"F!ck!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_NAME \u003d BOB.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_PHONE \u003d BOB.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_SCHOOL \u003d BOB.getSchool().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final String VALID_YEAR \u003d BOB.getYear().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final JsonAdaptedAdmin JSON_ADAPTED_ADMIN \u003d new JsonAdaptedAdmin(BOB.getAdmin());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static final List\u003cJsonAdaptedQuestion\u003e QUESTION_LIST \u003d BOB.getQuestions()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .map(JsonAdaptedQuestion::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final ArrayList\u003cJsonAdaptedExam\u003e EXAM_LIST \u003d new ArrayList\u003c\u003e(BOB.getExams()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            .map(JsonAdaptedExam::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private static final JsonAdaptedAcademic JSON_ADAPTED_ACADEMIC \u003d new JsonAdaptedAcademic(BOB.getAcademic());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BOB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Student bob \u003d BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertEquals(bob, student.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_SCHOOL, VALID_YEAR,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(null, VALID_PHONE, VALID_SCHOOL, VALID_YEAR,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_SCHOOL, VALID_YEAR,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_SCHOOL, VALID_YEAR,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toModelType_invalidSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_SCHOOL, VALID_YEAR,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d School.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toModelType_nullSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_YEAR,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_invalidYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_SCHOOL, INVALID_YEAR,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                        JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d Year.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void toModelType_nullYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_SCHOOL, null,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public void toModelType_nullAdmin_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_SCHOOL, VALID_YEAR,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                null, QUESTION_LIST, EXAM_LIST, JSON_ADAPTED_ACADEMIC);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        assertThrows(NullPointerException.class, student::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public void toModelType_nullAcademic_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_SCHOOL, VALID_YEAR,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                JSON_ADAPTED_ADMIN, QUESTION_LIST, EXAM_LIST, null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        assertThrows(NullPointerException.class, student::toModelType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 27,
      "VaishakAnand": 19,
      "StopTakingAllTheNames": 31,
      "-": 45,
      "hogantan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonReeveStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class JsonReeveStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private java.util.Optional\u003cReadOnlyReeve\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new JsonReeveStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidStudentReeve.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidStudentReeve.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonReeveStorage jsonAddressBookStorage \u003d new JsonReeveStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ReadOnlyReeve readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(original, new Reeve(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(original, new Reeve(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(original, new Reeve(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void saveAddressBook(ReadOnlyReeve addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            new JsonReeveStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new Reeve(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 89,
      "hogantan": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableReeveTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class JsonSerializableReeveTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsReeve.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentReeve.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentReeve.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonSerializableReeve dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                JsonSerializableReeve.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve reeveFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve typicalPersonsReeve \u003d TypicalStudents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(reeveFromFile, typicalPersonsReeve);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonSerializableReeve dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                JsonSerializableReeve.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonSerializableReeve dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                JsonSerializableReeve.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableReeve.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "-": 31,
      "hogantan": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.ReadOnlyReeve;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        JsonReeveStorage addressBookStorage \u003d new JsonReeveStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ReadOnlyReeve retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(original, new Reeve(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "hogantan": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAdminDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditAdminDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "public class EditAdminDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private EditAdminDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor \u003d new EditAdminDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptorBuilder(EditAdminDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.descriptor \u003d new EditAdminDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor \u003d new EditAdminDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setTime(student.getAdmin().getClassTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setVenue(student.getAdmin().getClassVenue());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setFee(student.getAdmin().getFee());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setPaymentDate(student.getAdmin().getPaymentDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code Venue} of the {@code EditAdminDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptorBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setVenue(new ClassVenue(venue));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code Time} of the {@code EditAdminDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptorBuilder withTime(String time) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setTime(new ClassTime(time));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code Fee} of the {@code EditAdminDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptorBuilder withFee(String fee) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setFee(new Fee(fee));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code PaymentDate} of the {@code EditAdminDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptorBuilder withPaymentDate(String paymentDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        descriptor.setPaymentDate(new PaymentDate(paymentDate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public EditAdminDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setSchool(student.getSchool());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setYear(student.getYear());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code School} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditStudentDescriptorBuilder withSchool(String school) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setSchool(new School(school));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets the {@code Year} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public EditStudentDescriptorBuilder withYear(SchoolType schoolType, Integer level) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.setYear(new Year(schoolType, level));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VaishakAnand": 6,
      "-": 4,
      "csiongn": 8,
      "hogantan": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FindStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindStudentDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.YearMatchPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * A utility class to help with building FindStudentDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class FindStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private FindStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor \u003d new FindStudentDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindStudentDescriptorBuilder(FindStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.descriptor \u003d new FindStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Sets the {@code namePredicate} of the {@code FindStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindStudentDescriptorBuilder withNamePredicate(NameContainsKeywordsPredicate namePredicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.setNamePredicate(namePredicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Sets the {@code schoolPredicate} of the {@code FindStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindStudentDescriptorBuilder withSchoolPredicate(SchoolContainsKeywordsPredicate schoolPredicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.setSchoolPredicate(schoolPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Sets the {@code Year} of the {@code FindStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindStudentDescriptorBuilder withYearPredicate(YearMatchPredicate yearPredicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.setYearPredicate(yearPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindStudentDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReeveBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ReeveBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Reeve reeve;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ReeveBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve \u003d new Reeve();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ReeveBuilder(Reeve reeve) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.reeve \u003d reeve;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ReeveBuilder withPerson(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        reeve.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Reeve build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return reeve;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.School;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Academic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.ClassTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.ClassVenue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.Fee;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.admin.PaymentDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.question.UnsolvedQuestion;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final String DEFAULT_SCHOOL \u003d \"NUS High School\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final SchoolType DEFAULT_SCHOOL_TYPE \u003d SchoolType.SECONDARY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static final Integer DEFAULT_SCHOOL_LEVEL \u003d 4;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_CLASS_VENUE \u003d \"311, Clementi Ave 2, #02-25\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_CLASS_TIME \u003d \"1 1500-1700\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_FEE \u003d \"21\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_PAYMENT_DATE \u003d \"21/05/2020\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_ADDITIONAL_DETAILS_MONEY \u003d \"owesMoney\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_ADDITIONAL_DETAILS_FRIEND \u003d \"friends\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_QUESTION_NEWTON \u003d \"What is Newton\u0027s Second Law?\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_QUESTION_MATH \u003d \"How do you inverse a matrix?\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final String DEFAULT_SOLUTION \u003d \"Read your textbook\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final Exam DEFAULT_EXAM_FYE \u003d new Exam(\"End of Year Examination 2020\", \"07/11/2020\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            new Score(\"50/100\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final Exam DEFAULT_EXAM_MYE \u003d new Exam(\"Mid Year Examination 2020\", \"25/7/2020\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            new Score(\"20/30\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static final Attendance DEFAULT_ATTENDANCE \u003d new Attendance(\"14/4/1998\", \"present\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            new Feedback(\"sleepy during lesson\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private School school;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Admin details"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private ClassVenue venue;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private ClassTime time;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Fee fee;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private PaymentDate paymentDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private List\u003cDetail\u003e details \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    // Academic details"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private List\u003cExam\u003e exams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private List\u003cAttendance\u003e attendances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        school \u003d new School(DEFAULT_SCHOOL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        year \u003d new Year(DEFAULT_SCHOOL_TYPE, DEFAULT_SCHOOL_LEVEL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        venue \u003d new ClassVenue(DEFAULT_CLASS_VENUE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d new ClassTime(DEFAULT_CLASS_TIME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fee \u003d new Fee(DEFAULT_FEE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        paymentDate \u003d new PaymentDate(DEFAULT_PAYMENT_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List.of(DEFAULT_ADDITIONAL_DETAILS_MONEY, DEFAULT_ADDITIONAL_DETAILS_FRIEND)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(Detail::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .forEach(details::add);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        List.of(DEFAULT_QUESTION_NEWTON, DEFAULT_QUESTION_MATH)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .map(UnsolvedQuestion::new)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .forEach(questions::add);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        exams \u003d Arrays.asList(DEFAULT_EXAM_FYE, DEFAULT_EXAM_MYE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        attendances \u003d Arrays.asList(DEFAULT_ATTENDANCE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        school \u003d studentToCopy.getSchool();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        year \u003d studentToCopy.getYear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Admin studentAdmin \u003d studentToCopy.getAdmin();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        venue \u003d studentAdmin.getClassVenue();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d studentAdmin.getClassTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        fee \u003d studentAdmin.getFee();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        paymentDate \u003d studentAdmin.getPaymentDate();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        details.addAll(studentAdmin.getDetails());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        questions.addAll(studentToCopy.getQuestions());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        exams.addAll(studentToCopy.getExams());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        Academic studentAcademic \u003d studentToCopy.getAcademic();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        attendances.addAll(studentAcademic.getAttendance());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Sets the {@code School} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public StudentBuilder withSchool(String school) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.school \u003d new School(school);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Sets the {@code Year} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public StudentBuilder withYear(SchoolType schoolType, Integer level) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.year \u003d new Year(schoolType, level);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code ClassVenue} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentBuilder withClassVenue(String venue) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        this.venue \u003d new ClassVenue(venue);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code ClassTime} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentBuilder withClassTime(String time) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d new ClassTime(time);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Fee} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentBuilder withFee(String fee) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fee \u003d new Fee(fee);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code PaymentDate} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentBuilder withPaymentDate(String date) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        this.paymentDate \u003d new PaymentDate(date);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Details} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentBuilder withDetails(String... details) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.details \u003d SampleDataUtil.getDetailList(details);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Questions} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public StudentBuilder withQuestions(String... questions) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        this.questions \u003d SampleDataUtil.getQuestions(questions);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets some {@code Questions} as solved for the {@code Student} that we are building."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public StudentBuilder withSolved(String solution, String... questions) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        this.questions \u003d SampleDataUtil.getSolvedQuestions(solution, questions);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Sets some {@code Exam} for the {@code Student} that we are building."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public StudentBuilder withExams(Exam... exams) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.exams \u003d SampleDataUtil.getExams(exams);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Sets some {@code Exam} for the {@code Student} that we are building."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public StudentBuilder withAttendances(Attendance... attendances) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        this.attendances \u003d SampleDataUtil.getAttendance(attendances);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Builds a {@code Student} based on the given information."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Student(name, phone, school, year,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                new Admin(venue, time, fee, paymentDate, details),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                questions, exams,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                new Academic(attendances));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 22,
      "VaishakAnand": 26,
      "StopTakingAllTheNames": 25,
      "-": 136,
      "csiongn": 6,
      "hogantan": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAILS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import seedu.address.model.student.admin.Detail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(PREFIX_PHONE + student.getPhone().value + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(PREFIX_SCHOOL + student.getSchool().school + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                .append(PREFIX_YEAR + String.valueOf(student.getYear()) + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .append(getAdminDetails(student.getAdmin()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    private static String getAdminDetails(Admin admin) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String venue \u003d PREFIX_VENUE + admin.getClassVenue().venue + \" \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String time \u003d PREFIX_TIME + String.valueOf(admin.getClassTime().dayOfWeek.getValue())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + \" \" + admin.getClassTime().startTime.toString().replace(\":\", \"\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                + \"-\" + admin.getClassTime().endTime.toString().replace(\":\", \"\") + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String fee \u003d PREFIX_FEE + String.valueOf(admin.getFee().amount) + \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        String date \u003d PREFIX_PAYMENT + admin.getPaymentDate()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .lastPaid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"d/M/yy\")) + \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        sb.append(venue).append(time).append(fee).append(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        for (Detail detail : admin.getDetails()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            sb.append(PREFIX_DETAILS + detail.detail + \" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditCommand.EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getSchool().ifPresent(school -\u003e sb.append(PREFIX_SCHOOL).append(school.school).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.getYear().ifPresent(year -\u003e sb.append(PREFIX_YEAR).append(year).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns the part of command string for the given {@code FindStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static String getFindStudentDescriptorDetails(FindCommand.FindStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.getNamePredicate().ifPresent(predicate -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String stringName \u003d predicate.keywords.stream() // Convert the keywords list in predicate into a string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    .reduce(\"\", (x, y) -\u003e x + \" \" + y);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            sb.append(PREFIX_NAME).append(stringName).append(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.getSchoolPredicate().ifPresent(predicate -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String stringSchool \u003d predicate.keywords.stream() // Convert the keywords list in predicate into a string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    .reduce(\"\", (x, y) -\u003e x + \" \" + y);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            sb.append(PREFIX_SCHOOL).append(stringSchool).append(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        descriptor.getYearPredicate().ifPresent(predicate -\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                sb.append(PREFIX_YEAR).append(predicate.year).append(\" \"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 1,
      "VaishakAnand": 8,
      "StopTakingAllTheNames": 26,
      "-": 31,
      "csiongn": 24,
      "hogantan": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return Index.fromOneBased(model.getSortedStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return Index.fromOneBased(model.getSortedStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Student getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return model.getSortedStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "csiongn": 3,
      "hogantan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDITIONAL_DETAILS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDITIONAL_DETAILS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_FEEDBACK_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_FEEDBACK_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_STATUS_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_STATUS_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_TIME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_TIME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_VENUE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_VENUE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_DATE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_SCORE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXAM_SCORE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FEE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FEE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_DATE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PAYMENT_DATE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_LEVEL_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_LEVEL_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_TYPE_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_TYPE_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_QUESTION_MATH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_QUESTION_NEWTON;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "import static seedu.address.testutil.StudentBuilder.DEFAULT_SOLUTION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Reeve;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import seedu.address.model.student.SchoolType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Attendance;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.Feedback;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.exam.Exam;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "import seedu.address.model.student.academic.exam.Score;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import seedu.address.model.student.admin.Admin;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"Anderson Secondary\").withYear(SchoolType.SECONDARY, 3).withPhone(\"94351253\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .withClassVenue(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"5 1500-1700\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withDetails(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(\"End of Year Examination 2020\", \"7/11/2020\", new Score(\"50/100\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Exam(\"Mid Year Examination 2020\", \"25/7/2020\", new Score(\"20/30\")))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(\"sleepy during lesson\")))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"Pei Hwa Secondary\").withYear(SchoolType.SECONDARY, 2).withPhone(\"98765432\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"2 1230-1430\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(\"CA2\", \"19/9/2020\", new Score(\"73/100\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Exam(\"CA1\", \"2/3/2020\", new Score(\"21/40\")))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(\"sleepy during lesson\")))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"Catholic High\").withYear(SchoolType.SECONDARY, 5).withPhone(\"95352563\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .withFee(\"450.50\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withClassTime(\"1 1500-1700\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(\"End of Year Examination 2020\", \"7/11/2020\", new Score(\"50/100\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Exam(\"Mid Year Examination 2020\", \"25/7/2020\", new Score(\"20/30\")))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(\"sleepy during lesson\")))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"Methodist Girls School\").withYear(SchoolType.SECONDARY, 1).withPhone(\"87652533\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withPaymentDate(\"28/2/2018\").withClassTime(\"1 1700-1900\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(\"End of Year Examination 2020\", \"7/11/2020\", new Score(\"50/100\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Exam(\"Mid Year Examination 2020\", \"25/7/2020\", new Score(\"20/30\")))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(\"sleepy during lesson\")))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"River Valley High\").withYear(SchoolType.JC, 2).withPhone(\"9482224\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSolved(DEFAULT_SOLUTION, DEFAULT_QUESTION_NEWTON, DEFAULT_QUESTION_MATH).withClassTime(\"1 1900-2100\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(\"End of Year Examination 2020\", \"7/11/2020\", new Score(\"50/100\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Exam(\"Mid Year Examination 2020\", \"25/7/2020\", new Score(\"20/30\")))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(\"sleepy during lesson\")))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"Raffles Girls School\").withYear(SchoolType.SECONDARY, 2)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withClassTime(\"3 1200-1430\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(\"End of Year Examination 2020\", \"7/11/2020\", new Score(\"50/100\")),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Exam(\"Mid Year Examination 2020\", \"25/7/2020\", new Score(\"20/30\")))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(\"sleepy during lesson\")))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"Montford Secondary\").withYear(SchoolType.SECONDARY, 4)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withClassTime(\"2 1000-1230\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(\"End of Year Examination 2020\", \"7/11/2020\", new Score(\"50/100\")),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Exam(\"Mid Year Examination 2020\", \"25/7/2020\", new Score(\"20/30\")))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(\"14/04/1998\", \"present\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(\"sleepy during lesson\")))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"NUS High School\").withYear(SchoolType.JC, 2).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withSchool(\"NUS High School\").withYear(SchoolType.JC, 2).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            .withSchool(VALID_SCHOOL_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(VALID_SCHOOL_TYPE_AMY, VALID_SCHOOL_LEVEL_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withClassVenue(VALID_CLASS_VENUE_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withClassTime(VALID_CLASS_TIME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withFee(VALID_FEE_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withPaymentDate(VALID_PAYMENT_DATE_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withDetails(VALID_ADDITIONAL_DETAILS_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .withQuestions(VALID_QUESTION_AMY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(VALID_EXAM_NAME_AMY, VALID_EXAM_DATE_AMY, new Score(VALID_EXAM_SCORE_AMY)))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(VALID_ATTENDANCE_DATE_AMY, VALID_ATTENDANCE_STATUS_AMY,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(VALID_ATTENDANCE_FEEDBACK_AMY)))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            .withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .withYear(VALID_SCHOOL_TYPE_BOB, VALID_SCHOOL_LEVEL_BOB)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withClassVenue(VALID_CLASS_VENUE_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withClassTime(VALID_CLASS_TIME_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withFee(VALID_FEE_BOB)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withPaymentDate(VALID_PAYMENT_DATE_BOB)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            .withDetails(VALID_ADDITIONAL_DETAILS_BOB)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "StopTakingAllTheNames"
        },
        "content": "            .withSolved(DEFAULT_SOLUTION, VALID_QUESTION_BOB)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withExams(new Exam(VALID_EXAM_NAME_BOB, VALID_EXAM_DATE_BOB, new Score(VALID_EXAM_SCORE_BOB)))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "            .withAttendances(new Attendance(VALID_ATTENDANCE_DATE_BOB, VALID_ATTENDANCE_STATUS_BOB,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "                    new Feedback(VALID_ATTENDANCE_FEEDBACK_BOB)))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static final Admin BOB_ADMIN \u003d BOB.getAdmin();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    private TypicalStudents() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VaishakAnand"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical students."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Reeve getTypicalAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Reeve ab \u003d new Reeve();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (Student student : getTypicalPersons()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 17,
      "VaishakAnand": 57,
      "StopTakingAllTheNames": 14,
      "-": 39,
      "csiongn": 39,
      "hogantan": 8
    }
  }
]
